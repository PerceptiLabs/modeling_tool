#!/usr/bin/env bash
set -euo pipefail

[ $# -eq 3 ] || {
  echo "USAGE: $0 <branch> <version> <remote-name>"
  exit 1
}

BRANCH=$1
VERSION=$2
REMOTE=$3
TAG=pip_$VERSION

prep_git(){
  if ! git remote 2>/dev/null | grep --quiet $REMOTE ; then
    echo "Remote $REMOTE isn't set up. Check your parameters."
    exit 1
  fi

  echo -n "Fetching from $REMOTE ... "
  git fetch $REMOTE &>/dev/null
  git fetch $REMOTE --tags &>/dev/null
  echo "done"

  echo -n "Checking the tag ... "
  if git show $TAG &>/dev/null ; then
    echo "Error: Tag $TAG has already been set. You'll have to release manually."
    exit 1
  fi

  if ! git show $REMOTE/$BRANCH &>/dev/null ; then
    echo "There's no branch '$BRANCH' in remote '$REMOTE'."
    exit 1
  fi
  echo "done"
}

git_work(){
  git checkout --quiet $BRANCH
  git reset --quiet --hard $REMOTE/$BRANCH
  root_dir=$(git rev-parse --show-toplevel)

  existing=$(cat "${root_dir}/VERSION")
  if ! echo "${existing}" | grep --quiet -v "${VERSION}" ; then
    echo "VERSION file is already set to ${VERSION}. You'll have to release manually."
    exit 1
  fi


  echo "${VERSION}" > "${root_dir}/VERSION"
  echo "VERSION file is set to ${VERSION}"
  git add "${root_dir}/VERSION"
  git commit -m "Bumped version to ${VERSION}" > /dev/null
  git tag $TAG
  git tag $VERSION
  git tag enterprise_$VERSION

  echo -n "pushing changes ... "
  git push --quiet $REMOTE HEAD
  git push --quiet $REMOTE $TAG
  git push --quiet $REMOTE $VERSION
  git push --quiet $REMOTE enterprise_$VERSION
  echo "done"
}


python check_pypi_space.py
prep_git
git_work
echo "Now run the PerceptiLabs Pip pipeline on tag $TAG with variables FORCE_PUBLISH=true and PACKAGE_NAME_OVERRIDE=perceptilabs"
