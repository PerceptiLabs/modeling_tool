{"tf.debugging.Assert": "tf.debugging.Assert(condition,data,summarize=None,name=None)", "tf.no_gradient": "tf.no_gradient(op_type)", "tf.Print": "tf.Print(input_,data,message=None,first_n=None,summarize=None,name=None)", "tf.math.abs": "tf.math.abs(x,name=None)", "tf.math.accumulate_n": "tf.math.accumulate_n(inputs,shape=None,tensor_dtype=None,name=None)", "tf.math.acos": "tf.math.acos(x,name=None)", "tf.math.acosh": "tf.math.acosh(x,name=None)", "tf.math.add": "tf.math.add(x,y,name=None)", "tf.add_check_numerics_ops": "tf.add_check_numerics_ops()", "tf.math.add_n": "tf.math.add_n(inputs,name=None)", "tf.add_to_collection": "tf.add_to_collection(name,value)", "tf.add_to_collections": "tf.add_to_collections(names,value)", "tf.all_variables": "tf.all_variables()", "tf.math.angle": "tf.math.angle(input,name=None)", "tf.app.run": "tf.app.run(main=None,argv=None)", "tf.arg_max": "tf.arg_max(input,dimension,output_type=tf.dtypes.int64,name=None)", "tf.arg_min": "tf.arg_min(input,dimension,output_type=tf.dtypes.int64,name=None)", "tf.math.argmax": "tf.math.argmax(input,axis=None,name=None,dimension=None,output_type=tf.dtypes.int64)", "tf.math.argmin": "tf.math.argmin(input,axis=None,name=None,dimension=None,output_type=tf.dtypes.int64)", "tf.argsort": "tf.argsort(values,axis=-1,direction='ASCENDING',stable=False,name=None)", "tf.dtypes.as_dtype": "tf.dtypes.as_dtype(type_value)", "tf.dtypes.as_string": "tf.dtypes.as_string(input,precision=-1,scientific=False,shortest=False,width=-1,fill='',name=None)", "tf.math.asin": "tf.math.asin(x,name=None)", "tf.math.asinh": "tf.math.asinh(x,name=None)", "tf.debugging.assert_equal": "tf.debugging.assert_equal(x,y,data=None,summarize=None,message=None,name=None)", "tf.debugging.assert_greater": "tf.debugging.assert_greater(x,y,data=None,summarize=None,message=None,name=None)", "tf.debugging.assert_greater_equal": "tf.debugging.assert_greater_equal(x,y,data=None,summarize=None,message=None,name=None)", "tf.debugging.assert_integer": "tf.debugging.assert_integer(x,message=None,name=None)", "tf.debugging.assert_less": "tf.debugging.assert_less(x,y,data=None,summarize=None,message=None,name=None)", "tf.debugging.assert_less_equal": "tf.debugging.assert_less_equal(x,y,data=None,summarize=None,message=None,name=None)", "tf.debugging.assert_near": "tf.debugging.assert_near(x,y,rtol=None,atol=None,data=None,summarize=None,message=None,name=None)", "tf.debugging.assert_negative": "tf.debugging.assert_negative(x,data=None,summarize=None,message=None,name=None)", "tf.debugging.assert_non_negative": "tf.debugging.assert_non_negative(x,data=None,summarize=None,message=None,name=None)", "tf.debugging.assert_non_positive": "tf.debugging.assert_non_positive(x,data=None,summarize=None,message=None,name=None)", "tf.debugging.assert_none_equal": "tf.debugging.assert_none_equal(x,y,data=None,summarize=None,message=None,name=None)", "tf.debugging.assert_positive": "tf.debugging.assert_positive(x,data=None,summarize=None,message=None,name=None)", "tf.debugging.assert_proper_iterable": "tf.debugging.assert_proper_iterable(values)", "tf.debugging.assert_rank": "tf.debugging.assert_rank(x,rank,data=None,summarize=None,message=None,name=None)", "tf.debugging.assert_rank_at_least": "tf.debugging.assert_rank_at_least(x,rank,data=None,summarize=None,message=None,name=None)", "tf.debugging.assert_rank_in": "tf.debugging.assert_rank_in(x,ranks,data=None,summarize=None,message=None,name=None)", "tf.debugging.assert_same_float_dtype": "tf.debugging.assert_same_float_dtype(tensors=None,dtype=None)", "tf.debugging.assert_scalar": "tf.debugging.assert_scalar(tensor,name=None,message=None)", "tf.debugging.assert_type": "tf.debugging.assert_type(tensor,tf_type,message=None,name=None)", "tf.assert_variables_initialized": "tf.assert_variables_initialized(var_list=None)", "tf.assign": "tf.assign(ref,value,validate_shape=None,use_locking=None,name=None)", "tf.assign_add": "tf.assign_add(ref,value,use_locking=None,name=None)", "tf.assign_sub": "tf.assign_sub(ref,value,use_locking=None,name=None)", "tf.math.atan": "tf.math.atan(x,name=None)", "tf.math.atan2": "tf.math.atan2(y,x,name=None)", "tf.math.atanh": "tf.math.atanh(x,name=None)", "tf.autograph.to_code": "tf.autograph.to_code(entity,recursive=True,arg_values=None,arg_types=None,indentation='',experimental_optional_features=tf.autograph.experimental.Feature.ALL,experimental_partial_types=None)", "tf.autograph.to_graph": "tf.autograph.to_graph(entity,recursive=True,arg_values=None,arg_types=None,experimental_optional_features=tf.autograph.experimental.Feature.ALL,experimental_strip_decorators=None,experimental_verbose=converter.Verbosity.BRIEF,experimental_partial_types=None)", "tf.batch_gather": "tf.batch_gather(params,indices,name=None)", "tf.batch_scatter_update": "tf.batch_scatter_update(ref,indices,updates,use_locking=True,name=None)", "tf.batch_to_space": "tf.batch_to_space(input,crops,block_size,name=None)", "tf.batch_to_space_nd": "tf.batch_to_space_nd(input,block_shape,crops,name=None)", "tf.math.betainc": "tf.math.betainc(a,b,x,name=None)", "tf.math.bincount": "tf.math.bincount(arr,weights=None,minlength=None,maxlength=None,dtype=tf.dtypes.int32)", "tf.bitcast": "tf.bitcast(input,type,name=None)", "tf.bitwise.bitwise_and": "tf.bitwise.bitwise_and(x,y,name=None)", "tf.bitwise.bitwise_or": "tf.bitwise.bitwise_or(x,y,name=None)", "tf.bitwise.bitwise_xor": "tf.bitwise.bitwise_xor(x,y,name=None)", "tf.bitwise.invert": "tf.bitwise.invert(x,name=None)", "tf.bitwise.left_shift": "tf.bitwise.left_shift(x,y,name=None)", "tf.bitwise.right_shift": "tf.bitwise.right_shift(x,y,name=None)", "tf.boolean_mask": "tf.boolean_mask(tensor,mask,name='boolean_mask',axis=None)", "tf.broadcast_dynamic_shape": "tf.broadcast_dynamic_shape(shape_x,shape_y)", "tf.broadcast_static_shape": "tf.broadcast_static_shape(shape_x,shape_y)", "tf.broadcast_to": "tf.broadcast_to(input,shape,name=None)", "tf.case": "tf.case(pred_fn_pairs,default=None,exclusive=False,strict=False,name='case')", "tf.dtypes.cast": "tf.dtypes.cast(x,dtype,name=None)", "tf.math.ceil": "tf.math.ceil(x,name=None)", "tf.debugging.check_numerics": "tf.debugging.check_numerics(tensor,message,name=None)", "tf.linalg.cholesky": "tf.linalg.cholesky(input,name=None)", "tf.linalg.cholesky_solve": "tf.linalg.cholesky_solve(chol,rhs,name=None)", "tf.clip_by_average_norm": "tf.clip_by_average_norm(t,clip_norm,name=None)", "tf.clip_by_global_norm": "tf.clip_by_global_norm(t_list,clip_norm,use_norm=None,name=None)", "tf.clip_by_norm": "tf.clip_by_norm(t,clip_norm,axes=None,name=None)", "tf.clip_by_value": "tf.clip_by_value(t,clip_value_min,clip_value_max,name=None)", "tf.colocate_with": "tf.colocate_with(op,ignore_existing=False)", "tf.compat.as_bytes": "tf.compat.as_bytes(bytes_or_text,encoding='utf-8')", "tf.compat.as_text": "tf.compat.as_text(bytes_or_text,encoding='utf-8')", "tf.compat.as_str_any": "tf.compat.as_str_any(value)", "tf.compat.forward_compatibility_horizon": "tf.compat.forward_compatibility_horizon(year,month,day)", "tf.compat.forward_compatible": "tf.compat.forward_compatible(year,month,day)", "tf.compat.path_to_str": "tf.compat.path_to_str(path)", "tf.dtypes.complex": "tf.dtypes.complex(real,imag,name=None)", "tf.concat": "tf.concat(values,axis,name='concat')", "tf.cond": "tf.cond(pred,true_fn=None,false_fn=None,strict=False,name=None,fn1=None,fn2=None)", "tf.math.confusion_matrix": "tf.math.confusion_matrix(labels,predictions,num_classes=None,dtype=tf.dtypes.int32,name=None,weights=None)", "tf.math.conj": "tf.math.conj(x,name=None)", "tf.constant": "tf.constant(value,dtype=None,shape=None,name='Const',verify_shape=False)", "tf.container": "tf.container(container_name)", "tf.contrib.autograph.convert": "tf.contrib.autograph.convert(recursive=False,verbose=converter.Verbosity.BRIEF,optional_features=tf.autograph.experimental.Feature.ALL)", "tf.contrib.autograph.converted_call": "tf.contrib.autograph.converted_call(f,owner,options,*args,**kwargs)", "tf.contrib.autograph.do_not_convert": "tf.contrib.autograph.do_not_convert(run_as=tf.contrib.autograph.RunMode.GRAPH,return_dtypes=None)", "tf.contrib.autograph.improved_errors": "tf.contrib.autograph.improved_errors(*args,**kwds)", "tf.contrib.autograph.set_element_type": "tf.contrib.autograph.set_element_type(entity,dtype,shape=UNSPECIFIED)", "tf.contrib.autograph.set_loop_options": "tf.contrib.autograph.set_loop_options(parallel_iterations=UNSPECIFIED,back_prop=UNSPECIFIED,swap_memory=UNSPECIFIED,maximum_iterations=UNSPECIFIED)", "tf.contrib.autograph.stack": "tf.contrib.autograph.stack(list_or_tensor,element_dtype=None,strict=True)", "tf.contrib.autograph.tensor_list": "tf.contrib.autograph.tensor_list(elements,element_dtype=None,element_shape=None,use_tensor_array=False)", "tf.contrib.batching.batch_function": "tf.contrib.batching.batch_function(num_batch_threads,max_batch_size,batch_timeout_micros,allowed_batch_sizes=None,max_enqueued_batches=10)", "tf.contrib.bayesflow.monte_carlo.expectation": "tf.contrib.bayesflow.monte_carlo.expectation(f,samples,log_prob=None,use_reparametrization=True,axis=0,keep_dims=False,name=None)", "tf.contrib.bayesflow.monte_carlo.expectation_importance_sampler": "tf.contrib.bayesflow.monte_carlo.expectation_importance_sampler(f,log_p,sampling_dist_q,z=None,n=None,seed=None,name='expectation_importance_sampler')", "tf.contrib.bayesflow.monte_carlo.expectation_importance_sampler_logspace": "tf.contrib.bayesflow.monte_carlo.expectation_importance_sampler_logspace(log_f,log_p,sampling_dist_q,z=None,n=None,seed=None,name='expectation_importance_sampler_logspace')", "tf.contrib.checkpoint.capture_dependencies": "tf.contrib.checkpoint.capture_dependencies(template)", "tf.contrib.checkpoint.dot_graph_from_checkpoint": "tf.contrib.checkpoint.dot_graph_from_checkpoint(save_path)", "tf.contrib.checkpoint.list_objects": "tf.contrib.checkpoint.list_objects(root_checkpointable)", "tf.contrib.checkpoint.object_metadata": "tf.contrib.checkpoint.object_metadata(save_path)", "tf.contrib.checkpoint.split_dependency": "tf.contrib.checkpoint.split_dependency(component_names,component_dtypes,fill_save_buffer_fn,consume_restore_buffer_fn)", "tf.contrib.cloud.configure_colab_session": "tf.contrib.cloud.configure_colab_session(session)", "tf.contrib.cloud.configure_gcs": "tf.contrib.cloud.configure_gcs(session,credentials=None,block_cache=None,device=None)", "tf.contrib.constrained_optimization.find_best_candidate_distribution": "tf.contrib.constrained_optimization.find_best_candidate_distribution(objective_vector,constraints_matrix,epsilon=0.0)", "tf.contrib.constrained_optimization.find_best_candidate_index": "tf.contrib.constrained_optimization.find_best_candidate_index(objective_vector,constraints_matrix,rank_objectives=False)", "tf.contrib.copy_graph.copy_op_to_graph": "tf.contrib.copy_graph.copy_op_to_graph(org_instance,to_graph,variables,scope='')", "tf.contrib.copy_graph.copy_variable_to_graph": "tf.contrib.copy_graph.copy_variable_to_graph(org_instance,to_graph,scope='')", "tf.contrib.copy_graph.get_copied_op": "tf.contrib.copy_graph.get_copied_op(org_instance,graph,scope='')", "tf.contrib.crf.crf_binary_score": "tf.contrib.crf.crf_binary_score(tag_indices,sequence_lengths,transition_params)", "tf.contrib.crf.crf_decode": "tf.contrib.crf.crf_decode(potentials,transition_params,sequence_length)", "tf.contrib.crf.crf_log_likelihood": "tf.contrib.crf.crf_log_likelihood(inputs,tag_indices,sequence_lengths,transition_params=None)", "tf.contrib.crf.crf_log_norm": "tf.contrib.crf.crf_log_norm(inputs,sequence_lengths,transition_params)", "tf.contrib.crf.crf_multitag_sequence_score": "tf.contrib.crf.crf_multitag_sequence_score(inputs,tag_bitmap,sequence_lengths,transition_params)", "tf.contrib.crf.crf_sequence_score": "tf.contrib.crf.crf_sequence_score(inputs,tag_indices,sequence_lengths,transition_params)", "tf.contrib.crf.crf_unary_score": "tf.contrib.crf.crf_unary_score(tag_indices,sequence_lengths,inputs)", "tf.contrib.crf.viterbi_decode": "tf.contrib.crf.viterbi_decode(score,transition_params)", "tf.contrib.data.Counter": "tf.contrib.data.Counter(start=0,step=1,dtype=tf.dtypes.int64)", "tf.contrib.data.assert_element_shape": "tf.contrib.data.assert_element_shape(expected_shapes)", "tf.contrib.data.batch_and_drop_remainder": "tf.contrib.data.batch_and_drop_remainder(batch_size)", "tf.contrib.data.bucket_by_sequence_length": "tf.contrib.data.bucket_by_sequence_length(element_length_func,bucket_boundaries,bucket_batch_sizes,padded_shapes=None,padding_values=None,pad_to_bucket_boundary=False,no_padding=False)", "tf.contrib.data.choose_from_datasets": "tf.contrib.data.choose_from_datasets(datasets,choice_dataset)", "tf.contrib.data.copy_to_device": "tf.contrib.data.copy_to_device(target_device,source_device='/cpu:0')", "tf.contrib.data.dense_to_sparse_batch": "tf.contrib.data.dense_to_sparse_batch(batch_size,row_shape)", "tf.contrib.data.enumerate_dataset": "tf.contrib.data.enumerate_dataset(start=0)", "tf.data.experimental.get_next_as_optional": "tf.data.experimental.get_next_as_optional(iterator)", "tf.contrib.data.get_single_element": "tf.contrib.data.get_single_element(dataset)", "tf.contrib.data.group_by_reducer": "tf.contrib.data.group_by_reducer(key_func,reducer)", "tf.contrib.data.group_by_window": "tf.contrib.data.group_by_window(key_func,reduce_func,window_size=None,window_size_func=None)", "tf.contrib.data.ignore_errors": "tf.contrib.data.ignore_errors()", "tf.contrib.data.make_batched_features_dataset": "tf.contrib.data.make_batched_features_dataset(file_pattern,batch_size,features,reader=tf.data.TFRecordDataset,label_key=None,reader_args=None,num_epochs=None,shuffle=True,shuffle_buffer_size=10000,shuffle_seed=None,prefetch_buffer_size=optimization.AUTOTUNE,reader_num_threads=1,parser_num_threads=2,sloppy_ordering=False,drop_final_batch=False)", "tf.contrib.data.make_csv_dataset": "tf.contrib.data.make_csv_dataset(file_pattern,batch_size,column_names=None,column_defaults=None,label_name=None,select_columns=None,field_delim=',',use_quote_delim=True,na_value='',header=True,num_epochs=None,shuffle=True,shuffle_buffer_size=10000,shuffle_seed=None,prefetch_buffer_size=optimization.AUTOTUNE,num_parallel_reads=1,sloppy=False,num_rows_for_inference=100,compression_type=None)", "tf.contrib.data.make_saveable_from_iterator": "tf.contrib.data.make_saveable_from_iterator(iterator)", "tf.contrib.data.map_and_batch": "tf.contrib.data.map_and_batch(map_func,batch_size,num_parallel_batches=None,drop_remainder=False,num_parallel_calls=None)", "tf.contrib.data.padded_batch_and_drop_remainder": "tf.contrib.data.padded_batch_and_drop_remainder(batch_size,padded_shapes,padding_values=None)", "tf.contrib.data.parallel_interleave": "tf.contrib.data.parallel_interleave(map_func,cycle_length,block_length=1,sloppy=False,buffer_output_elements=None,prefetch_input_elements=None)", "tf.contrib.data.parse_example_dataset": "tf.contrib.data.parse_example_dataset(features,num_parallel_calls=1)", "tf.contrib.data.prefetch_to_device": "tf.contrib.data.prefetch_to_device(device,buffer_size=None)", "tf.contrib.data.read_batch_features": "tf.contrib.data.read_batch_features(file_pattern,batch_size,features,reader=tf.data.TFRecordDataset,reader_args=None,randomize_input=True,num_epochs=None,capacity=10000)", "tf.contrib.data.reduce_dataset": "tf.contrib.data.reduce_dataset(dataset,reducer)", "tf.contrib.data.rejection_resample": "tf.contrib.data.rejection_resample(class_func,target_dist,initial_dist=None,seed=None)", "tf.contrib.data.sample_from_datasets": "tf.contrib.data.sample_from_datasets(datasets,weights=None,seed=None)", "tf.contrib.data.scan": "tf.contrib.data.scan(initial_state,scan_func)", "tf.contrib.data.shuffle_and_repeat": "tf.contrib.data.shuffle_and_repeat(buffer_size,count=None,seed=None)", "tf.contrib.data.sliding_window_batch": "tf.contrib.data.sliding_window_batch(window_size,stride=None,window_shift=None,window_stride=1)", "tf.contrib.data.sloppy_interleave": "tf.contrib.data.sloppy_interleave(map_func,cycle_length,block_length=1)", "tf.contrib.data.unbatch": "tf.contrib.data.unbatch()", "tf.contrib.data.unique": "tf.contrib.data.unique()", "tf.scalar_summary -> tf.summary.scalar\ntf.histogram_summary -> tf.summary.histogram\ntf.audio_summary -> tf.summary.audio\ntf.image_summary -> tf.summary.image\ntf.merge_summary -> tf.summary.merge\ntf.merge_all_summaries -> tf.summary.merge_all\n": "tf.scalar_summary->tf.summary.scalartf.histogram_summary->tf.summary.histogramtf.audio_summary->tf.summary.audiotf.image_summary->tf.summary.imagetf.merge_summary->tf.summary.mergetf.merge_all_summaries->tf.summary.merge_all", "tf.contrib.deprecated.audio_summary": "tf.contrib.deprecated.audio_summary(tag,tensor,sample_rate,max_outputs=3,collections=None,name=None)", "tf.contrib.deprecated.histogram_summary": "tf.contrib.deprecated.histogram_summary(tag,values,collections=None,name=None)", "tf.contrib.deprecated.image_summary": "tf.contrib.deprecated.image_summary(tag,tensor,max_images=3,collections=None,name=None)", "tf.contrib.deprecated.merge_all_summaries": "tf.contrib.deprecated.merge_all_summaries(key=tf.GraphKeys.SUMMARIES)", "tf.contrib.deprecated.merge_summary": "tf.contrib.deprecated.merge_summary(inputs,collections=None,name=None)", "tf.contrib.deprecated.scalar_summary": "tf.contrib.deprecated.scalar_summary(tags,values,collections=None,name=None)", "tf.contrib.distribute.get_cross_replica_context": "tf.contrib.distribute.get_cross_replica_context()", "tf.distribute.get_strategy": "tf.distribute.get_strategy()", "tf.distribute.get_loss_reduction": "tf.distribute.get_loss_reduction()", "tf.distribute.get_replica_context": "tf.distribute.get_replica_context()", "tf.distribute.has_strategy": "tf.distribute.has_strategy()", "tf.distribute.in_cross_replica_context": "tf.distribute.in_cross_replica_context()", "tf.contrib.distribute.require_replica_context": "tf.contrib.distribute.require_replica_context(replica_ctx)", "tf.contrib.distribute.run_standard_tensorflow_server": "tf.contrib.distribute.run_standard_tensorflow_server(session_config=None)", "tf.contrib.distributions.assign_log_moving_mean_exp": "tf.contrib.distributions.assign_log_moving_mean_exp(log_mean_exp_var,log_value,decay,name=None)", "tf.contrib.distributions.assign_moving_mean_variance": "tf.contrib.distributions.assign_moving_mean_variance(mean_var,variance_var,value,decay,name=None)", "tf.contrib.distributions.auto_correlation": "tf.contrib.distributions.auto_correlation(x,axis=-1,max_lags=None,center=True,normalize=True,name='auto_correlation')", "tf.contrib.distributions.bijectors.masked_autoregressive_default_template": "tf.contrib.distributions.bijectors.masked_autoregressive_default_template(hidden_layers,shift_only=False,activation=tf.nn.relu,log_scale_min_clip=-5.0,log_scale_max_clip=3.0,log_scale_clip_gradient=False,name=None,*args,**kwargs)", "tf.contrib.distributions.bijectors.masked_dense": "tf.contrib.distributions.bijectors.masked_dense(inputs,units,num_blocks=None,exclusive=False,kernel_initializer=None,reuse=None,name=None,*args,**kwargs)", "tf.contrib.distributions.bijectors.real_nvp_default_template": "tf.contrib.distributions.bijectors.real_nvp_default_template(hidden_layers,shift_only=False,activation=tf.nn.relu,name=None,*args,**kwargs)", "tf.contrib.distributions.estimator_head_distribution_regression": "tf.contrib.distributions.estimator_head_distribution_regression(make_distribution_fn,label_dimension=1,logits_dimension=None,label_name=None,weight_column_name=None,enable_centered_bias=False,head_name=None)", "tf.contrib.distributions.fill_triangular": "tf.contrib.distributions.fill_triangular(x,upper=False,name=None)", "tf.contrib.distributions.fill_triangular_inverse": "tf.contrib.distributions.fill_triangular_inverse(x,upper=False,name=None)", "tf.distributions.kl_divergence": "tf.distributions.kl_divergence(distribution_a,distribution_b,allow_nan_stats=True,name=None)", "tf.contrib.distributions.matrix_diag_transform": "tf.contrib.distributions.matrix_diag_transform(matrix,transform=None,name=None)", "tf.contrib.distributions.moving_mean_variance": "tf.contrib.distributions.moving_mean_variance(value,decay,collections=None,name=None)", "tf.contrib.distributions.normal_conjugates_known_scale_posterior": "tf.contrib.distributions.normal_conjugates_known_scale_posterior(prior,scale,s,n)", "tf.contrib.distributions.normal_conjugates_known_scale_predictive": "tf.contrib.distributions.normal_conjugates_known_scale_predictive(prior,scale,s,n)", "tf.contrib.distributions.percentile": "tf.contrib.distributions.percentile(x,q,axis=None,interpolation=None,keep_dims=False,validate_args=False,name=None)", "tf.contrib.distributions.quadrature_scheme_lognormal_gauss_hermite": "tf.contrib.distributions.quadrature_scheme_lognormal_gauss_hermite(loc,scale,quadrature_size,validate_args=False,name=None)", "tf.contrib.distributions.quadrature_scheme_lognormal_quantiles": "tf.contrib.distributions.quadrature_scheme_lognormal_quantiles(loc,scale,quadrature_size,validate_args=False,name=None)", "tf.contrib.distributions.quadrature_scheme_softmaxnormal_gauss_hermite": "tf.contrib.distributions.quadrature_scheme_softmaxnormal_gauss_hermite(normal_loc,normal_scale,quadrature_size,validate_args=False,name=None)", "tf.contrib.distributions.quadrature_scheme_softmaxnormal_quantiles": "tf.contrib.distributions.quadrature_scheme_softmaxnormal_quantiles(normal_loc,normal_scale,quadrature_size,validate_args=False,name=None)", "tf.contrib.distributions.reduce_weighted_logsumexp": "tf.contrib.distributions.reduce_weighted_logsumexp(logx,w=None,axis=None,keep_dims=False,return_sign=False,name=None)", "tf.contrib.distributions.softplus_inverse": "tf.contrib.distributions.softplus_inverse(x,name=None)", "tf.contrib.distributions.tridiag": "tf.contrib.distributions.tridiag(below=None,diag=None,above=None,name=None)", "tf.contrib.eager.add_execution_callback": "tf.contrib.eager.add_execution_callback(callback)", "tf.contrib.eager.async_clear_error": "tf.contrib.eager.async_clear_error()", "tf.contrib.eager.async_wait": "tf.contrib.eager.async_wait()", "tf.contrib.eager.clear_execution_callbacks": "tf.contrib.eager.clear_execution_callbacks()", "tf.contrib.eager.connect_to_remote_host": "tf.contrib.eager.connect_to_remote_host(remote_host=None,job_name='worker')", "tf.custom_gradient": "tf.custom_gradient(f)", "tf.contrib.eager.defun": "tf.contrib.eager.defun(func=None,input_signature=None,autograph=True)", "tf.enable_eager_execution": "tf.enable_eager_execution(config=None,device_policy=None,execution_mode=None)", "tf.contrib.eager.enable_remote_eager_execution": "tf.contrib.eager.enable_remote_eager_execution(config=None,device_policy=None,execution_mode=None,server_def=None)", "tf.contrib.eager.errstate": "tf.contrib.eager.errstate(*args,**kwds)", "tf.executing_eagerly": "tf.executing_eagerly()", "tf.contrib.eager.execution_mode": "tf.contrib.eager.execution_mode(mode)", "tf.contrib.eager.function": "tf.contrib.eager.function(func=None,input_signature=None,autograph=True,experimental_autograph_options=None)", "tf.contrib.eager.get_optimizer_variables": "tf.contrib.eager.get_optimizer_variables(optimizer)", "tf.contrib.eager.gradients_function": "tf.contrib.eager.gradients_function(f,params=None)", "tf.contrib.eager.implicit_gradients": "tf.contrib.eager.implicit_gradients(f)", "tf.contrib.eager.implicit_value_and_gradients": "tf.contrib.eager.implicit_value_and_gradients(f)", "tf.contrib.eager.inf_callback": "tf.contrib.eager.inf_callback(op_type,inputs,attrs,outputs,op_name,action=tf.contrib.eager.ExecutionCallback.RAISE)", "tf.contrib.eager.inf_nan_callback": "tf.contrib.eager.inf_nan_callback(op_type,inputs,attrs,outputs,op_name,check_inf=True,check_nan=True,action=tf.contrib.eager.ExecutionCallback.RAISE)", "tf.contrib.eager.list_devices": "tf.contrib.eager.list_devices()", "tf.contrib.eager.make_template": "tf.contrib.eager.make_template(name_,func_,create_scope_now_=False,unique_name_=None,custom_getter_=None,create_graph_function_=False,**kwargs)", "tf.contrib.eager.nan_callback": "tf.contrib.eager.nan_callback(op_type,inputs,attrs,outputs,op_name,action=tf.contrib.eager.ExecutionCallback.RAISE)", "tf.contrib.eager.num_gpus": "tf.contrib.eager.num_gpus()", "tf.py_function": "tf.py_function(func,inp,Tout,name=None)", "tf.contrib.eager.restore_network_checkpoint": "tf.contrib.eager.restore_network_checkpoint(network,save_path,map_func=None)", "tf.contrib.eager.restore_variables_on_create": "tf.contrib.eager.restore_variables_on_create(*args,**kwds)", "tf.contrib.eager.run": "tf.contrib.eager.run(main=None,argv=None)", "tf.contrib.eager.run_all_tests_in_graph_and_eager_modes": "tf.contrib.eager.run_all_tests_in_graph_and_eager_modes(cls)", "tf.contrib.eager.run_test_in_graph_and_eager_modes": "tf.contrib.eager.run_test_in_graph_and_eager_modes(func=None,config=None,use_gpu=True,reset_test=True,assert_no_eager_garbage=False)", "tf.contrib.eager.save_network_checkpoint": "tf.contrib.eager.save_network_checkpoint(network,save_path,global_step=None,map_func=None)", "tf.contrib.eager.set_execution_mode": "tf.contrib.eager.set_execution_mode(mode)", "tf.contrib.eager.set_server_def": "tf.contrib.eager.set_server_def(server_def)", "tf.contrib.eager.seterr": "tf.contrib.eager.seterr(inf_or_nan=None)", "tf.contrib.eager.value_and_gradients_function": "tf.contrib.eager.value_and_gradients_function(f,params=None)", "tf.contrib.estimator.DNNClassifierWithLayerAnnotations": "tf.contrib.estimator.DNNClassifierWithLayerAnnotations(hidden_units,feature_columns,model_dir=None,n_classes=2,weight_column=None,label_vocabulary=None,optimizer='Adagrad',activation_fn=tf.nn.relu,dropout=None,input_layer_partitioner=None,config=None,warm_start_from=None,loss_reduction=losses.Reduction.SUM_OVER_BATCH_SIZE)", "tf.contrib.estimator.DNNRegressorWithLayerAnnotations": "tf.contrib.estimator.DNNRegressorWithLayerAnnotations(hidden_units,feature_columns,model_dir=None,label_dimension=1,weight_column=None,optimizer='Adagrad',activation_fn=tf.nn.relu,dropout=None,input_layer_partitioner=None,config=None,warm_start_from=None,loss_reduction=losses.Reduction.SUM_OVER_BATCH_SIZE)", "tf.contrib.estimator.add_metrics": "tf.contrib.estimator.add_metrics(estimator,metric_fn)", "tf.contrib.estimator.binary_classification_head": "tf.contrib.estimator.binary_classification_head(weight_column=None,thresholds=None,label_vocabulary=None,loss_reduction=losses.Reduction.SUM_OVER_BATCH_SIZE,loss_fn=None,name=None)", "tf.contrib.estimator.boosted_trees_classifier_train_in_memory": "tf.contrib.estimator.boosted_trees_classifier_train_in_memory(train_input_fn,feature_columns,model_dir=None,n_classes=canned_boosted_trees._HOLD_FOR_MULTI_CLASS_SUPPORT,weight_column=None,label_vocabulary=None,n_trees=100,max_depth=6,learning_rate=0.1,l1_regularization=0.0,l2_regularization=0.0,tree_complexity=0.0,min_node_weight=0.0,config=None,train_hooks=None,center_bias=False,pruning_mode='none',quantile_sketch_epsilon=0.01)", "tf.contrib.estimator.boosted_trees_regressor_train_in_memory": "tf.contrib.estimator.boosted_trees_regressor_train_in_memory(train_input_fn,feature_columns,model_dir=None,label_dimension=canned_boosted_trees._HOLD_FOR_MULTI_DIM_SUPPORT,weight_column=None,n_trees=100,max_depth=6,learning_rate=0.1,l1_regularization=0.0,l2_regularization=0.0,tree_complexity=0.0,min_node_weight=0.0,config=None,train_hooks=None,center_bias=False,pruning_mode='none',quantile_sketch_epsilon=0.01)", "tf.estimator.experimental.build_raw_supervised_input_receiver_fn": "tf.estimator.experimental.build_raw_supervised_input_receiver_fn(features,labels,default_batch_size=None)", "tf.contrib.estimator.build_supervised_input_receiver_fn_from_input_fn": "tf.contrib.estimator.build_supervised_input_receiver_fn_from_input_fn(input_fn,**input_fn_args)", "tf.contrib.estimator.call_logit_fn": "tf.contrib.estimator.call_logit_fn(logit_fn,features,mode,params,config)", "tf.contrib.estimator.clip_gradients_by_norm": "tf.contrib.estimator.clip_gradients_by_norm(optimizer,clip_norm)", "tf.estimator.experimental.dnn_logit_fn_builder": "tf.estimator.experimental.dnn_logit_fn_builder(units,hidden_units,feature_columns,activation_fn,dropout,input_layer_partitioner,batch_norm)", "tf.contrib.estimator.export_all_saved_models": "tf.contrib.estimator.export_all_saved_models(estimator,export_dir_base,input_receiver_fn_map,assets_extra=None,as_text=False,checkpoint_path=None)", "tf.contrib.estimator.export_saved_model_for_mode": "tf.contrib.estimator.export_saved_model_for_mode(estimator,export_dir_base,input_receiver_fn,assets_extra=None,as_text=False,checkpoint_path=None,mode=model_fn_lib.ModeKeys.PREDICT)", "tf.contrib.estimator.forward_features": "tf.contrib.estimator.forward_features(estimator,keys=None,sparse_default_values=None)", "tf.estimator.experimental.linear_logit_fn_builder": "tf.estimator.experimental.linear_logit_fn_builder(units,feature_columns,sparse_combiner='sum')", "tf.contrib.estimator.logistic_regression_head": "tf.contrib.estimator.logistic_regression_head(weight_column=None,loss_reduction=losses.Reduction.SUM_OVER_BATCH_SIZE,name=None)", "tf.contrib.estimator.make_early_stopping_hook": "tf.contrib.estimator.make_early_stopping_hook(estimator,should_stop_fn,run_every_secs=60,run_every_steps=None)", "tf.contrib.estimator.multi_class_head": "tf.contrib.estimator.multi_class_head(n_classes,weight_column=None,label_vocabulary=None,loss_reduction=losses.Reduction.SUM_OVER_BATCH_SIZE,loss_fn=None,name=None)", "tf.contrib.estimator.multi_head": "tf.contrib.estimator.multi_head(heads,head_weights=None)", "tf.contrib.estimator.multi_label_head": "tf.contrib.estimator.multi_label_head(n_classes,weight_column=None,thresholds=None,label_vocabulary=None,loss_reduction=losses.Reduction.SUM_OVER_BATCH_SIZE,loss_fn=None,classes_for_class_based_metrics=None,name=None)", "tf.contrib.estimator.poisson_regression_head": "tf.contrib.estimator.poisson_regression_head(weight_column=None,label_dimension=1,loss_reduction=losses.Reduction.SUM_OVER_BATCH_SIZE,compute_full_loss=True,name=None)", "tf.contrib.estimator.read_eval_metrics": "tf.contrib.estimator.read_eval_metrics(eval_dir)", "tf.contrib.estimator.regression_head": "tf.contrib.estimator.regression_head(weight_column=None,label_dimension=1,loss_reduction=losses.Reduction.SUM_OVER_BATCH_SIZE,loss_fn=None,inverse_link_fn=None,name=None)", "tf.contrib.estimator.replicate_model_fn": "tf.contrib.estimator.replicate_model_fn(model_fn,loss_reduction=losses.Reduction.SUM_BY_NONZERO_WEIGHTS,devices=None)", "tf.contrib.estimator.stop_if_higher_hook": "tf.contrib.estimator.stop_if_higher_hook(estimator,metric_name,threshold,eval_dir=None,min_steps=0,run_every_secs=60,run_every_steps=None)", "tf.contrib.estimator.stop_if_lower_hook": "tf.contrib.estimator.stop_if_lower_hook(estimator,metric_name,threshold,eval_dir=None,min_steps=0,run_every_secs=60,run_every_steps=None)", "tf.contrib.estimator.stop_if_no_decrease_hook": "tf.contrib.estimator.stop_if_no_decrease_hook(estimator,metric_name,max_steps_without_decrease,eval_dir=None,min_steps=0,run_every_secs=60,run_every_steps=None)", "tf.contrib.estimator.stop_if_no_increase_hook": "tf.contrib.estimator.stop_if_no_increase_hook(estimator,metric_name,max_steps_without_increase,eval_dir=None,min_steps=0,run_every_secs=60,run_every_steps=None)", "tf.contrib.factorization.gmm": "tf.contrib.factorization.gmm(inp,initial_clusters,num_clusters,random_seed,covariance_type=FULL_COVARIANCE,params='wmc')", "tf.contrib.feature_column.sequence_categorical_column_with_hash_bucket": "tf.contrib.feature_column.sequence_categorical_column_with_hash_bucket(key,hash_bucket_size,dtype=tf.dtypes.string)", "tf.contrib.feature_column.sequence_categorical_column_with_identity": "tf.contrib.feature_column.sequence_categorical_column_with_identity(key,num_buckets,default_value=None)", "tf.contrib.feature_column.sequence_categorical_column_with_vocabulary_file": "tf.contrib.feature_column.sequence_categorical_column_with_vocabulary_file(key,vocabulary_file,vocabulary_size=None,num_oov_buckets=0,default_value=None,dtype=tf.dtypes.string)", "tf.contrib.feature_column.sequence_categorical_column_with_vocabulary_list": "tf.contrib.feature_column.sequence_categorical_column_with_vocabulary_list(key,vocabulary_list,dtype=None,default_value=-1,num_oov_buckets=0)", "tf.contrib.feature_column.sequence_input_layer": "tf.contrib.feature_column.sequence_input_layer(features,feature_columns,weight_collections=None,trainable=True)", "tf.contrib.feature_column.sequence_numeric_column": "tf.contrib.feature_column.sequence_numeric_column(key,shape=(1,),default_value=0.0,dtype=tf.dtypes.float32,normalizer_fn=None)", "tf.contrib.ffmpeg.decode_audio": "tf.contrib.ffmpeg.decode_audio(contents,file_format=None,samples_per_second=None,channel_count=None,stream=None)", "tf.contrib.ffmpeg.decode_video": "tf.contrib.ffmpeg.decode_video(contents)", "tf.contrib.ffmpeg.encode_audio": "tf.contrib.ffmpeg.encode_audio(audio,file_format=None,samples_per_second=None)", "tf.contrib.framework.add_arg_scope": "tf.contrib.framework.add_arg_scope(func)", "tf.contrib.framework.add_model_variable": "tf.contrib.framework.add_model_variable(var)", "tf.contrib.framework.arg_scope": "tf.contrib.framework.arg_scope(list_ops_or_scope,**kwargs)", "tf.contrib.framework.arg_scoped_arguments": "tf.contrib.framework.arg_scoped_arguments(func)", "tf.contrib.framework.assert_global_step": "tf.contrib.framework.assert_global_step(global_step_tensor)", "tf.contrib.framework.assert_or_get_global_step": "tf.contrib.framework.assert_or_get_global_step(graph=None,global_step_tensor=None)", "tf.contrib.framework.assert_scalar_int": "tf.contrib.framework.assert_scalar_int(tensor,name=None)", "tf.contrib.framework.assign_from_checkpoint": "tf.contrib.framework.assign_from_checkpoint(model_path,var_list,ignore_missing_vars=False)", "tf.contrib.framework.assign_from_checkpoint_fn": "tf.contrib.framework.assign_from_checkpoint_fn(model_path,var_list,ignore_missing_vars=False,reshape_variables=False)", "tf.contrib.framework.assign_from_values": "tf.contrib.framework.assign_from_values(var_names_to_values)", "tf.contrib.framework.assign_from_values_fn": "tf.contrib.framework.assign_from_values_fn(var_names_to_values)", "tf.convert_to_tensor_or_sparse_tensor": "tf.convert_to_tensor_or_sparse_tensor(value,dtype=None,name=None)", "tf.contrib.framework.create_global_step": "tf.contrib.framework.create_global_step(graph=None)", "tf.contrib.framework.current_arg_scope": "tf.contrib.framework.current_arg_scope()", "tf.contrib.framework.deprecated": "tf.contrib.framework.deprecated(date,instructions,warn_once=True)", "tf.contrib.framework.deprecated_arg_values": "tf.contrib.framework.deprecated_arg_values(date,instructions,warn_once=True,**deprecated_kwargs)", "tf.contrib.framework.deprecated_args": "tf.contrib.framework.deprecated_args(date,instructions,*deprecated_arg_names_or_tuples,**kwargs)", "tf.contrib.framework.filter_variables": "tf.contrib.framework.filter_variables(var_list,include_patterns=None,exclude_patterns=None,reg_search=True)", "tf.contrib.framework.fuse_op": "tf.contrib.framework.fuse_op(graph_def,input_nodes,output_nodes,output_dtypes,output_quantized,op_name,op_type)", "tf.contrib.framework.get_global_step": "tf.contrib.framework.get_global_step(graph=None)", "tf.contrib.framework.get_graph_from_inputs": "tf.contrib.framework.get_graph_from_inputs(op_input_list,graph=None)", "tf.contrib.framework.get_local_variables": "tf.contrib.framework.get_local_variables(scope=None,suffix=None)", "tf.contrib.framework.get_model_variables": "tf.contrib.framework.get_model_variables(scope=None,suffix=None)", "tf.contrib.framework.get_name_scope": "tf.contrib.framework.get_name_scope()", "tf.contrib.framework.get_or_create_global_step": "tf.contrib.framework.get_or_create_global_step(graph=None)", "tf.contrib.framework.get_placeholders": "tf.contrib.framework.get_placeholders(graph)", "tf.contrib.framework.get_trainable_variables": "tf.contrib.framework.get_trainable_variables(scope=None,suffix=None)", "tf.contrib.framework.get_unique_variable": "tf.contrib.framework.get_unique_variable(var_op_name)", "tf.contrib.framework.get_variable_full_name": "tf.contrib.framework.get_variable_full_name(var)", "tf.contrib.framework.get_variables": "tf.contrib.framework.get_variables(scope=None,suffix=None,collection=tf.GraphKeys.GLOBAL_VARIABLES)", "tf.contrib.framework.get_variables_by_name": "tf.contrib.framework.get_variables_by_name(given_name,scope=None)", "tf.contrib.framework.get_variables_by_suffix": "tf.contrib.framework.get_variables_by_suffix(suffix,scope=None)", "tf.contrib.framework.get_variables_to_restore": "tf.contrib.framework.get_variables_to_restore(include=None,exclude=None)", "tf.contrib.framework.global_variable": "tf.contrib.framework.global_variable(initial_value,validate_shape=True,name=None,use_resource=None)", "tf.contrib.framework.has_arg_scope": "tf.contrib.framework.has_arg_scope(func)", "tf.contrib.framework.init_from_checkpoint": "tf.contrib.framework.init_from_checkpoint(checkpoint_dir,assignment_map)", "tf.contrib.framework.is_tensor": "tf.contrib.framework.is_tensor(x)", "tf.contrib.framework.list_variables": "tf.contrib.framework.list_variables(checkpoint_dir)", "tf.contrib.framework.load_and_remap_matrix_initializer": "tf.contrib.framework.load_and_remap_matrix_initializer(ckpt_path,old_tensor_name,new_row_vocab_size,new_col_vocab_size,old_row_vocab_size=-1,old_row_vocab_file=None,new_row_vocab_file=None,old_col_vocab_file=None,new_col_vocab_file=None,num_row_oov_buckets=0,num_col_oov_buckets=0,initializer=None,max_rows_in_memory=-1)", "tf.contrib.framework.load_checkpoint": "tf.contrib.framework.load_checkpoint(filepattern)", "tf.contrib.framework.load_embedding_initializer": "tf.contrib.framework.load_embedding_initializer(ckpt_path,embedding_tensor_name,new_vocab_size,embedding_dim,old_vocab_file,new_vocab_file,old_vocab_size=-1,num_oov_buckets=0,initializer=None,max_rows_in_memory=-1)", "tf.contrib.framework.load_linear_multiclass_bias_initializer": "tf.contrib.framework.load_linear_multiclass_bias_initializer(ckpt_path,bias_tensor_name,new_class_vocab_size,old_class_vocab_file,new_class_vocab_file,num_class_oov_buckets=0,initializer=None,max_rows_in_memory=-1)", "tf.contrib.framework.load_variable": "tf.contrib.framework.load_variable(checkpoint_dir,name)", "tf.contrib.framework.load_variable_slot_initializer": "tf.contrib.framework.load_variable_slot_initializer(ckpt_path,old_tensor_name,primary_partition_info,new_row_vocab_size,new_col_vocab_size,old_row_vocab_file=None,new_row_vocab_file=None,old_col_vocab_file=None,new_col_vocab_file=None,num_row_oov_buckets=0,num_col_oov_buckets=0,initializer=None,max_rows_in_memory=-1)", "tf.contrib.framework.local_variable": "tf.contrib.framework.local_variable(initial_value,validate_shape=True,name=None,use_resource=None)", "tf.contrib.framework.model_variable": "tf.contrib.framework.model_variable(name,shape=None,dtype=tf.dtypes.float32,initializer=None,regularizer=None,trainable=True,collections=None,caching_device=None,device=None,partitioner=None,custom_getter=None,use_resource=None,synchronization=tf.VariableSynchronization.AUTO,aggregation=tf.VariableAggregation.NONE)", "tf.contrib.framework.nest.assert_same_structure": "tf.contrib.framework.nest.assert_same_structure(nest1,nest2,check_types=True)", "tf.contrib.framework.nest.assert_shallow_structure": "tf.contrib.framework.nest.assert_shallow_structure(shallow_tree,input_tree,check_types=True)", "tf.contrib.framework.nest.flatten": "tf.contrib.framework.nest.flatten(nested)", "tf.contrib.framework.nest.flatten_dict_items": "tf.contrib.framework.nest.flatten_dict_items(dictionary)", "tf.contrib.framework.nest.flatten_up_to": "tf.contrib.framework.nest.flatten_up_to(shallow_tree,input_tree)", "tf.contrib.framework.nest.flatten_with_joined_string_paths": "tf.contrib.framework.nest.flatten_with_joined_string_paths(structure,separator='/')", "tf.contrib.framework.nest.get_traverse_shallow_structure": "tf.contrib.framework.nest.get_traverse_shallow_structure(traverse_fn,structure)", "tf.contrib.framework.nest.is_sequence": "tf.contrib.framework.nest.is_sequence(o)", "tf.contrib.framework.nest.map_structure": "tf.contrib.framework.nest.map_structure(func,*structure,**check_types_dict)", "tf.contrib.framework.nest.map_structure_up_to": "tf.contrib.framework.nest.map_structure_up_to(shallow_tree,func,*inputs)", "tf.contrib.framework.nest.map_structure_with_paths": "tf.contrib.framework.nest.map_structure_with_paths(func,*structure,**kwargs)", "tf.contrib.framework.nest.pack_sequence_as": "tf.contrib.framework.nest.pack_sequence_as(structure,flat_sequence)", "tf.contrib.framework.nest.yield_flat_paths": "tf.contrib.framework.nest.yield_flat_paths(nest)", "tf.contrib.framework.prepend_name_scope": "tf.contrib.framework.prepend_name_scope(name,import_scope)", "tf.contrib.framework.py_func": "tf.contrib.framework.py_func(func,args=(),kwargs=None,output_types=None,output_shapes=None,stateful=True,name=None)", "tf.contrib.framework.reduce_sum_n": "tf.contrib.framework.reduce_sum_n(tensors,name=None)", "tf.contrib.framework.remove_squeezable_dimensions": "tf.contrib.framework.remove_squeezable_dimensions(predictions,labels,name=None)", "tf.contrib.framework.smart_case": "tf.contrib.framework.smart_case(pred_fn_pairs,default=None,exclusive=False,name='smart_case')", "tf.contrib.framework.smart_cond": "tf.contrib.framework.smart_cond(pred,true_fn=None,false_fn=None,name=None)", "tf.contrib.framework.smart_constant_value": "tf.contrib.framework.smart_constant_value(pred)", "tf.sort": "tf.sort(values,axis=-1,direction='ASCENDING',name=None)", "tf.contrib.framework.strip_name_scope": "tf.contrib.framework.strip_name_scope(name,export_scope)", "tf.contrib.framework.variable": "tf.contrib.framework.variable(name,shape=None,dtype=None,initializer=None,regularizer=None,trainable=True,collections=None,caching_device=None,device=None,partitioner=None,custom_getter=None,use_resource=None,synchronization=tf.VariableSynchronization.AUTO,aggregation=tf.VariableAggregation.NONE)", "tf.contrib.framework.with_same_shape": "tf.contrib.framework.with_same_shape(expected_tensor,tensor)", "tf.contrib.framework.with_shape": "tf.contrib.framework.with_shape(expected_shape,tensor)", "tf.contrib.framework.zero_initializer": "tf.contrib.framework.zero_initializer(ref,use_locking=True,name='zero_initializer')", "tf.contrib.gan.acgan_model": "tf.contrib.gan.acgan_model(generator_fn,discriminator_fn,real_data,generator_inputs,one_hot_labels,generator_scope='Generator',discriminator_scope='Discriminator',check_shapes=True)", "tf.contrib.gan.cyclegan_loss": "tf.contrib.gan.cyclegan_loss(model,generator_loss_fn=tf.contrib.gan.losses.least_squares_generator_loss,discriminator_loss_fn=tf.contrib.gan.losses.least_squares_discriminator_loss,cycle_consistency_loss_fn=tf.contrib.gan.losses.cycle_consistency_loss,cycle_consistency_loss_weight=10.0,**kwargs)", "tf.contrib.gan.cyclegan_model": "tf.contrib.gan.cyclegan_model(generator_fn,discriminator_fn,data_x,data_y,generator_scope='Generator',discriminator_scope='Discriminator',model_x2y_scope='ModelX2Y',model_y2x_scope='ModelY2X',check_shapes=True)", "tf.contrib.gan.estimator.gan_head": "tf.contrib.gan.estimator.gan_head(generator_loss_fn,discriminator_loss_fn,generator_optimizer,discriminator_optimizer,use_loss_summaries=True,get_hooks_fn=tfgan_train.get_sequential_train_hooks(),get_eval_metric_ops_fn=None,name=None)", "tf.contrib.gan.eval.add_cyclegan_image_summaries": "tf.contrib.gan.eval.add_cyclegan_image_summaries(cyclegan_model)", "tf.contrib.gan.eval.add_gan_model_image_summaries": "tf.contrib.gan.eval.add_gan_model_image_summaries(gan_model,grid_size=4,model_summaries=True)", "tf.contrib.gan.eval.add_gan_model_summaries": "tf.contrib.gan.eval.add_gan_model_summaries(gan_model)", "tf.contrib.gan.eval.add_image_comparison_summaries": "tf.contrib.gan.eval.add_image_comparison_summaries(gan_model,num_comparisons=2,display_diffs=False)", "tf.contrib.gan.eval.add_regularization_loss_summaries": "tf.contrib.gan.eval.add_regularization_loss_summaries(gan_model)", "tf.contrib.gan.eval.add_stargan_image_summaries": "tf.contrib.gan.eval.add_stargan_image_summaries(stargan_model,num_images=2,display_diffs=False)", "tf.contrib.gan.eval.classifier_score": "tf.contrib.gan.eval.classifier_score(images,classifier_fn,num_batches=1)", "tf.contrib.gan.eval.classifier_score_from_logits": "tf.contrib.gan.eval.classifier_score_from_logits(logits)", "tf.contrib.gan.eval.diagonal_only_frechet_classifier_distance_from_activations": "tf.contrib.gan.eval.diagonal_only_frechet_classifier_distance_from_activations(real_activations,generated_activations)", "tf.contrib.gan.eval.frechet_classifier_distance": "tf.contrib.gan.eval.frechet_classifier_distance(real_images,generated_images,classifier_fn,num_batches=1)", "tf.contrib.gan.eval.frechet_classifier_distance_from_activations": "tf.contrib.gan.eval.frechet_classifier_distance_from_activations(real_activations,generated_activations)", "tf.contrib.gan.eval.get_graph_def_from_disk": "tf.contrib.gan.eval.get_graph_def_from_disk(filename)", "tf.contrib.gan.eval.get_graph_def_from_resource": "tf.contrib.gan.eval.get_graph_def_from_resource(filename)", "tf.contrib.gan.eval.get_graph_def_from_url_tarball": "tf.contrib.gan.eval.get_graph_def_from_url_tarball(url,filename,tar_filename=None)", "tf.contrib.gan.eval.kernel_classifier_distance": "tf.contrib.gan.eval.kernel_classifier_distance(real_images,generated_images,classifier_fn,num_classifier_batches=1,max_block_size=1024,dtype=None)", "tf.contrib.gan.eval.kernel_classifier_distance_and_std": "tf.contrib.gan.eval.kernel_classifier_distance_and_std(real_images,generated_images,classifier_fn,num_classifier_batches=1,max_block_size=1024,dtype=None)", "tf.contrib.gan.eval.kernel_classifier_distance_and_std_from_activations": "tf.contrib.gan.eval.kernel_classifier_distance_and_std_from_activations(real_activations,generated_activations,max_block_size=1024,dtype=None)", "tf.contrib.gan.eval.kernel_classifier_distance_from_activations": "tf.contrib.gan.eval.kernel_classifier_distance_from_activations(real_activations,generated_activations,max_block_size=1024,dtype=None)", "tf.contrib.gan.eval.mean_only_frechet_classifier_distance_from_activations": "tf.contrib.gan.eval.mean_only_frechet_classifier_distance_from_activations(real_activations,generated_activations)", "tf.contrib.gan.eval.preprocess_image": "tf.contrib.gan.eval.preprocess_image(images,height=INCEPTION_DEFAULT_IMAGE_SIZE,width=INCEPTION_DEFAULT_IMAGE_SIZE,scope=None)", "tf.contrib.gan.eval.run_image_classifier": "tf.contrib.gan.eval.run_image_classifier(tensor,graph_def,input_tensor,output_tensor,scope='RunClassifier')", "tf.contrib.gan.eval.run_inception": "tf.contrib.gan.eval.run_inception(images,graph_def=None,default_graph_def_fn=_default_graph_def_fn,image_size=INCEPTION_DEFAULT_IMAGE_SIZE,input_tensor=INCEPTION_INPUT,output_tensor=INCEPTION_OUTPUT)", "tf.contrib.gan.eval.image_grid": "tf.contrib.gan.eval.image_grid(input_tensor,grid_shape,image_shape=(32,32),num_channels=3)", "tf.contrib.gan.eval.image_reshaper": "tf.contrib.gan.eval.image_reshaper(images,num_cols=None)", "tf.contrib.gan.eval.sliced_wasserstein_distance": "tf.contrib.gan.eval.sliced_wasserstein_distance(real_images,fake_images,resolution_min=16,patches_per_image=64,patch_size=7,random_sampling_count=1,random_projection_dim=(7*7*3),use_svd=False)", "tf.contrib.gan.features.clip_discriminator_weights": "tf.contrib.gan.features.clip_discriminator_weights(optimizer,model,weight_clip)", "tf.contrib.gan.features.clip_variables": "tf.contrib.gan.features.clip_variables(optimizer,variables,weight_clip)", "tf.contrib.gan.features.condition_tensor": "tf.contrib.gan.features.condition_tensor(tensor,conditioning)", "tf.contrib.gan.features.condition_tensor_from_onehot": "tf.contrib.gan.features.condition_tensor_from_onehot(tensor,one_hot_labels,embedding_size=256)", "tf.contrib.gan.features.tensor_pool": "tf.contrib.gan.features.tensor_pool(input_values,pool_size=50,pooling_probability=0.5,name='tensor_pool')", "tf.contrib.gan.gan_loss": "tf.contrib.gan.gan_loss(model,generator_loss_fn=tf.contrib.gan.losses.wasserstein_generator_loss,discriminator_loss_fn=tf.contrib.gan.losses.wasserstein_discriminator_loss,gradient_penalty_weight=None,gradient_penalty_epsilon=1e-10,gradient_penalty_target=1.0,gradient_penalty_one_sided=False,mutual_information_penalty_weight=None,aux_cond_generator_weight=None,aux_cond_discriminator_weight=None,tensor_pool_fn=None,add_summaries=True)", "tf.contrib.gan.gan_model": "tf.contrib.gan.gan_model(generator_fn,discriminator_fn,real_data,generator_inputs,generator_scope='Generator',discriminator_scope='Discriminator',check_shapes=True)", "tf.contrib.gan.gan_train": "tf.contrib.gan.gan_train(train_ops,logdir,get_hooks_fn=get_sequential_train_hooks(),master='',is_chief=True,scaffold=None,hooks=None,chief_only_hooks=None,save_checkpoint_secs=600,save_summaries_steps=100,config=None)", "tf.contrib.gan.gan_train_ops": "tf.contrib.gan.gan_train_ops(model,loss,generator_optimizer,discriminator_optimizer,check_for_unused_update_ops=True,is_chief=True,**kwargs)", "tf.contrib.gan.get_joint_train_hooks": "tf.contrib.gan.get_joint_train_hooks(train_steps=namedtuples.GANTrainSteps(1,1))", "tf.contrib.gan.get_sequential_train_hooks": "tf.contrib.gan.get_sequential_train_hooks(train_steps=namedtuples.GANTrainSteps(1,1))", "tf.contrib.gan.get_sequential_train_steps": "tf.contrib.gan.get_sequential_train_steps(train_steps=namedtuples.GANTrainSteps(1,1))", "tf.contrib.gan.infogan_model": "tf.contrib.gan.infogan_model(generator_fn,discriminator_fn,real_data,unstructured_generator_inputs,structured_generator_inputs,generator_scope='Generator',discriminator_scope='Discriminator')", "tf.contrib.gan.losses.acgan_discriminator_loss": "tf.contrib.gan.losses.acgan_discriminator_loss(gan_model,**kwargs)", "tf.contrib.gan.losses.acgan_generator_loss": "tf.contrib.gan.losses.acgan_generator_loss(gan_model,**kwargs)", "tf.contrib.gan.losses.combine_adversarial_loss": "tf.contrib.gan.losses.combine_adversarial_loss(gan_loss,gan_model,non_adversarial_loss,weight_factor=None,gradient_ratio=None,gradient_ratio_epsilon=1e-06,scalar_summaries=True,gradient_summaries=True)", "tf.contrib.gan.losses.cycle_consistency_loss": "tf.contrib.gan.losses.cycle_consistency_loss(cyclegan_model,scope=None,add_summaries=False)", "tf.contrib.gan.losses.least_squares_discriminator_loss": "tf.contrib.gan.losses.least_squares_discriminator_loss(gan_model,**kwargs)", "tf.contrib.gan.losses.least_squares_generator_loss": "tf.contrib.gan.losses.least_squares_generator_loss(gan_model,**kwargs)", "tf.contrib.gan.losses.minimax_discriminator_loss": "tf.contrib.gan.losses.minimax_discriminator_loss(gan_model,**kwargs)", "tf.contrib.gan.losses.minimax_generator_loss": "tf.contrib.gan.losses.minimax_generator_loss(gan_model,**kwargs)", "tf.contrib.gan.losses.modified_discriminator_loss": "tf.contrib.gan.losses.modified_discriminator_loss(gan_model,**kwargs)", "tf.contrib.gan.losses.modified_generator_loss": "tf.contrib.gan.losses.modified_generator_loss(gan_model,**kwargs)", "tf.contrib.gan.losses.mutual_information_penalty": "tf.contrib.gan.losses.mutual_information_penalty(gan_model,**kwargs)", "tf.contrib.gan.losses.stargan_discriminator_loss_wrapper": "tf.contrib.gan.losses.stargan_discriminator_loss_wrapper(loss_fn)", "tf.contrib.gan.losses.stargan_generator_loss_wrapper": "tf.contrib.gan.losses.stargan_generator_loss_wrapper(loss_fn)", "tf.contrib.gan.losses.stargan_gradient_penalty_wrapper": "tf.contrib.gan.losses.stargan_gradient_penalty_wrapper(loss_fn)", "tf.contrib.gan.losses.wargs.acgan_discriminator_loss": "tf.contrib.gan.losses.wargs.acgan_discriminator_loss(discriminator_real_classification_logits,discriminator_gen_classification_logits,one_hot_labels,label_smoothing=0.0,real_weights=1.0,generated_weights=1.0,scope=None,loss_collection=tf.GraphKeys.LOSSES,reduction=losses.Reduction.SUM_BY_NONZERO_WEIGHTS,add_summaries=False)", "tf.contrib.gan.losses.wargs.acgan_generator_loss": "tf.contrib.gan.losses.wargs.acgan_generator_loss(discriminator_gen_classification_logits,one_hot_labels,weights=1.0,scope=None,loss_collection=tf.GraphKeys.LOSSES,reduction=losses.Reduction.SUM_BY_NONZERO_WEIGHTS,add_summaries=False)", "tf.contrib.gan.losses.wargs.combine_adversarial_loss": "tf.contrib.gan.losses.wargs.combine_adversarial_loss(main_loss,adversarial_loss,weight_factor=None,gradient_ratio=None,gradient_ratio_epsilon=1e-06,variables=None,scalar_summaries=True,gradient_summaries=True,scope=None)", "tf.contrib.gan.losses.wargs.cycle_consistency_loss": "tf.contrib.gan.losses.wargs.cycle_consistency_loss(data_x,reconstructed_data_x,data_y,reconstructed_data_y,scope=None,add_summaries=False)", "tf.contrib.gan.losses.wargs.least_squares_discriminator_loss": "tf.contrib.gan.losses.wargs.least_squares_discriminator_loss(discriminator_real_outputs,discriminator_gen_outputs,real_label=1,fake_label=0,real_weights=1.0,generated_weights=1.0,scope=None,loss_collection=tf.GraphKeys.LOSSES,reduction=losses.Reduction.SUM_BY_NONZERO_WEIGHTS,add_summaries=False)", "tf.contrib.gan.losses.wargs.least_squares_generator_loss": "tf.contrib.gan.losses.wargs.least_squares_generator_loss(discriminator_gen_outputs,real_label=1,weights=1.0,scope=None,loss_collection=tf.GraphKeys.LOSSES,reduction=losses.Reduction.SUM_BY_NONZERO_WEIGHTS,add_summaries=False)", "tf.contrib.gan.losses.wargs.minimax_discriminator_loss": "tf.contrib.gan.losses.wargs.minimax_discriminator_loss(discriminator_real_outputs,discriminator_gen_outputs,label_smoothing=0.25,real_weights=1.0,generated_weights=1.0,scope=None,loss_collection=tf.GraphKeys.LOSSES,reduction=losses.Reduction.SUM_BY_NONZERO_WEIGHTS,add_summaries=False)", "tf.contrib.gan.losses.wargs.minimax_generator_loss": "tf.contrib.gan.losses.wargs.minimax_generator_loss(discriminator_gen_outputs,label_smoothing=0.0,weights=1.0,scope=None,loss_collection=tf.GraphKeys.LOSSES,reduction=losses.Reduction.SUM_BY_NONZERO_WEIGHTS,add_summaries=False)", "tf.contrib.gan.losses.wargs.modified_discriminator_loss": "tf.contrib.gan.losses.wargs.modified_discriminator_loss(discriminator_real_outputs,discriminator_gen_outputs,label_smoothing=0.25,real_weights=1.0,generated_weights=1.0,scope=None,loss_collection=tf.GraphKeys.LOSSES,reduction=losses.Reduction.SUM_BY_NONZERO_WEIGHTS,add_summaries=False)", "tf.contrib.gan.losses.wargs.modified_generator_loss": "tf.contrib.gan.losses.wargs.modified_generator_loss(discriminator_gen_outputs,label_smoothing=0.0,weights=1.0,scope=None,loss_collection=tf.GraphKeys.LOSSES,reduction=losses.Reduction.SUM_BY_NONZERO_WEIGHTS,add_summaries=False)", "tf.contrib.gan.losses.wargs.mutual_information_penalty": "tf.contrib.gan.losses.wargs.mutual_information_penalty(structured_generator_inputs,predicted_distributions,weights=1.0,scope=None,loss_collection=tf.GraphKeys.LOSSES,reduction=losses.Reduction.SUM_BY_NONZERO_WEIGHTS,add_summaries=False)", "tf.contrib.gan.losses.wargs.wasserstein_discriminator_loss": "tf.contrib.gan.losses.wargs.wasserstein_discriminator_loss(discriminator_real_outputs,discriminator_gen_outputs,real_weights=1.0,generated_weights=1.0,scope=None,loss_collection=tf.GraphKeys.LOSSES,reduction=losses.Reduction.SUM_BY_NONZERO_WEIGHTS,add_summaries=False)", "tf.contrib.gan.losses.wargs.wasserstein_generator_loss": "tf.contrib.gan.losses.wargs.wasserstein_generator_loss(discriminator_gen_outputs,weights=1.0,scope=None,loss_collection=tf.GraphKeys.LOSSES,reduction=losses.Reduction.SUM_BY_NONZERO_WEIGHTS,add_summaries=False)", "tf.contrib.gan.losses.wargs.wasserstein_gradient_penalty": "tf.contrib.gan.losses.wargs.wasserstein_gradient_penalty(real_data,generated_data,generator_inputs,discriminator_fn,discriminator_scope,epsilon=1e-10,target=1.0,one_sided=False,weights=1.0,scope=None,loss_collection=tf.GraphKeys.LOSSES,reduction=losses.Reduction.SUM_BY_NONZERO_WEIGHTS,add_summaries=False)", "tf.contrib.gan.losses.wasserstein_discriminator_loss": "tf.contrib.gan.losses.wasserstein_discriminator_loss(gan_model,**kwargs)", "tf.contrib.gan.losses.wasserstein_generator_loss": "tf.contrib.gan.losses.wasserstein_generator_loss(gan_model,**kwargs)", "tf.contrib.gan.losses.wasserstein_gradient_penalty": "tf.contrib.gan.losses.wasserstein_gradient_penalty(gan_model,**kwargs)", "tf.contrib.gan.stargan_loss": "tf.contrib.gan.stargan_loss(model,generator_loss_fn=tfgan_losses.stargan_generator_loss_wrapper(tfgan_losses_impl.\\nwasserstein_generator_loss),discriminator_loss_fn=tfgan_losses.stargan_discriminator_loss_wrapper(tfgan_losses_impl.\\nwasserstein_discriminator_loss),gradient_penalty_weight=10.0,gradient_penalty_epsilon=1e-10,gradient_penalty_target=1.0,gradient_penalty_one_sided=False,reconstruction_loss_fn=tf.losses.absolute_difference,reconstruction_loss_weight=10.0,classification_loss_fn=tf.losses.softmax_cross_entropy,classification_loss_weight=1.0,classification_one_hot=True,add_summaries=True)", "tf.contrib.gan.stargan_model": "tf.contrib.gan.stargan_model(generator_fn,discriminator_fn,input_data,input_data_domain_label,generator_scope='Generator',discriminator_scope='Discriminator')", "tf.contrib.graph_editor.add_control_inputs": "tf.contrib.graph_editor.add_control_inputs(op,cops)", "tf.contrib.graph_editor.assign_renamed_collections_handler": "tf.contrib.graph_editor.assign_renamed_collections_handler(info,elem,elem_)", "tf.contrib.graph_editor.bypass": "tf.contrib.graph_editor.bypass(sgv)", "tf.contrib.graph_editor.can_be_regex": "tf.contrib.graph_editor.can_be_regex(obj)", "tf.contrib.graph_editor.check_cios": "tf.contrib.graph_editor.check_cios(control_inputs=False,control_outputs=None,control_ios=None)", "tf.contrib.graph_editor.compute_boundary_ts": "tf.contrib.graph_editor.compute_boundary_ts(ops)", "tf.contrib.graph_editor.connect": "tf.contrib.graph_editor.connect(sgv0,sgv1,disconnect_first=False)", "tf.contrib.graph_editor.copy": "tf.contrib.graph_editor.copy(sgv,dst_graph=None,dst_scope='',src_scope='',reuse_dst_scope=False)", "tf.contrib.graph_editor.copy_op_handler": "tf.contrib.graph_editor.copy_op_handler(info,op,new_inputs,copy_shape=False,nodedef_fn=None)", "tf.contrib.graph_editor.copy_with_input_replacements": "tf.contrib.graph_editor.copy_with_input_replacements(sgv,replacement_ts,dst_graph=None,dst_scope='',src_scope='',reuse_dst_scope=False)", "tf.contrib.graph_editor.detach": "tf.contrib.graph_editor.detach(sgv,control_inputs=False,control_outputs=None,control_ios=None)", "tf.contrib.graph_editor.detach_control_inputs": "tf.contrib.graph_editor.detach_control_inputs(sgv)", "tf.contrib.graph_editor.detach_control_outputs": "tf.contrib.graph_editor.detach_control_outputs(sgv,control_outputs)", "tf.contrib.graph_editor.detach_inputs": "tf.contrib.graph_editor.detach_inputs(sgv,control_inputs=False)", "tf.contrib.graph_editor.detach_outputs": "tf.contrib.graph_editor.detach_outputs(sgv,control_outputs=None)", "tf.contrib.graph_editor.filter_ops": "tf.contrib.graph_editor.filter_ops(ops,positive_filter)", "tf.contrib.graph_editor.filter_ops_from_regex": "tf.contrib.graph_editor.filter_ops_from_regex(ops,regex)", "tf.contrib.graph_editor.filter_ts": "tf.contrib.graph_editor.filter_ts(ops,positive_filter)", "tf.contrib.graph_editor.filter_ts_from_regex": "tf.contrib.graph_editor.filter_ts_from_regex(ops,regex)", "tf.contrib.graph_editor.get_backward_walk_ops": "tf.contrib.graph_editor.get_backward_walk_ops(seed_ops,inclusive=True,within_ops=None,within_ops_fn=None,stop_at_ts=(),control_inputs=False)", "tf.contrib.graph_editor.get_consuming_ops": "tf.contrib.graph_editor.get_consuming_ops(ts)", "tf.contrib.graph_editor.get_forward_walk_ops": "tf.contrib.graph_editor.get_forward_walk_ops(seed_ops,inclusive=True,within_ops=None,within_ops_fn=None,stop_at_ts=(),control_outputs=None)", "tf.contrib.graph_editor.get_generating_ops": "tf.contrib.graph_editor.get_generating_ops(ts)", "tf.contrib.graph_editor.get_name_scope_ops": "tf.contrib.graph_editor.get_name_scope_ops(ops,scope)", "tf.contrib.graph_editor.get_ops_ios": "tf.contrib.graph_editor.get_ops_ios(ops,control_inputs=False,control_outputs=None,control_ios=None)", "tf.contrib.graph_editor.get_tensors": "tf.contrib.graph_editor.get_tensors(graph)", "tf.contrib.graph_editor.get_walks_intersection_ops": "tf.contrib.graph_editor.get_walks_intersection_ops(forward_seed_ops,backward_seed_ops,forward_inclusive=True,backward_inclusive=True,within_ops=None,within_ops_fn=None,control_inputs=False,control_outputs=None,control_ios=None)", "tf.contrib.graph_editor.get_walks_union_ops": "tf.contrib.graph_editor.get_walks_union_ops(forward_seed_ops,backward_seed_ops,forward_inclusive=True,backward_inclusive=True,within_ops=None,within_ops_fn=None,control_inputs=False,control_outputs=None,control_ios=None)", "tf.contrib.graph_editor.get_within_boundary_ops": "tf.contrib.graph_editor.get_within_boundary_ops(ops,seed_ops,boundary_ops=(),inclusive=True,control_inputs=False,control_outputs=None,control_ios=None)", "tf.contrib.graph_editor.graph_replace": "tf.contrib.graph_editor.graph_replace(target_ts,replacement_ts,dst_scope='',src_scope='',reuse_dst_scope=False)", "tf.contrib.graph_editor.keep_t_if_possible_handler": "tf.contrib.graph_editor.keep_t_if_possible_handler(info,t)", "tf.contrib.graph_editor.make_list_of_op": "tf.contrib.graph_editor.make_list_of_op(ops,check_graph=True,allow_graph=True,ignore_ts=False)", "tf.contrib.graph_editor.make_list_of_t": "tf.contrib.graph_editor.make_list_of_t(ts,check_graph=True,allow_graph=True,ignore_ops=False)", "tf.contrib.graph_editor.make_placeholder_from_dtype_and_shape": "tf.contrib.graph_editor.make_placeholder_from_dtype_and_shape(dtype,shape=None,scope=None,prefix=_DEFAULT_PLACEHOLDER_PREFIX)", "tf.contrib.graph_editor.make_placeholder_from_tensor": "tf.contrib.graph_editor.make_placeholder_from_tensor(t,scope=None,prefix=_DEFAULT_PLACEHOLDER_PREFIX)", "tf.contrib.graph_editor.make_regex": "tf.contrib.graph_editor.make_regex(obj)", "tf.contrib.graph_editor.make_view": "tf.contrib.graph_editor.make_view(*args,**kwargs)", "tf.contrib.graph_editor.make_view_from_scope": "tf.contrib.graph_editor.make_view_from_scope(scope,graph)", "tf.contrib.graph_editor.placeholder_name": "tf.contrib.graph_editor.placeholder_name(t=None,scope=None,prefix=_DEFAULT_PLACEHOLDER_PREFIX)", "tf.contrib.graph_editor.remove_control_inputs": "tf.contrib.graph_editor.remove_control_inputs(op,cops)", "tf.contrib.graph_editor.replace_t_with_placeholder_handler": "tf.contrib.graph_editor.replace_t_with_placeholder_handler(info,t)", "tf.contrib.graph_editor.reroute_inputs": "tf.contrib.graph_editor.reroute_inputs(sgv0,sgv1)", "tf.contrib.graph_editor.reroute_ios": "tf.contrib.graph_editor.reroute_ios(sgv0,sgv1)", "tf.contrib.graph_editor.reroute_outputs": "tf.contrib.graph_editor.reroute_outputs(sgv0,sgv1)", "tf.contrib.graph_editor.reroute_ts": "tf.contrib.graph_editor.reroute_ts(ts0,ts1,can_modify=None,cannot_modify=None)", "tf.contrib.graph_editor.select_ops": "tf.contrib.graph_editor.select_ops(*args,**kwargs)", "tf.contrib.graph_editor.select_ops_and_ts": "tf.contrib.graph_editor.select_ops_and_ts(*args,**kwargs)", "tf.contrib.graph_editor.select_ts": "tf.contrib.graph_editor.select_ts(*args,**kwargs)", "tf.contrib.graph_editor.swap_inputs": "tf.contrib.graph_editor.swap_inputs(sgv0,sgv1)", "tf.contrib.graph_editor.swap_ios": "tf.contrib.graph_editor.swap_ios(sgv0,sgv1)", "tf.contrib.graph_editor.swap_outputs": "tf.contrib.graph_editor.swap_outputs(sgv0,sgv1)", "tf.contrib.graph_editor.swap_ts": "tf.contrib.graph_editor.swap_ts(ts0,ts1,can_modify=None,cannot_modify=None)", "tf.contrib.graph_editor.transform_op_if_inside_handler": "tf.contrib.graph_editor.transform_op_if_inside_handler(info,op,keep_if_possible=True)", "tf.contrib.image.angles_to_projective_transforms": "tf.contrib.image.angles_to_projective_transforms(angles,image_height,image_width,name=None)", "tf.contrib.image.bipartite_match": "tf.contrib.image.bipartite_match(distance_mat,num_valid_rows,top_k=-1,name='bipartite_match')", "tf.contrib.image.compose_transforms": "tf.contrib.image.compose_transforms(*transforms)", "tf.contrib.image.connected_components": "tf.contrib.image.connected_components(images)", "tf.contrib.image.dense_image_warp": "tf.contrib.image.dense_image_warp(image,flow,name='dense_image_warp')", "tf.contrib.image.flat_transforms_to_matrices": "tf.contrib.image.flat_transforms_to_matrices(transforms)", "tf.contrib.image.interpolate_spline": "tf.contrib.image.interpolate_spline(train_points,train_values,query_points,order,regularization_weight=0.0,name='interpolate_spline')", "tf.contrib.image.matrices_to_flat_transforms": "tf.contrib.image.matrices_to_flat_transforms(transform_matrices)", "tf.contrib.image.rotate": "tf.contrib.image.rotate(images,angles,interpolation='NEAREST',name=None)", "tf.contrib.image.single_image_random_dot_stereograms": "tf.contrib.image.single_image_random_dot_stereograms(depth_values,hidden_surface_removal=None,convergence_dots_size=None,dots_per_inch=None,eye_separation=None,mu=None,normalize=None,normalize_max=None,normalize_min=None,border_level=None,number_colors=None,output_image_shape=None,output_data_window=None)", "tf.contrib.image.sparse_image_warp": "tf.contrib.image.sparse_image_warp(image,source_control_point_locations,dest_control_point_locations,interpolation_order=2,regularization_weight=0.0,num_boundary_points=0,name='sparse_image_warp')", "tf.contrib.image.transform": "tf.contrib.image.transform(images,transforms,interpolation='NEAREST',output_shape=None,name=None)", "tf.contrib.image.translate": "tf.contrib.image.translate(images,translations,interpolation='NEAREST',name=None)", "tf.contrib.image.translations_to_projective_transforms": "tf.contrib.image.translations_to_projective_transforms(translations,name=None)", "tf.contrib.input_pipeline.obtain_next": "tf.contrib.input_pipeline.obtain_next(string_list_tensor,counter)", "tf.contrib.integrate.odeint": "tf.contrib.integrate.odeint(func,y0,t,rtol=1e-06,atol=1e-12,method=None,options=None,full_output=False,name=None)", "tf.contrib.integrate.odeint_fixed": "tf.contrib.integrate.odeint_fixed(func,y0,t,dt=None,method='rk4',name=None)", "tf.contrib.kernel_methods.sparse_multiclass_hinge_loss": "tf.contrib.kernel_methods.sparse_multiclass_hinge_loss(labels,logits,weights=1.0,scope=None,loss_collection=tf.GraphKeys.LOSSES,reduction=losses.Reduction.SUM_BY_NONZERO_WEIGHTS)", "tf.contrib.layers.apply_regularization": "tf.contrib.layers.apply_regularization(regularizer,weights_list=None)", "tf.contrib.layers.avg_pool2d": "tf.contrib.layers.avg_pool2d(inputs,kernel_size,stride=2,padding='VALID',data_format=DATA_FORMAT_NHWC,outputs_collections=None,scope=None)", "tf.contrib.layers.avg_pool3d": "tf.contrib.layers.avg_pool3d(inputs,kernel_size,stride=2,padding='VALID',data_format=DATA_FORMAT_NDHWC,outputs_collections=None,scope=None)", "tf.contrib.layers.batch_norm": "tf.contrib.layers.batch_norm(inputs,decay=0.999,center=True,scale=False,epsilon=0.001,activation_fn=None,param_initializers=None,param_regularizers=None,updates_collections=tf.GraphKeys.UPDATE_OPS,is_training=True,reuse=None,variables_collections=None,outputs_collections=None,trainable=True,batch_weights=None,fused=None,data_format=DATA_FORMAT_NHWC,zero_debias_moving_mean=False,scope=None,renorm=False,renorm_clipping=None,renorm_decay=0.99,adjustment=None)", "tf.contrib.layers.bias_add": "tf.contrib.layers.bias_add(inputs,activation_fn=None,initializer=tf.zeros_initializer(),regularizer=None,reuse=None,variables_collections=None,outputs_collections=None,trainable=True,data_format=DATA_FORMAT_NHWC,scope=None)", "tf.contrib.layers.bow_encoder": "tf.contrib.layers.bow_encoder(ids,vocab_size,embed_dim,sparse_lookup=True,initializer=None,regularizer=None,trainable=True,scope=None,reuse=None)", "tf.contrib.layers.bucketized_column": "tf.contrib.layers.bucketized_column(source_column,boundaries)", "tf.contrib.layers.check_feature_columns": "tf.contrib.layers.check_feature_columns(feature_columns)", "tf.contrib.layers.conv1d": "tf.contrib.layers.conv1d(inputs,num_outputs,kernel_size,stride=1,padding='SAME',data_format=None,rate=1,activation_fn=tf.nn.relu,normalizer_fn=None,normalizer_params=None,weights_initializer=initializers.xavier_initializer(),weights_regularizer=None,biases_initializer=tf.zeros_initializer(),biases_regularizer=None,reuse=None,variables_collections=None,outputs_collections=None,trainable=True,scope=None)", "tf.contrib.layers.conv2d": "tf.contrib.layers.conv2d(inputs,num_outputs,kernel_size,stride=1,padding='SAME',data_format=None,rate=1,activation_fn=tf.nn.relu,normalizer_fn=None,normalizer_params=None,weights_initializer=initializers.xavier_initializer(),weights_regularizer=None,biases_initializer=tf.zeros_initializer(),biases_regularizer=None,reuse=None,variables_collections=None,outputs_collections=None,trainable=True,scope=None)", "tf.contrib.layers.conv2d_in_plane": "tf.contrib.layers.conv2d_in_plane(inputs,kernel_size,stride=1,padding='SAME',activation_fn=tf.nn.relu,normalizer_fn=None,normalizer_params=None,weights_initializer=initializers.xavier_initializer(),weights_regularizer=None,biases_initializer=tf.zeros_initializer(),biases_regularizer=None,reuse=None,variables_collections=None,outputs_collections=None,trainable=True,scope=None)", "tf.contrib.layers.conv2d_transpose": "tf.contrib.layers.conv2d_transpose(inputs,num_outputs,kernel_size,stride=1,padding='SAME',data_format=DATA_FORMAT_NHWC,activation_fn=tf.nn.relu,normalizer_fn=None,normalizer_params=None,weights_initializer=initializers.xavier_initializer(),weights_regularizer=None,biases_initializer=tf.zeros_initializer(),biases_regularizer=None,reuse=None,variables_collections=None,outputs_collections=None,trainable=True,scope=None)", "tf.contrib.layers.conv3d": "tf.contrib.layers.conv3d(inputs,num_outputs,kernel_size,stride=1,padding='SAME',data_format=None,rate=1,activation_fn=tf.nn.relu,normalizer_fn=None,normalizer_params=None,weights_initializer=initializers.xavier_initializer(),weights_regularizer=None,biases_initializer=tf.zeros_initializer(),biases_regularizer=None,reuse=None,variables_collections=None,outputs_collections=None,trainable=True,scope=None)", "tf.contrib.layers.conv3d_transpose": "tf.contrib.layers.conv3d_transpose(inputs,num_outputs,kernel_size,stride=1,padding='SAME',data_format=DATA_FORMAT_NDHWC,activation_fn=tf.nn.relu,normalizer_fn=None,normalizer_params=None,weights_initializer=initializers.xavier_initializer(),weights_regularizer=None,biases_initializer=tf.zeros_initializer(),biases_regularizer=None,reuse=None,variables_collections=None,outputs_collections=None,trainable=True,scope=None)", "tf.contrib.layers.convolution": "tf.contrib.layers.convolution(inputs,num_outputs,kernel_size,stride=1,padding='SAME',data_format=None,rate=1,activation_fn=tf.nn.relu,normalizer_fn=None,normalizer_params=None,weights_initializer=initializers.xavier_initializer(),weights_regularizer=None,biases_initializer=tf.zeros_initializer(),biases_regularizer=None,reuse=None,variables_collections=None,outputs_collections=None,trainable=True,scope=None,conv_dims=None)", "tf.contrib.layers.create_feature_spec_for_parsing": "tf.contrib.layers.create_feature_spec_for_parsing(feature_columns)", "tf.contrib.layers.crossed_column": "tf.contrib.layers.crossed_column(columns,hash_bucket_size,combiner='sum',ckpt_to_load_from=None,tensor_name_in_ckpt=None,hash_key=None)", "tf.contrib.layers.dense_to_sparse": "tf.contrib.layers.dense_to_sparse(tensor,eos_token=0,outputs_collections=None,scope=None)", "tf.contrib.layers.dropout": "tf.contrib.layers.dropout(inputs,keep_prob=0.5,noise_shape=None,is_training=True,outputs_collections=None,scope=None,seed=None)", "tf.contrib.layers.embed_sequence": "tf.contrib.layers.embed_sequence(ids,vocab_size=None,embed_dim=None,unique=False,initializer=None,regularizer=None,trainable=True,scope=None,reuse=None)", "tf.contrib.layers.embedding_column": "tf.contrib.layers.embedding_column(sparse_id_column,dimension,combiner='mean',initializer=None,ckpt_to_load_from=None,tensor_name_in_ckpt=None,max_norm=None,trainable=True)", "tf.contrib.layers.embedding_lookup_unique": "tf.contrib.layers.embedding_lookup_unique(params,ids,partition_strategy='mod',name=None)", "tf.contrib.layers.flatten": "tf.contrib.layers.flatten(inputs,outputs_collections=None,scope=None)", "tf.contrib.layers.fully_connected": "tf.contrib.layers.fully_connected(inputs,num_outputs,activation_fn=tf.nn.relu,normalizer_fn=None,normalizer_params=None,weights_initializer=initializers.xavier_initializer(),weights_regularizer=None,biases_initializer=tf.zeros_initializer(),biases_regularizer=None,reuse=None,variables_collections=None,outputs_collections=None,trainable=True,scope=None)", "tf.contrib.layers.gdn": "tf.contrib.layers.gdn(inputs,inverse=False,beta_min=1e-06,gamma_init=0.1,reparam_offset=(2**-18),data_format='channels_last',activity_regularizer=None,trainable=True,name=None,reuse=None)", "tf.contrib.layers.group_norm": "tf.contrib.layers.group_norm(inputs,groups=32,channels_axis=-1,reduction_axes=(-3,-2),center=True,scale=True,epsilon=1e-06,activation_fn=None,param_initializers=None,reuse=None,variables_collections=None,outputs_collections=None,trainable=True,scope=None,mean_close_to_zero=False)", "tf.contrib.layers.images_to_sequence": "tf.contrib.layers.images_to_sequence(inputs,data_format=DATA_FORMAT_NHWC,outputs_collections=None,scope=None)", "tf.contrib.layers.infer_real_valued_columns": "tf.contrib.layers.infer_real_valued_columns(features)", "tf.contrib.layers.input_from_feature_columns": "tf.contrib.layers.input_from_feature_columns(columns_to_tensors,feature_columns,weight_collections=None,trainable=True,scope=None,cols_to_outs=None)", "tf.contrib.layers.instance_norm": "tf.contrib.layers.instance_norm(inputs,center=True,scale=True,epsilon=1e-06,activation_fn=None,param_initializers=None,reuse=None,variables_collections=None,outputs_collections=None,trainable=True,data_format=DATA_FORMAT_NHWC,scope=None)", "tf.contrib.layers.joint_weighted_sum_from_feature_columns": "tf.contrib.layers.joint_weighted_sum_from_feature_columns(columns_to_tensors,feature_columns,num_outputs,weight_collections=None,trainable=True,scope=None)", "tf.contrib.layers.l1_l2_regularizer": "tf.contrib.layers.l1_l2_regularizer(scale_l1=1.0,scale_l2=1.0,scope=None)", "tf.contrib.layers.l1_regularizer": "tf.contrib.layers.l1_regularizer(scale,scope=None)", "tf.contrib.layers.l2_regularizer": "tf.contrib.layers.l2_regularizer(scale,scope=None)", "tf.contrib.layers.layer_norm": "tf.contrib.layers.layer_norm(inputs,center=True,scale=True,activation_fn=None,reuse=None,variables_collections=None,outputs_collections=None,trainable=True,begin_norm_axis=1,begin_params_axis=-1,scope=None)", "tf.contrib.layers.legacy_fully_connected": "tf.contrib.layers.legacy_fully_connected(x,num_output_units,activation_fn=None,weight_init=initializers.xavier_initializer(),bias_init=tf.zeros_initializer(),name=None,weight_collections=(ops.GraphKeys.WEIGHTS,),bias_collections=(ops.GraphKeys.BIASES,),output_collections=(ops.GraphKeys.ACTIVATIONS,),trainable=True,weight_regularizer=None,bias_regularizer=None)", "tf.contrib.layers.make_place_holder_tensors_for_base_features": "tf.contrib.layers.make_place_holder_tensors_for_base_features(feature_columns)", "tf.contrib.layers.max_pool2d": "tf.contrib.layers.max_pool2d(inputs,kernel_size,stride=2,padding='VALID',data_format=DATA_FORMAT_NHWC,outputs_collections=None,scope=None)", "tf.contrib.layers.max_pool3d": "tf.contrib.layers.max_pool3d(inputs,kernel_size,stride=2,padding='VALID',data_format=DATA_FORMAT_NDHWC,outputs_collections=None,scope=None)", "tf.contrib.layers.maxout": "tf.contrib.layers.maxout(inputs,num_units,axis=-1,scope=None)", "tf.contrib.layers.multi_class_target": "tf.contrib.layers.multi_class_target(n_classes,label_name=None,weight_column_name=None)", "tf.contrib.layers.one_hot_column": "tf.contrib.layers.one_hot_column(sparse_id_column)", "tf.contrib.layers.one_hot_encoding": "tf.contrib.layers.one_hot_encoding(labels,num_classes,on_value=1.0,off_value=0.0,outputs_collections=None,scope=None)", "tf.contrib.layers.optimize_loss": "tf.contrib.layers.optimize_loss(loss,global_step,learning_rate,optimizer,gradient_noise_scale=None,gradient_multipliers=None,clip_gradients=None,learning_rate_decay_fn=None,update_ops=None,variables=None,name=None,summaries=None,colocate_gradients_with_ops=False,increment_global_step=True)", "tf.contrib.layers.parse_feature_columns_from_examples": "tf.contrib.layers.parse_feature_columns_from_examples(serialized,feature_columns,name=None,example_names=None)", "tf.contrib.layers.parse_feature_columns_from_sequence_examples": "tf.contrib.layers.parse_feature_columns_from_sequence_examples(serialized,context_feature_columns,sequence_feature_columns,name=None,example_name=None)", "tf.contrib.layers.real_valued_column": "tf.contrib.layers.real_valued_column(column_name,dimension=1,default_value=None,dtype=tf.dtypes.float32,normalizer=None)", "tf.contrib.layers.recompute_grad": "tf.contrib.layers.recompute_grad(*args,**kwargs)", "tf.contrib.layers.regression_target": "tf.contrib.layers.regression_target(label_name=None,weight_column_name=None,label_dimension=1)", "tf.contrib.layers.repeat": "tf.contrib.layers.repeat(inputs,repetitions,layer,*args,**kwargs)", "tf.contrib.layers.rev_block": "tf.contrib.layers.rev_block(x1,x2,f,g,num_layers=1,f_side_input=None,g_side_input=None,is_training=True)", "tf.contrib.layers.safe_embedding_lookup_sparse": "tf.contrib.layers.safe_embedding_lookup_sparse(embedding_weights,sparse_ids,sparse_weights=None,combiner=None,default_id=None,name=None,partition_strategy='div',max_norm=None)", "tf.contrib.layers.scattered_embedding_column": "tf.contrib.layers.scattered_embedding_column(column_name,size,dimension,hash_key,combiner='mean',initializer=None)", "tf.contrib.layers.separable_conv2d": "tf.contrib.layers.separable_conv2d(inputs,num_outputs,kernel_size,depth_multiplier=1,stride=1,padding='SAME',data_format=DATA_FORMAT_NHWC,rate=1,activation_fn=tf.nn.relu,normalizer_fn=None,normalizer_params=None,weights_initializer=initializers.xavier_initializer(),pointwise_initializer=None,weights_regularizer=None,biases_initializer=tf.zeros_initializer(),biases_regularizer=None,reuse=None,variables_collections=None,outputs_collections=None,trainable=True,scope=None)", "tf.contrib.layers.sequence_input_from_feature_columns": "tf.contrib.layers.sequence_input_from_feature_columns(*args,**kwargs)", "tf.contrib.layers.sequence_to_images": "tf.contrib.layers.sequence_to_images(inputs,height,output_data_format='channels_last',outputs_collections=None,scope=None)", "tf.contrib.layers.shared_embedding_columns": "tf.contrib.layers.shared_embedding_columns(sparse_id_columns,dimension,combiner='mean',shared_embedding_name=None,initializer=None,ckpt_to_load_from=None,tensor_name_in_ckpt=None,max_norm=None,trainable=True)", "tf.contrib.layers.softmax": "tf.contrib.layers.softmax(logits,scope=None)", "tf.contrib.layers.sparse_column_with_hash_bucket": "tf.contrib.layers.sparse_column_with_hash_bucket(column_name,hash_bucket_size,combiner='sum',dtype=tf.dtypes.string,hash_keys=None)", "tf.contrib.layers.sparse_column_with_integerized_feature": "tf.contrib.layers.sparse_column_with_integerized_feature(column_name,bucket_size,combiner='sum',dtype=tf.dtypes.int64)", "tf.contrib.layers.sparse_column_with_keys": "tf.contrib.layers.sparse_column_with_keys(column_name,keys,default_value=-1,combiner='sum',dtype=tf.dtypes.string)", "tf.contrib.layers.sparse_column_with_vocabulary_file": "tf.contrib.layers.sparse_column_with_vocabulary_file(column_name,vocabulary_file,num_oov_buckets=0,vocab_size=None,default_value=-1,combiner='sum',dtype=tf.dtypes.string)", "tf.contrib.layers.spatial_softmax": "tf.contrib.layers.spatial_softmax(features,temperature=None,name=None,variables_collections=None,trainable=True,data_format='NHWC')", "tf.contrib.layers.stack": "tf.contrib.layers.stack(inputs,layer,stack_args,**kwargs)", "tf.contrib.layers.sum_regularizer": "tf.contrib.layers.sum_regularizer(regularizer_list,scope=None)", "tf.contrib.layers.summarize_activation": "tf.contrib.layers.summarize_activation(op)", "tf.contrib.layers.summarize_activations": "tf.contrib.layers.summarize_activations(name_filter=None,summarizer=tf.contrib.layers.summarize_activation)", "tf.contrib.layers.summarize_collection": "tf.contrib.layers.summarize_collection(collection,name_filter=None,summarizer=tf.contrib.layers.summarize_tensor)", "tf.contrib.layers.summarize_tensor": "tf.contrib.layers.summarize_tensor(tensor,tag=None)", "tf.contrib.layers.summarize_tensors": "tf.contrib.layers.summarize_tensors(tensors,summarizer=tf.contrib.layers.summarize_tensor)", "tf.contrib.layers.transform_features": "tf.contrib.layers.transform_features(features,feature_columns)", "tf.contrib.layers.unit_norm": "tf.contrib.layers.unit_norm(inputs,dim,epsilon=1e-07,scope=None)", "tf.contrib.layers.variance_scaling_initializer": "tf.contrib.layers.variance_scaling_initializer(factor=2.0,mode='FAN_IN',uniform=False,seed=None,dtype=tf.dtypes.float32)", "tf.contrib.layers.weighted_sparse_column": "tf.contrib.layers.weighted_sparse_column(sparse_id_column,weight_column_name,dtype=tf.dtypes.float32)", "tf.contrib.layers.weighted_sum_from_feature_columns": "tf.contrib.layers.weighted_sum_from_feature_columns(columns_to_tensors,feature_columns,num_outputs,weight_collections=None,trainable=True,scope=None)", "tf.contrib.layers.xavier_initializer": "tf.contrib.layers.xavier_initializer(uniform=True,seed=None,dtype=tf.dtypes.float32)", "tf.contrib.learn.LogisticRegressor": "tf.contrib.learn.LogisticRegressor(model_fn,thresholds=None,model_dir=None,config=None,feature_engineering_fn=None)", "tf.contrib.learn.binary_svm_head": "tf.contrib.learn.binary_svm_head(label_name=None,weight_column_name=None,enable_centered_bias=False,head_name=None,thresholds=None)", "tf.contrib.learn.build_parsing_serving_input_fn": "tf.contrib.learn.build_parsing_serving_input_fn(feature_spec,default_batch_size=None)", "tf.contrib.learn.evaluate": "tf.contrib.learn.evaluate(graph,output_dir,checkpoint_path,eval_dict,update_op=None,global_step_tensor=None,supervisor_master='',log_every_steps=10,feed_fn=None,max_steps=None)", "tf.contrib.learn.extract_dask_data": "tf.contrib.learn.extract_dask_data(data)", "tf.contrib.learn.extract_dask_labels": "tf.contrib.learn.extract_dask_labels(labels)", "tf.contrib.learn.extract_pandas_data": "tf.contrib.learn.extract_pandas_data(data)", "tf.contrib.learn.extract_pandas_labels": "tf.contrib.learn.extract_pandas_labels(labels)", "tf.contrib.learn.extract_pandas_matrix": "tf.contrib.learn.extract_pandas_matrix(data)", "tf.contrib.learn.infer": "tf.contrib.learn.infer(restore_checkpoint_path,output_dict,feed_dict=None)", "tf.contrib.learn.infer_real_valued_columns_from_input": "tf.contrib.learn.infer_real_valued_columns_from_input(x)", "tf.contrib.learn.infer_real_valued_columns_from_input_fn": "tf.contrib.learn.infer_real_valued_columns_from_input_fn(input_fn)", "tf.contrib.learn.learn_runner.run": "tf.contrib.learn.learn_runner.run(experiment_fn,output_dir=None,schedule=None,run_config=None,hparams=None)", "tf.contrib.learn.learn_runner.tune": "tf.contrib.learn.learn_runner.tune(experiment_fn,tuner)", "tf.contrib.learn.make_export_strategy": "tf.contrib.learn.make_export_strategy(serving_input_fn,default_output_alternative_key=None,assets_extra=None,as_text=False,exports_to_keep=5,strip_default_attrs=None)", "tf.contrib.learn.multi_class_head": "tf.contrib.learn.multi_class_head(n_classes,label_name=None,weight_column_name=None,enable_centered_bias=False,head_name=None,thresholds=None,metric_class_ids=None,loss_fn=None,label_keys=None)", "tf.contrib.learn.multi_head": "tf.contrib.learn.multi_head(heads,loss_weights=None)", "tf.contrib.learn.multi_label_head": "tf.contrib.learn.multi_label_head(n_classes,label_name=None,weight_column_name=None,enable_centered_bias=False,head_name=None,thresholds=None,metric_class_ids=None,loss_fn=None)", "tf.contrib.learn.no_op_train_fn": "tf.contrib.learn.no_op_train_fn(loss)", "tf.contrib.learn.poisson_regression_head": "tf.contrib.learn.poisson_regression_head(label_name=None,weight_column_name=None,label_dimension=1,enable_centered_bias=False,head_name=None)", "tf.contrib.learn.read_batch_examples": "tf.contrib.learn.read_batch_examples(file_pattern,batch_size,reader,randomize_input=True,num_epochs=None,queue_capacity=10000,num_threads=1,read_batch_size=1,parse_fn=None,name=None,seed=None)", "tf.contrib.learn.read_batch_features": "tf.contrib.learn.read_batch_features(file_pattern,batch_size,features,reader,randomize_input=True,num_epochs=None,queue_capacity=10000,feature_queue_capacity=100,reader_num_threads=1,num_enqueue_threads=2,parse_fn=None,name=None,read_batch_size=None)", "tf.contrib.learn.read_batch_record_features": "tf.contrib.learn.read_batch_record_features(file_pattern,batch_size,features,randomize_input=True,num_epochs=None,queue_capacity=10000,reader_num_threads=1,name='dequeue_record_examples')", "tf.contrib.learn.read_keyed_batch_examples": "tf.contrib.learn.read_keyed_batch_examples(file_pattern,batch_size,reader,randomize_input=True,num_epochs=None,queue_capacity=10000,num_threads=1,read_batch_size=1,parse_fn=None,name=None,seed=None)", "tf.contrib.learn.read_keyed_batch_examples_shared_queue": "tf.contrib.learn.read_keyed_batch_examples_shared_queue(file_pattern,batch_size,reader,randomize_input=True,num_epochs=None,queue_capacity=10000,num_threads=1,read_batch_size=1,parse_fn=None,name=None,seed=None)", "tf.contrib.learn.read_keyed_batch_features": "tf.contrib.learn.read_keyed_batch_features(file_pattern,batch_size,features,reader,randomize_input=True,num_epochs=None,queue_capacity=10000,reader_num_threads=1,feature_queue_capacity=100,num_enqueue_threads=2,parse_fn=None,name=None,read_batch_size=None)", "tf.contrib.learn.read_keyed_batch_features_shared_queue": "tf.contrib.learn.read_keyed_batch_features_shared_queue(file_pattern,batch_size,features,reader,randomize_input=True,num_epochs=None,queue_capacity=10000,reader_num_threads=1,feature_queue_capacity=100,num_queue_runners=2,parse_fn=None,name=None)", "tf.contrib.learn.regression_head": "tf.contrib.learn.regression_head(label_name=None,weight_column_name=None,label_dimension=1,enable_centered_bias=False,head_name=None,link_fn=None)", "tf.contrib.learn.run_feeds": "tf.contrib.learn.run_feeds(*args,**kwargs)", "tf.contrib.learn.run_n": "tf.contrib.learn.run_n(output_dict,feed_dict=None,restore_checkpoint_path=None,n=1)", "tf.contrib.learn.train": "tf.contrib.learn.train(graph,output_dir,train_op,loss_op,global_step_tensor=None,init_op=None,init_feed_dict=None,init_fn=None,log_every_steps=10,supervisor_is_chief=True,supervisor_master='',supervisor_save_model_secs=600,keep_checkpoint_max=5,supervisor_save_summaries_steps=100,feed_fn=None,steps=None,fail_on_nan_loss=True,monitors=None,max_steps=None)", "tf.contrib.legacy_seq2seq.attention_decoder": "tf.contrib.legacy_seq2seq.attention_decoder(decoder_inputs,initial_state,attention_states,cell,output_size=None,num_heads=1,loop_function=None,dtype=None,scope=None,initial_state_attention=False)", "tf.contrib.legacy_seq2seq.basic_rnn_seq2seq": "tf.contrib.legacy_seq2seq.basic_rnn_seq2seq(encoder_inputs,decoder_inputs,cell,dtype=tf.dtypes.float32,scope=None)", "tf.contrib.legacy_seq2seq.embedding_attention_decoder": "tf.contrib.legacy_seq2seq.embedding_attention_decoder(decoder_inputs,initial_state,attention_states,cell,num_symbols,embedding_size,num_heads=1,output_size=None,output_projection=None,feed_previous=False,update_embedding_for_previous=True,dtype=None,scope=None,initial_state_attention=False)", "tf.contrib.legacy_seq2seq.embedding_attention_seq2seq": "tf.contrib.legacy_seq2seq.embedding_attention_seq2seq(encoder_inputs,decoder_inputs,cell,num_encoder_symbols,num_decoder_symbols,embedding_size,num_heads=1,output_projection=None,feed_previous=False,dtype=None,scope=None,initial_state_attention=False)", "tf.contrib.legacy_seq2seq.embedding_rnn_decoder": "tf.contrib.legacy_seq2seq.embedding_rnn_decoder(decoder_inputs,initial_state,cell,num_symbols,embedding_size,output_projection=None,feed_previous=False,update_embedding_for_previous=True,scope=None)", "tf.contrib.legacy_seq2seq.embedding_rnn_seq2seq": "tf.contrib.legacy_seq2seq.embedding_rnn_seq2seq(encoder_inputs,decoder_inputs,cell,num_encoder_symbols,num_decoder_symbols,embedding_size,output_projection=None,feed_previous=False,dtype=None,scope=None)", "tf.contrib.legacy_seq2seq.embedding_tied_rnn_seq2seq": "tf.contrib.legacy_seq2seq.embedding_tied_rnn_seq2seq(encoder_inputs,decoder_inputs,cell,num_symbols,embedding_size,num_decoder_symbols=None,output_projection=None,feed_previous=False,dtype=None,scope=None)", "tf.contrib.legacy_seq2seq.model_with_buckets": "tf.contrib.legacy_seq2seq.model_with_buckets(encoder_inputs,decoder_inputs,targets,weights,buckets,seq2seq,softmax_loss_function=None,per_example_loss=False,name=None)", "tf.contrib.legacy_seq2seq.one2many_rnn_seq2seq": "tf.contrib.legacy_seq2seq.one2many_rnn_seq2seq(encoder_inputs,decoder_inputs_dict,enc_cell,dec_cells_dict,num_encoder_symbols,num_decoder_symbols_dict,embedding_size,feed_previous=False,dtype=None,scope=None)", "tf.contrib.legacy_seq2seq.rnn_decoder": "tf.contrib.legacy_seq2seq.rnn_decoder(decoder_inputs,initial_state,cell,loop_function=None,scope=None)", "tf.contrib.legacy_seq2seq.sequence_loss": "tf.contrib.legacy_seq2seq.sequence_loss(logits,targets,weights,average_across_timesteps=True,average_across_batch=True,softmax_loss_function=None,name=None)", "tf.contrib.legacy_seq2seq.sequence_loss_by_example": "tf.contrib.legacy_seq2seq.sequence_loss_by_example(logits,targets,weights,average_across_timesteps=True,softmax_loss_function=None,name=None)", "tf.contrib.legacy_seq2seq.tied_rnn_seq2seq": "tf.contrib.legacy_seq2seq.tied_rnn_seq2seq(encoder_inputs,decoder_inputs,cell,loop_function=None,dtype=tf.dtypes.float32,scope=None)", "tf.lite.toco_convert": "tf.lite.toco_convert(input_data,input_tensors,output_tensors,*args,**kwargs)", "tf.contrib.lookup.index_table_from_file": "tf.contrib.lookup.index_table_from_file(vocabulary_file=None,num_oov_buckets=0,vocab_size=None,default_value=-1,hasher_spec=tf.contrib.lookup.FastHashSpec,key_dtype=tf.dtypes.string,name=None,key_column_index=TextFileIndex.WHOLE_LINE,value_column_index=TextFileIndex.LINE_NUMBER,delimiter='\\t')", "tf.contrib.lookup.index_table_from_tensor": "tf.contrib.lookup.index_table_from_tensor(mapping,num_oov_buckets=0,default_value=-1,hasher_spec=tf.contrib.lookup.FastHashSpec,dtype=tf.dtypes.string,name=None)", "tf.contrib.lookup.index_to_string": "tf.contrib.lookup.index_to_string(tensor,mapping,default_value='UNK',name=None)", "tf.contrib.lookup.index_to_string_table_from_file": "tf.contrib.lookup.index_to_string_table_from_file(vocabulary_file,vocab_size=None,default_value='UNK',name=None,key_column_index=TextFileIndex.LINE_NUMBER,value_column_index=TextFileIndex.WHOLE_LINE,delimiter='\\t')", "tf.contrib.lookup.index_to_string_table_from_tensor": "tf.contrib.lookup.index_to_string_table_from_tensor(mapping,default_value='UNK',name=None)", "tf.contrib.lookup.string_to_index": "tf.contrib.lookup.string_to_index(tensor,mapping,default_value=-1,name=None)", "tf.contrib.lookup.string_to_index_table_from_file": "tf.contrib.lookup.string_to_index_table_from_file(vocabulary_file=None,num_oov_buckets=0,vocab_size=None,default_value=-1,hasher_spec=tf.contrib.lookup.FastHashSpec,name=None)", "tf.contrib.lookup.string_to_index_table_from_tensor": "tf.contrib.lookup.string_to_index_table_from_tensor(mapping,num_oov_buckets=0,default_value=-1,hasher_spec=tf.contrib.lookup.FastHashSpec,name=None)", "tf.contrib.losses.absolute_difference": "tf.contrib.losses.absolute_difference(predictions,labels=None,weights=1.0,scope=None)", "tf.contrib.losses.add_loss": "tf.contrib.losses.add_loss(loss,loss_collection=tf.GraphKeys.LOSSES)", "tf.contrib.losses.compute_weighted_loss": "tf.contrib.losses.compute_weighted_loss(losses,weights=1.0,scope=None)", "tf.contrib.losses.cosine_distance": "tf.contrib.losses.cosine_distance(predictions,labels=None,axis=None,weights=1.0,scope=None,dim=None)", "tf.contrib.losses.get_losses": "tf.contrib.losses.get_losses(scope=None,loss_collection=tf.GraphKeys.LOSSES)", "tf.contrib.losses.get_regularization_losses": "tf.contrib.losses.get_regularization_losses(scope=None)", "tf.contrib.losses.get_total_loss": "tf.contrib.losses.get_total_loss(add_regularization_losses=True,name='total_loss')", "tf.contrib.losses.hinge_loss": "tf.contrib.losses.hinge_loss(logits,labels=None,scope=None)", "tf.contrib.losses.log_loss": "tf.contrib.losses.log_loss(predictions,labels=None,weights=1.0,epsilon=1e-07,scope=None)", "tf.contrib.losses.mean_pairwise_squared_error": "tf.contrib.losses.mean_pairwise_squared_error(predictions,labels=None,weights=1.0,scope=None)", "tf.contrib.losses.mean_squared_error": "tf.contrib.losses.mean_squared_error(predictions,labels=None,weights=1.0,scope=None)", "tf.contrib.losses.metric_learning.cluster_loss": "tf.contrib.losses.metric_learning.cluster_loss(labels,embeddings,margin_multiplier,enable_pam_finetuning=True,margin_type='nmi',print_losses=False)", "tf.contrib.losses.metric_learning.contrastive_loss": "tf.contrib.losses.metric_learning.contrastive_loss(labels,embeddings_anchor,embeddings_positive,margin=1.0)", "tf.contrib.losses.metric_learning.lifted_struct_loss": "tf.contrib.losses.metric_learning.lifted_struct_loss(labels,embeddings,margin=1.0)", "tf.contrib.losses.metric_learning.npairs_loss": "tf.contrib.losses.metric_learning.npairs_loss(labels,embeddings_anchor,embeddings_positive,reg_lambda=0.002,print_losses=False)", "tf.contrib.losses.metric_learning.npairs_loss_multilabel": "tf.contrib.losses.metric_learning.npairs_loss_multilabel(sparse_labels,embeddings_anchor,embeddings_positive,reg_lambda=0.002,print_losses=False)", "tf.contrib.losses.metric_learning.triplet_semihard_loss": "tf.contrib.losses.metric_learning.triplet_semihard_loss(labels,embeddings,margin=1.0)", "tf.contrib.losses.sigmoid_cross_entropy": "tf.contrib.losses.sigmoid_cross_entropy(logits,multi_class_labels,weights=1.0,label_smoothing=0,scope=None)", "tf.contrib.losses.softmax_cross_entropy": "tf.contrib.losses.softmax_cross_entropy(logits,onehot_labels,weights=1.0,label_smoothing=0,scope=None)", "tf.contrib.losses.sparse_softmax_cross_entropy": "tf.contrib.losses.sparse_softmax_cross_entropy(logits,labels,weights=1.0,scope=None)", "tf.contrib.memory_stats.BytesInUse": "tf.contrib.memory_stats.BytesInUse()", "tf.contrib.memory_stats.BytesLimit": "tf.contrib.memory_stats.BytesLimit()", "tf.contrib.memory_stats.MaxBytesInUse": "tf.contrib.memory_stats.MaxBytesInUse()", "tf.contrib.meta_graph_transform.meta_graph_transform.meta_graph_transform": "tf.contrib.meta_graph_transform.meta_graph_transform.meta_graph_transform(base_meta_graph_def,input_names,output_names,transforms,tags,checkpoint_path=None)", "tf.contrib.metrics.accuracy": "tf.contrib.metrics.accuracy(predictions,labels,weights=None,name=None)", "tf.contrib.metrics.aggregate_metric_map": "tf.contrib.metrics.aggregate_metric_map(names_to_tuples)", "tf.contrib.metrics.aggregate_metrics": "tf.contrib.metrics.aggregate_metrics(*value_update_tuples)", "tf.contrib.metrics.auc_using_histogram": "tf.contrib.metrics.auc_using_histogram(boolean_labels,scores,score_range,nbins=100,collections=None,check_shape=True,name=None)", "tf.contrib.metrics.auc_with_confidence_intervals": "tf.contrib.metrics.auc_with_confidence_intervals(labels,predictions,weights=None,alpha=0.95,logit_transformation=True,metrics_collections=(),updates_collections=(),name=None)", "tf.contrib.metrics.cohen_kappa": "tf.contrib.metrics.cohen_kappa(labels,predictions_idx,num_classes,weights=None,metrics_collections=None,updates_collections=None,name=None)", "tf.contrib.metrics.confusion_matrix": "tf.contrib.metrics.confusion_matrix(labels,predictions,num_classes=None,dtype=tf.dtypes.int32,name=None,weights=None)", "tf.contrib.metrics.count": "tf.contrib.metrics.count(values,weights=None,metrics_collections=None,updates_collections=None,name=None)", "tf.contrib.metrics.f1_score": "tf.contrib.metrics.f1_score(labels,predictions,weights=None,num_thresholds=200,metrics_collections=None,updates_collections=None,name=None)", "tf.contrib.metrics.precision_at_recall": "tf.contrib.metrics.precision_at_recall(labels,predictions,target_recall,weights=None,num_thresholds=200,metrics_collections=None,updates_collections=None,name=None)", "tf.contrib.metrics.precision_recall_at_equal_thresholds": "tf.contrib.metrics.precision_recall_at_equal_thresholds(labels,predictions,weights=None,num_thresholds=None,use_locking=None,name=None)", "tf.contrib.metrics.recall_at_precision": "tf.contrib.metrics.recall_at_precision(labels,predictions,precision,weights=None,num_thresholds=200,metrics_collections=None,updates_collections=None,name=None,strict_mode=False)", "tf.sets.difference": "tf.sets.difference(a,b,aminusb=True,validate_indices=True)", "tf.sets.intersection": "tf.sets.intersection(a,b,validate_indices=True)", "tf.sets.size": "tf.sets.size(a,validate_indices=True)", "tf.sets.union": "tf.sets.union(a,b,validate_indices=True)", "tf.contrib.metrics.sparse_recall_at_top_k": "tf.contrib.metrics.sparse_recall_at_top_k(labels,top_k_predictions,class_id=None,weights=None,metrics_collections=None,updates_collections=None,name=None)", "tf.contrib.metrics.streaming_accuracy": "tf.contrib.metrics.streaming_accuracy(predictions,labels,weights=None,metrics_collections=None,updates_collections=None,name=None)", "tf.contrib.metrics.streaming_auc": "tf.contrib.metrics.streaming_auc(predictions,labels,weights=None,num_thresholds=200,metrics_collections=None,updates_collections=None,curve='ROC',name=None)", "tf.contrib.metrics.streaming_concat": "tf.contrib.metrics.streaming_concat(values,axis=0,max_size=None,metrics_collections=None,updates_collections=None,name=None)", "tf.contrib.metrics.streaming_covariance": "tf.contrib.metrics.streaming_covariance(predictions,labels,weights=None,metrics_collections=None,updates_collections=None,name=None)", "tf.contrib.metrics.streaming_curve_points": "tf.contrib.metrics.streaming_curve_points(labels=None,predictions=None,weights=None,num_thresholds=200,metrics_collections=None,updates_collections=None,curve='ROC',name=None)", "tf.contrib.metrics.streaming_dynamic_auc": "tf.contrib.metrics.streaming_dynamic_auc(labels,predictions,curve='ROC',metrics_collections=(),updates_collections=(),name=None,weights=None)", "tf.contrib.metrics.streaming_false_negative_rate": "tf.contrib.metrics.streaming_false_negative_rate(predictions,labels,weights=None,metrics_collections=None,updates_collections=None,name=None)", "tf.contrib.metrics.streaming_false_negative_rate_at_thresholds": "tf.contrib.metrics.streaming_false_negative_rate_at_thresholds(predictions,labels,thresholds,weights=None,metrics_collections=None,updates_collections=None,name=None)", "tf.contrib.metrics.streaming_false_negatives": "tf.contrib.metrics.streaming_false_negatives(predictions,labels,weights=None,metrics_collections=None,updates_collections=None,name=None)", "tf.contrib.metrics.streaming_false_negatives_at_thresholds": "tf.contrib.metrics.streaming_false_negatives_at_thresholds(predictions,labels,thresholds,weights=None)", "tf.contrib.metrics.streaming_false_positive_rate": "tf.contrib.metrics.streaming_false_positive_rate(predictions,labels,weights=None,metrics_collections=None,updates_collections=None,name=None)", "tf.contrib.metrics.streaming_false_positive_rate_at_thresholds": "tf.contrib.metrics.streaming_false_positive_rate_at_thresholds(predictions,labels,thresholds,weights=None,metrics_collections=None,updates_collections=None,name=None)", "tf.contrib.metrics.streaming_false_positives": "tf.contrib.metrics.streaming_false_positives(predictions,labels,weights=None,metrics_collections=None,updates_collections=None,name=None)", "tf.contrib.metrics.streaming_false_positives_at_thresholds": "tf.contrib.metrics.streaming_false_positives_at_thresholds(predictions,labels,thresholds,weights=None)", "tf.contrib.metrics.streaming_mean": "tf.contrib.metrics.streaming_mean(values,weights=None,metrics_collections=None,updates_collections=None,name=None)", "tf.contrib.metrics.streaming_mean_absolute_error": "tf.contrib.metrics.streaming_mean_absolute_error(predictions,labels,weights=None,metrics_collections=None,updates_collections=None,name=None)", "tf.contrib.metrics.streaming_mean_cosine_distance": "tf.contrib.metrics.streaming_mean_cosine_distance(predictions,labels,dim,weights=None,metrics_collections=None,updates_collections=None,name=None)", "tf.contrib.metrics.streaming_mean_iou": "tf.contrib.metrics.streaming_mean_iou(predictions,labels,num_classes,weights=None,metrics_collections=None,updates_collections=None,name=None)", "tf.contrib.metrics.streaming_mean_relative_error": "tf.contrib.metrics.streaming_mean_relative_error(predictions,labels,normalizer,weights=None,metrics_collections=None,updates_collections=None,name=None)", "tf.contrib.metrics.streaming_mean_squared_error": "tf.contrib.metrics.streaming_mean_squared_error(predictions,labels,weights=None,metrics_collections=None,updates_collections=None,name=None)", "tf.contrib.metrics.streaming_mean_tensor": "tf.contrib.metrics.streaming_mean_tensor(values,weights=None,metrics_collections=None,updates_collections=None,name=None)", "tf.contrib.metrics.streaming_pearson_correlation": "tf.contrib.metrics.streaming_pearson_correlation(predictions,labels,weights=None,metrics_collections=None,updates_collections=None,name=None)", "tf.contrib.metrics.streaming_percentage_less": "tf.contrib.metrics.streaming_percentage_less(values,threshold,weights=None,metrics_collections=None,updates_collections=None,name=None)", "tf.contrib.metrics.streaming_precision": "tf.contrib.metrics.streaming_precision(predictions,labels,weights=None,metrics_collections=None,updates_collections=None,name=None)", "tf.contrib.metrics.streaming_precision_at_thresholds": "tf.contrib.metrics.streaming_precision_at_thresholds(predictions,labels,thresholds,weights=None,metrics_collections=None,updates_collections=None,name=None)", "tf.contrib.metrics.streaming_recall": "tf.contrib.metrics.streaming_recall(predictions,labels,weights=None,metrics_collections=None,updates_collections=None,name=None)", "tf.contrib.metrics.streaming_recall_at_k": "tf.contrib.metrics.streaming_recall_at_k(predictions,labels,k,weights=None,metrics_collections=None,updates_collections=None,name=None)", "tf.contrib.metrics.streaming_recall_at_thresholds": "tf.contrib.metrics.streaming_recall_at_thresholds(predictions,labels,thresholds,weights=None,metrics_collections=None,updates_collections=None,name=None)", "tf.contrib.metrics.streaming_root_mean_squared_error": "tf.contrib.metrics.streaming_root_mean_squared_error(predictions,labels,weights=None,metrics_collections=None,updates_collections=None,name=None)", "tf.contrib.metrics.streaming_sensitivity_at_specificity": "tf.contrib.metrics.streaming_sensitivity_at_specificity(predictions,labels,specificity,weights=None,num_thresholds=200,metrics_collections=None,updates_collections=None,name=None)", "tf.contrib.metrics.streaming_sparse_average_precision_at_k": "tf.contrib.metrics.streaming_sparse_average_precision_at_k(predictions,labels,k,weights=None,metrics_collections=None,updates_collections=None,name=None)", "tf.contrib.metrics.streaming_sparse_average_precision_at_top_k": "tf.contrib.metrics.streaming_sparse_average_precision_at_top_k(top_k_predictions,labels,weights=None,metrics_collections=None,updates_collections=None,name=None)", "tf.contrib.metrics.streaming_sparse_precision_at_k": "tf.contrib.metrics.streaming_sparse_precision_at_k(predictions,labels,k,class_id=None,weights=None,metrics_collections=None,updates_collections=None,name=None)", "tf.contrib.metrics.streaming_sparse_precision_at_top_k": "tf.contrib.metrics.streaming_sparse_precision_at_top_k(top_k_predictions,labels,class_id=None,weights=None,metrics_collections=None,updates_collections=None,name=None)", "tf.contrib.metrics.streaming_sparse_recall_at_k": "tf.contrib.metrics.streaming_sparse_recall_at_k(predictions,labels,k,class_id=None,weights=None,metrics_collections=None,updates_collections=None,name=None)", "tf.contrib.metrics.streaming_specificity_at_sensitivity": "tf.contrib.metrics.streaming_specificity_at_sensitivity(predictions,labels,sensitivity,weights=None,num_thresholds=200,metrics_collections=None,updates_collections=None,name=None)", "tf.contrib.metrics.streaming_true_negatives": "tf.contrib.metrics.streaming_true_negatives(predictions,labels,weights=None,metrics_collections=None,updates_collections=None,name=None)", "tf.contrib.metrics.streaming_true_negatives_at_thresholds": "tf.contrib.metrics.streaming_true_negatives_at_thresholds(predictions,labels,thresholds,weights=None)", "tf.contrib.metrics.streaming_true_positives": "tf.contrib.metrics.streaming_true_positives(predictions,labels,weights=None,metrics_collections=None,updates_collections=None,name=None)", "tf.contrib.metrics.streaming_true_positives_at_thresholds": "tf.contrib.metrics.streaming_true_positives_at_thresholds(predictions,labels,thresholds,weights=None)", "tf.contrib.model_pruning.apply_mask": "tf.contrib.model_pruning.apply_mask(x,scope='')", "tf.contrib.model_pruning.get_masked_weights": "tf.contrib.model_pruning.get_masked_weights()", "tf.contrib.model_pruning.get_masks": "tf.contrib.model_pruning.get_masks()", "tf.contrib.model_pruning.get_pruning_hparams": "tf.contrib.model_pruning.get_pruning_hparams()", "tf.contrib.model_pruning.get_thresholds": "tf.contrib.model_pruning.get_thresholds()", "tf.contrib.model_pruning.get_weight_sparsity": "tf.contrib.model_pruning.get_weight_sparsity()", "tf.contrib.model_pruning.get_weights": "tf.contrib.model_pruning.get_weights()", "tf.contrib.model_pruning.graph_def_from_checkpoint": "tf.contrib.model_pruning.graph_def_from_checkpoint(checkpoint_dir,output_node_names)", "tf.contrib.model_pruning.masked_conv2d": "tf.contrib.model_pruning.masked_conv2d(inputs,num_outputs,kernel_size,stride=1,padding='SAME',data_format=None,rate=1,activation_fn=tf.nn.relu,normalizer_fn=None,normalizer_params=None,weights_initializer=initializers.xavier_initializer(),weights_regularizer=None,biases_initializer=tf.zeros_initializer(),biases_regularizer=None,reuse=None,variables_collections=None,outputs_collections=None,trainable=True,scope=None)", "tf.contrib.model_pruning.masked_fully_connected": "tf.contrib.model_pruning.masked_fully_connected(inputs,num_outputs,activation_fn=tf.nn.relu,normalizer_fn=None,normalizer_params=None,weights_initializer=initializers.xavier_initializer(),weights_regularizer=None,biases_initializer=tf.zeros_initializer(),biases_regularizer=None,reuse=None,variables_collections=None,outputs_collections=None,trainable=True,scope=None)", "tf.contrib.model_pruning.strip_pruning_vars_fn": "tf.contrib.model_pruning.strip_pruning_vars_fn(input_graph_def,output_node_names)", "tf.contrib.model_pruning.train": "tf.contrib.model_pruning.train(train_op,logdir,mask_update_op,train_step_fn=train_step,train_step_kwargs=_USE_DEFAULT,log_every_n_steps=1,graph=None,master='',is_chief=True,global_step=None,number_of_steps=None,init_op=_USE_DEFAULT,init_feed_dict=None,local_init_op=_USE_DEFAULT,init_fn=None,ready_op=_USE_DEFAULT,summary_op=_USE_DEFAULT,save_summaries_secs=600,summary_writer=_USE_DEFAULT,startup_delay_steps=0,saver=None,save_interval_secs=600,sync_optimizer=None,session_config=None,trace_every_n_steps=None)", "tf.contrib.nn.alpha_dropout": "tf.contrib.nn.alpha_dropout(x,keep_prob,noise_shape=None,seed=None,name=None)", "tf.contrib.nn.conv1d_transpose": "tf.contrib.nn.conv1d_transpose(value,filter,output_shape,stride,padding='SAME',data_format='NWC',name=None)", "tf.contrib.nn.deprecated_flipped_sigmoid_cross_entropy_with_logits": "tf.contrib.nn.deprecated_flipped_sigmoid_cross_entropy_with_logits(logits,targets,name=None)", "tf.contrib.nn.deprecated_flipped_softmax_cross_entropy_with_logits": "tf.contrib.nn.deprecated_flipped_softmax_cross_entropy_with_logits(logits,labels,dim=-1,name=None)", "tf.contrib.nn.deprecated_flipped_sparse_softmax_cross_entropy_with_logits": "tf.contrib.nn.deprecated_flipped_sparse_softmax_cross_entropy_with_logits(logits,labels,name=None)", "tf.contrib.nn.nth_element": "tf.contrib.nn.nth_element(input,n,reverse=False,name=None)", "tf.contrib.nn.rank_sampled_softmax_loss": "tf.contrib.nn.rank_sampled_softmax_loss(weights,biases,labels,inputs,num_sampled,num_resampled,num_classes,num_true,sampled_values,resampling_temperature,remove_accidental_hits,partition_strategy,name=None)", "tf.contrib.nn.sampled_sparse_softmax_loss": "tf.contrib.nn.sampled_sparse_softmax_loss(weights,biases,labels,inputs,num_sampled,num_classes,sampled_values=None,remove_accidental_hits=True,partition_strategy='mod',name='sampled_sparse_softmax_loss')", "tf.contrib.nn.scaled_softplus": "tf.contrib.nn.scaled_softplus(x,alpha,clip=None,name=None)", "tf.contrib.opt.clip_gradients_by_global_norm": "tf.contrib.opt.clip_gradients_by_global_norm(gradients_variables,clip_norm=20.0)", "tf.contrib.opt.extend_with_decoupled_weight_decay": "tf.contrib.opt.extend_with_decoupled_weight_decay(base_optimizer)", "tf.contrib.periodic_resample.periodic_resample": "tf.contrib.periodic_resample.periodic_resample(values,shape,name=None)", "tf.contrib.predictor.from_contrib_estimator": "tf.contrib.predictor.from_contrib_estimator(estimator,prediction_input_fn,input_alternative_key=None,output_alternative_key=None,graph=None,config=None)", "tf.contrib.predictor.from_estimator": "tf.contrib.predictor.from_estimator(estimator,serving_input_receiver_fn,output_key=None,graph=None,config=None)", "tf.contrib.predictor.from_saved_model": "tf.contrib.predictor.from_saved_model(export_dir,signature_def_key=None,signature_def=None,input_names=None,output_names=None,tags=None,graph=None,config=None)", "tf.contrib.proto.decode_proto": "tf.contrib.proto.decode_proto(bytes,message_type,field_names,output_types,descriptor_source='local://',message_format='binary',sanitize=False,name=None)", "tf.contrib.proto.encode_proto": "tf.contrib.proto.encode_proto(sizes,values,field_names,message_type,descriptor_source='local://',name=None)", "tf.contrib.quantize.create_eval_graph": "tf.contrib.quantize.create_eval_graph(input_graph=None)", "tf.contrib.quantize.create_training_graph": "tf.contrib.quantize.create_training_graph(input_graph=None,quant_delay=0)", "tf.contrib.quantize.experimental_create_eval_graph": "tf.contrib.quantize.experimental_create_eval_graph(input_graph=None,weight_bits=8,activation_bits=8,symmetric=False,quant_delay=None,scope=None)", "tf.contrib.quantize.experimental_create_training_graph": "tf.contrib.quantize.experimental_create_training_graph(input_graph=None,weight_bits=8,activation_bits=8,symmetric=False,quant_delay=0,freeze_bn_delay=None,scope=None)", "tf.contrib.receptive_field.compute_receptive_field_from_graph_def": "tf.contrib.receptive_field.compute_receptive_field_from_graph_def(graph_def,input_node,output_node,stop_propagation=None,input_resolution=None)", "tf.contrib.receptive_field.get_compute_order": "tf.contrib.receptive_field.get_compute_order(graph_def,input_node_name='',input_node_size=None)", "tf.contrib.recurrent.Recurrent": "tf.contrib.recurrent.Recurrent(theta,state0,inputs,cell_fn,cell_grad=None,extras=None,max_input_length=None,use_tpu=False,aligned_end=False)", "tf.contrib.recurrent.bidirectional_functional_rnn": "tf.contrib.recurrent.bidirectional_functional_rnn(cell_fw,cell_bw,inputs,initial_state_fw=None,initial_state_bw=None,dtype=None,sequence_length=None,time_major=False,use_tpu=False,fast_reverse=False,scope=None)", "tf.contrib.recurrent.functional_rnn": "tf.contrib.recurrent.functional_rnn(cell,inputs,sequence_length=None,initial_state=None,dtype=None,time_major=False,scope=None,use_tpu=False,reverse=False)", "tf.contrib.remote_fused_graph.remote_fused_graph_execute": "tf.contrib.remote_fused_graph.remote_fused_graph_execute(inputs,output_types,graph_def,graph_input_node_names,graph_output_node_names,executor_name,serialized_executor_parameters,default_graph_input_tensor_type_shapes=None,default_graph_output_tensor_type_shapes=None)", "tf.contrib.resampler.resampler": "tf.contrib.resampler.resampler(data,warp,name='resampler')", "tf.contrib.rnn.best_effort_input_batch_size": "tf.contrib.rnn.best_effort_input_batch_size(flat_input)", "tf.contrib.rnn.stack_bidirectional_dynamic_rnn": "tf.contrib.rnn.stack_bidirectional_dynamic_rnn(cells_fw,cells_bw,inputs,initial_states_fw=None,initial_states_bw=None,dtype=None,sequence_length=None,parallel_iterations=None,time_major=False,scope=None)", "tf.contrib.rnn.stack_bidirectional_rnn": "tf.contrib.rnn.stack_bidirectional_rnn(cells_fw,cells_bw,inputs,initial_states_fw=None,initial_states_bw=None,dtype=None,sequence_length=None,scope=None)", "tf.nn.static_bidirectional_rnn": "tf.nn.static_bidirectional_rnn(cell_fw,cell_bw,inputs,initial_state_fw=None,initial_state_bw=None,dtype=None,sequence_length=None,scope=None)", "tf.nn.static_rnn": "tf.nn.static_rnn(cell,inputs,initial_state=None,dtype=None,sequence_length=None,scope=None)", "tf.nn.static_state_saving_rnn": "tf.nn.static_state_saving_rnn(cell,inputs,state_saver,state_name,sequence_length=None,scope=None)", "tf.contrib.rnn.transpose_batch_time": "tf.contrib.rnn.transpose_batch_time(x)", "tf.contrib.rpc.rpc": "tf.contrib.rpc.rpc(address,method,request,protocol='',fail_fast=True,timeout_in_ms=0,name=None)", "tf.contrib.rpc.try_rpc": "tf.contrib.rpc.try_rpc(address,method,request,protocol='',fail_fast=True,timeout_in_ms=0,name=None)", "tf.contrib.saved_model.load_keras_model": "tf.contrib.saved_model.load_keras_model(saved_model_path)", "tf.contrib.saved_model.save_keras_model": "tf.contrib.saved_model.save_keras_model(model,saved_model_path,custom_objects=None,as_text=None,input_signature=None,serving_only=False)", "tf.contrib.seq2seq.dynamic_decode": "tf.contrib.seq2seq.dynamic_decode(decoder,output_time_major=False,impute_finished=False,maximum_iterations=None,parallel_iterations=32,swap_memory=False,scope=None)", "tf.contrib.seq2seq.gather_tree": "tf.contrib.seq2seq.gather_tree(step_ids,parent_ids,max_sequence_lengths,end_token,name=None)", "tf.contrib.seq2seq.hardmax": "tf.contrib.seq2seq.hardmax(logits,name=None)", "tf.contrib.seq2seq.monotonic_attention": "tf.contrib.seq2seq.monotonic_attention(p_choose_i,previous_attention,mode)", "tf.contrib.seq2seq.safe_cumprod": "tf.contrib.seq2seq.safe_cumprod(x,*args,**kwargs)", "tf.contrib.seq2seq.sequence_loss": "tf.contrib.seq2seq.sequence_loss(logits,targets,weights,average_across_timesteps=True,average_across_batch=True,softmax_loss_function=None,name=None)", "tf.contrib.seq2seq.tile_batch": "tf.contrib.seq2seq.tile_batch(t,multiplier,name=None)", "tf.signal.frame": "tf.signal.frame(signal,frame_length,frame_step,pad_end=False,pad_value=0,axis=-1,name=None)", "tf.signal.hamming_window": "tf.signal.hamming_window(window_length,periodic=True,dtype=tf.dtypes.float32,name=None)", "tf.signal.hann_window": "tf.signal.hann_window(window_length,periodic=True,dtype=tf.dtypes.float32,name=None)", "tf.signal.inverse_stft": "tf.signal.inverse_stft(stfts,frame_length,frame_step,fft_length=None,window_fn=tf.signal.hann_window,name=None)", "tf.signal.inverse_stft_window_fn": "tf.signal.inverse_stft_window_fn(frame_step,forward_window_fn=tf.signal.hann_window,name=None)", "tf.signal.linear_to_mel_weight_matrix": "tf.signal.linear_to_mel_weight_matrix(num_mel_bins=20,num_spectrogram_bins=129,sample_rate=8000,lower_edge_hertz=125.0,upper_edge_hertz=3800.0,dtype=tf.dtypes.float32,name=None)", "tf.signal.mfccs_from_log_mel_spectrograms": "tf.signal.mfccs_from_log_mel_spectrograms(log_mel_spectrograms,name=None)", "tf.signal.overlap_and_add": "tf.signal.overlap_and_add(signal,frame_step,name=None)", "tf.signal.stft": "tf.signal.stft(signals,frame_length,frame_step,fft_length=None,window_fn=tf.signal.hann_window,pad_end=False,name=None)", "tf.contrib.sparsemax.sparsemax": "tf.contrib.sparsemax.sparsemax(logits,name=None)", "tf.contrib.sparsemax.sparsemax_loss": "tf.contrib.sparsemax.sparsemax_loss(logits,sparsemax,labels,name=None)", "tf.random.stateless_multinomial": "tf.random.stateless_multinomial(logits,num_samples,seed,output_dtype=tf.dtypes.int64,name=None)", "tf.random.stateless_normal": "tf.random.stateless_normal(shape,seed,mean=0.0,stddev=1.0,dtype=tf.dtypes.float32,name=None)", "tf.random.stateless_uniform": "tf.random.stateless_uniform(shape,seed,minval=0,maxval=None,dtype=tf.dtypes.float32,name=None)", "tf.random.stateless_truncated_normal": "tf.random.stateless_truncated_normal(shape,seed,mean=0.0,stddev=1.0,dtype=tf.dtypes.float32,name=None)", "tf.contrib.summary.all_summary_ops": "tf.contrib.summary.all_summary_ops()", "tf.contrib.summary.always_record_summaries": "tf.contrib.summary.always_record_summaries()", "tf.contrib.summary.audio": "tf.contrib.summary.audio(name,tensor,sample_rate,max_outputs,family=None,step=None)", "tf.contrib.summary.create_db_writer": "tf.contrib.summary.create_db_writer(db_uri,experiment_name=None,run_name=None,user_name=None,name=None)", "tf.contrib.summary.create_file_writer": "tf.contrib.summary.create_file_writer(logdir,max_queue=None,flush_millis=None,filename_suffix=None,name=None)", "tf.contrib.summary.create_summary_file_writer": "tf.contrib.summary.create_summary_file_writer(*args,**kwargs)", "tf.contrib.summary.eval_dir": "tf.contrib.summary.eval_dir(model_dir,name=None)", "tf.contrib.summary.flush": "tf.contrib.summary.flush(writer=None,name=None)", "tf.contrib.summary.generic": "tf.contrib.summary.generic(name,tensor,metadata=None,family=None,step=None)", "tf.contrib.summary.graph": "tf.contrib.summary.graph(param,step=None,name=None)", "tf.contrib.summary.histogram": "tf.contrib.summary.histogram(name,tensor,family=None,step=None)", "tf.contrib.summary.image": "tf.contrib.summary.image(name,tensor,bad_color=None,max_images=3,family=None,step=None)", "tf.contrib.summary.import_event": "tf.contrib.summary.import_event(tensor,name=None)", "tf.contrib.summary.initialize": "tf.contrib.summary.initialize(graph=None,session=None)", "tf.contrib.summary.never_record_summaries": "tf.contrib.summary.never_record_summaries()", "tf.contrib.summary.record_summaries_every_n_global_steps": "tf.contrib.summary.record_summaries_every_n_global_steps(n,global_step=None)", "tf.contrib.summary.scalar": "tf.contrib.summary.scalar(name,tensor,family=None,step=None)", "tf.contrib.summary.should_record_summaries": "tf.contrib.summary.should_record_summaries()", "tf.contrib.summary.summary_writer_initializer_op": "tf.contrib.summary.summary_writer_initializer_op()", "tf.contrib.timeseries.predict_continuation_input_fn": "tf.contrib.timeseries.predict_continuation_input_fn(evaluation,steps=None,times=None,exogenous_features=None)", "tf.contrib.timeseries.saved_model_utils.cold_start_filter": "tf.contrib.timeseries.saved_model_utils.cold_start_filter(signatures,session,features)", "tf.contrib.timeseries.saved_model_utils.filter_continuation": "tf.contrib.timeseries.saved_model_utils.filter_continuation(continue_from,signatures,session,features)", "tf.contrib.timeseries.saved_model_utils.predict_continuation": "tf.contrib.timeseries.saved_model_utils.predict_continuation(continue_from,signatures,session,steps=None,times=None,exogenous_features=None)", "tf.contrib.tpu.batch_parallel": "tf.contrib.tpu.batch_parallel(computation,inputs=None,num_shards=1,infeed_queue=None,device_assignment=None,name=None)", "tf.contrib.tpu.bfloat16_scope": "tf.contrib.tpu.bfloat16_scope()", "tf.contrib.tpu.core": "tf.contrib.tpu.core(num)", "tf.contrib.tpu.cross_replica_sum": "tf.contrib.tpu.cross_replica_sum(x,group_assignment=None,name=None)", "tf.contrib.tpu.device_assignment": "tf.contrib.tpu.device_assignment(topology,computation_shape=None,computation_stride=None,num_replicas=1)", "tf.contrib.tpu.export_estimator_savedmodel": "tf.contrib.tpu.export_estimator_savedmodel(estimator,export_dir_base,serving_input_receiver_fn,assets_extra=None,as_text=False,checkpoint_path=None,strip_default_attrs=False)", "tf.contrib.tpu.infeed_dequeue": "tf.contrib.tpu.infeed_dequeue(dtype,shape,name=None)", "tf.contrib.tpu.infeed_dequeue_tuple": "tf.contrib.tpu.infeed_dequeue_tuple(dtypes,shapes,name=None)", "tf.contrib.tpu.infeed_enqueue": "tf.contrib.tpu.infeed_enqueue(input,shape=[],device_ordinal=-1,name=None)", "tf.contrib.tpu.infeed_enqueue_tuple": "tf.contrib.tpu.infeed_enqueue_tuple(inputs,shapes,device_ordinal=-1,name=None)", "tf.contrib.tpu.initialize_system": "tf.contrib.tpu.initialize_system(embedding_config=None,job=None)", "tf.contrib.tpu.keras_to_tpu_model": "tf.contrib.tpu.keras_to_tpu_model(*args,**kwargs)", "tf.contrib.tpu.outfeed_dequeue": "tf.contrib.tpu.outfeed_dequeue(dtype,shape,device_ordinal=-1,name=None)", "tf.contrib.tpu.outfeed_dequeue_tuple": "tf.contrib.tpu.outfeed_dequeue_tuple(dtypes,shapes,device_ordinal=-1,name=None)", "tf.contrib.tpu.outfeed_enqueue": "tf.contrib.tpu.outfeed_enqueue(input,name=None)", "tf.contrib.tpu.outfeed_enqueue_tuple": "tf.contrib.tpu.outfeed_enqueue_tuple(inputs,name=None)", "tf.contrib.tpu.outside_compilation": "tf.contrib.tpu.outside_compilation(computation,*args,**kwargs)", "tf.contrib.tpu.repeat": "tf.contrib.tpu.repeat(n,body,inputs=None,infeed_queue=None,name=None)", "tf.contrib.tpu.replicate": "tf.contrib.tpu.replicate(computation,inputs=None,infeed_queue=None,device_assignment=None,name=None)", "tf.contrib.tpu.rewrite": "tf.contrib.tpu.rewrite(computation,inputs=None,infeed_queue=None,device_assignment=None,name=None)", "tf.contrib.tpu.shard": "tf.contrib.tpu.shard(computation,inputs=None,num_shards=1,input_shard_axes=None,outputs_from_all_shards=True,output_shard_axes=None,infeed_queue=None,device_assignment=None,name=None)", "tf.contrib.tpu.shutdown_system": "tf.contrib.tpu.shutdown_system(job=None)", "tf.contrib.tpu.while_loop": "tf.contrib.tpu.while_loop(condition,body,inputs=None,infeed_queue=None,name=None)", "tf.contrib.training.add_gradients_summaries": "tf.contrib.training.add_gradients_summaries(grads_and_vars)", "tf.contrib.training.batch_sequences_with_states": "tf.contrib.training.batch_sequences_with_states(input_key,input_sequences,input_context,input_length,initial_states,num_unroll,batch_size,num_threads=3,capacity=1000,allow_small_batch=True,pad=True,make_keys_unique=False,make_keys_unique_seed=None,name=None)", "tf.contrib.training.bucket": "tf.contrib.training.bucket(tensors,which_bucket,batch_size,num_buckets,num_threads=1,capacity=32,bucket_capacities=None,shapes=None,dynamic_pad=False,allow_smaller_final_batch=False,keep_input=True,shared_name=None,name=None)", "tf.contrib.training.bucket_by_sequence_length": "tf.contrib.training.bucket_by_sequence_length(input_length,tensors,batch_size,bucket_boundaries,num_threads=1,capacity=32,bucket_capacities=None,shapes=None,dynamic_pad=False,allow_smaller_final_batch=False,keep_input=True,shared_name=None,name=None)", "tf.contrib.training.byte_size_load_fn": "tf.contrib.training.byte_size_load_fn(op)", "tf.contrib.training.checkpoints_iterator": "tf.contrib.training.checkpoints_iterator(checkpoint_dir,min_interval_secs=0,timeout=None,timeout_fn=None)", "tf.contrib.training.clip_gradient_norms": "tf.contrib.training.clip_gradient_norms(gradients_to_variables,max_norm)", "tf.contrib.training.clip_gradient_norms_fn": "tf.contrib.training.clip_gradient_norms_fn(max_norm)", "tf.contrib.training.create_train_op": "tf.contrib.training.create_train_op(total_loss,optimizer,global_step=_USE_GLOBAL_STEP,update_ops=None,variables_to_train=None,transform_grads_fn=None,summarize_gradients=False,gate_gradients=tf_optimizer.Optimizer.GATE_OP,aggregation_method=None,colocate_gradients_with_ops=False,check_numerics=True)", "tf.contrib.training.evaluate_once": "tf.contrib.training.evaluate_once(checkpoint_path,master='',scaffold=None,eval_ops=None,feed_dict=None,final_ops=None,final_ops_feed_dict=None,hooks=None,config=None)", "tf.contrib.training.evaluate_repeatedly": "tf.contrib.training.evaluate_repeatedly(checkpoint_dir,master='',scaffold=None,eval_ops=None,feed_dict=None,final_ops=None,final_ops_feed_dict=None,eval_interval_secs=60,hooks=None,config=None,max_number_of_evaluations=None,timeout=None,timeout_fn=None)", "tf.contrib.training.get_or_create_eval_step": "tf.contrib.training.get_or_create_eval_step()", "tf.contrib.training.multiply_gradients": "tf.contrib.training.multiply_gradients(grads_and_vars,gradient_multipliers)", "tf.contrib.training.parse_values": "tf.contrib.training.parse_values(values,type_map,ignore_unknown=False)", "tf.contrib.training.rejection_sample": "tf.contrib.training.rejection_sample(tensors,accept_prob_fn,batch_size,queue_threads=1,enqueue_many=False,prebatch_capacity=16,prebatch_threads=1,runtime_checks=False,name=None)", "tf.contrib.training.resample_at_rate": "tf.contrib.training.resample_at_rate(inputs,rates,scope=None,seed=None,back_prop=False)", "tf.contrib.training.stratified_sample": "tf.contrib.training.stratified_sample(tensors,labels,target_probs,batch_size,init_probs=None,enqueue_many=False,queue_capacity=16,threads_per_queue=1,name=None)", "tf.contrib.training.train": "tf.contrib.training.train(train_op,logdir,master='',is_chief=True,scaffold=None,hooks=None,chief_only_hooks=None,save_checkpoint_secs=600,save_summaries_steps=100,config=None,max_wait_secs=7200,run_metadata=None)", "tf.contrib.training.wait_for_new_checkpoint": "tf.contrib.training.wait_for_new_checkpoint(checkpoint_dir,last_checkpoint=None,seconds_to_sleep=1,timeout=None)", "tf.contrib.training.weighted_resample": "tf.contrib.training.weighted_resample(inputs,weights,overall_rate,scope=None,mean_decay=0.999,seed=None)", "tf.contrib.util.constant_value": "tf.contrib.util.constant_value(tensor,partial=False)", "tf.make_ndarray": "tf.make_ndarray(tensor)", "tf.make_tensor_proto": "tf.make_tensor_proto(values,dtype=None,shape=None,verify_shape=False,allow_broadcast=False)", "tf.contrib.util.ops_used_by_graph_def": "tf.contrib.util.ops_used_by_graph_def(graph_def)", "tf.contrib.util.stripped_op_list_for_graph": "tf.contrib.util.stripped_op_list_for_graph(graph_def)", "tf.control_dependencies": "tf.control_dependencies(control_inputs)", "tf.convert_to_tensor": "tf.convert_to_tensor(value,dtype=None,name=None,preferred_dtype=None)", "tf.convert_to_tensor_or_indexed_slices": "tf.convert_to_tensor_or_indexed_slices(value,dtype=None,name=None)", "tf.math.cos": "tf.math.cos(x,name=None)", "tf.math.cosh": "tf.math.cosh(x,name=None)", "tf.math.count_nonzero": "tf.math.count_nonzero(input_tensor,axis=None,keepdims=None,dtype=tf.dtypes.int64,name=None,reduction_indices=None,keep_dims=None)", "tf.count_up_to": "tf.count_up_to(ref,limit,name=None)", "tf.create_partitioned_variables": "tf.create_partitioned_variables(shape,slicing,initializer,dtype=tf.dtypes.float32,trainable=True,collections=None,name=None,reuse=None)", "tf.linalg.cross": "tf.linalg.cross(a,b,name=None)", "tf.math.cumprod": "tf.math.cumprod(x,axis=0,exclusive=False,reverse=False,name=None)", "tf.math.cumsum": "tf.math.cumsum(x,axis=0,exclusive=False,reverse=False,name=None)", "tf.data.experimental.Counter": "tf.data.experimental.Counter(start=0,step=1,dtype=tf.dtypes.int64)", "tf.data.experimental.bucket_by_sequence_length": "tf.data.experimental.bucket_by_sequence_length(element_length_func,bucket_boundaries,bucket_batch_sizes,padded_shapes=None,padding_values=None,pad_to_bucket_boundary=False,no_padding=False)", "tf.data.experimental.cardinality": "tf.data.experimental.cardinality(dataset)", "tf.data.experimental.choose_from_datasets": "tf.data.experimental.choose_from_datasets(datasets,choice_dataset)", "tf.data.experimental.copy_to_device": "tf.data.experimental.copy_to_device(target_device,source_device='/cpu:0')", "tf.data.experimental.dense_to_sparse_batch": "tf.data.experimental.dense_to_sparse_batch(batch_size,row_shape)", "tf.data.experimental.enumerate_dataset": "tf.data.experimental.enumerate_dataset(start=0)", "tf.data.experimental.filter_for_shard": "tf.data.experimental.filter_for_shard(num_shards,shard_index)", "tf.data.experimental.get_single_element": "tf.data.experimental.get_single_element(dataset)", "tf.data.experimental.group_by_reducer": "tf.data.experimental.group_by_reducer(key_func,reducer)", "tf.data.experimental.group_by_window": "tf.data.experimental.group_by_window(key_func,reduce_func,window_size=None,window_size_func=None)", "tf.data.experimental.ignore_errors": "tf.data.experimental.ignore_errors()", "tf.data.experimental.latency_stats": "tf.data.experimental.latency_stats(tag)", "tf.data.experimental.make_batched_features_dataset": "tf.data.experimental.make_batched_features_dataset(file_pattern,batch_size,features,reader=tf.data.TFRecordDataset,label_key=None,reader_args=None,num_epochs=None,shuffle=True,shuffle_buffer_size=10000,shuffle_seed=None,prefetch_buffer_size=optimization.AUTOTUNE,reader_num_threads=1,parser_num_threads=2,sloppy_ordering=False,drop_final_batch=False)", "tf.data.experimental.make_csv_dataset": "tf.data.experimental.make_csv_dataset(file_pattern,batch_size,column_names=None,column_defaults=None,label_name=None,select_columns=None,field_delim=',',use_quote_delim=True,na_value='',header=True,num_epochs=None,shuffle=True,shuffle_buffer_size=10000,shuffle_seed=None,prefetch_buffer_size=optimization.AUTOTUNE,num_parallel_reads=1,sloppy=False,num_rows_for_inference=100,compression_type=None)", "tf.data.experimental.make_saveable_from_iterator": "tf.data.experimental.make_saveable_from_iterator(iterator)", "tf.data.experimental.map_and_batch": "tf.data.experimental.map_and_batch(map_func,batch_size,num_parallel_batches=None,drop_remainder=False,num_parallel_calls=None)", "tf.data.experimental.parallel_interleave": "tf.data.experimental.parallel_interleave(map_func,cycle_length,block_length=1,sloppy=False,buffer_output_elements=None,prefetch_input_elements=None)", "tf.data.experimental.parse_example_dataset": "tf.data.experimental.parse_example_dataset(features,num_parallel_calls=1)", "tf.data.experimental.prefetch_to_device": "tf.data.experimental.prefetch_to_device(device,buffer_size=None)", "tf.data.experimental.rejection_resample": "tf.data.experimental.rejection_resample(class_func,target_dist,initial_dist=None,seed=None)", "tf.data.experimental.sample_from_datasets": "tf.data.experimental.sample_from_datasets(datasets,weights=None,seed=None)", "tf.data.experimental.scan": "tf.data.experimental.scan(initial_state,scan_func)", "tf.data.experimental.shuffle_and_repeat": "tf.data.experimental.shuffle_and_repeat(buffer_size,count=None,seed=None)", "tf.data.experimental.unbatch": "tf.data.experimental.unbatch()", "tf.data.experimental.unique": "tf.data.experimental.unique()", "tf.data.make_initializable_iterator": "tf.data.make_initializable_iterator(dataset)", "tf.data.make_one_shot_iterator": "tf.data.make_one_shot_iterator(dataset)", "tf.debugging.assert_all_finite": "tf.debugging.assert_all_finite(t,msg,name=None)", "tf.math.is_finite": "tf.math.is_finite(x,name=None)", "tf.math.is_inf": "tf.math.is_inf(x,name=None)", "tf.math.is_nan": "tf.math.is_nan(x,name=None)", "tf.math.is_non_decreasing": "tf.math.is_non_decreasing(x,name=None)", "tf.debugging.is_numeric_tensor": "tf.debugging.is_numeric_tensor(tensor)", "tf.math.is_strictly_increasing": "tf.math.is_strictly_increasing(x,name=None)", "tf.io.decode_base64": "tf.io.decode_base64(input,name=None)", "tf.io.decode_compressed": "tf.io.decode_compressed(bytes,compression_type='',name=None)", "tf.io.decode_csv": "tf.io.decode_csv(records,record_defaults,field_delim=',',use_quote_delim=True,name=None,na_value='',select_cols=None)", "tf.io.decode_json_example": "tf.io.decode_json_example(json_examples,name=None)", "tf.io.decode_raw": "tf.io.decode_raw(bytes,out_type,little_endian=True,name=None)", "tf.delete_session_tensor": "tf.delete_session_tensor(handle,name=None)", "tf.nn.depth_to_space": "tf.nn.depth_to_space(input,block_size,name=None,data_format='NHWC')", "tf.quantization.dequantize": "tf.quantization.dequantize(input,min_range,max_range,mode='MIN_COMBINED',name=None)", "tf.io.deserialize_many_sparse": "tf.io.deserialize_many_sparse(serialized_sparse,dtype,rank=None,name=None)", "tf.device": "tf.device(device_name_or_function)", "tf.linalg.tensor_diag": "tf.linalg.tensor_diag(diagonal,name=None)", "tf.linalg.tensor_diag_part": "tf.linalg.tensor_diag_part(input,name=None)", "tf.math.digamma": "tf.math.digamma(x,name=None)", "tf.dimension_at_index": "tf.dimension_at_index(shape,index)", "tf.dimension_value": "tf.dimension_value(dimension)", "tf.disable_eager_execution": "tf.disable_eager_execution()", "tf.disable_resource_variables": "tf.disable_resource_variables()", "tf.disable_v2_behavior": "tf.disable_v2_behavior()", "tf.disable_v2_tensorshape": "tf.disable_v2_tensorshape()", "tf.div": "tf.div(x,y,name=None)", "tf.div_no_nan": "tf.div_no_nan(x,y,name=None)", "tf.math.divide": "tf.math.divide(x,y,name=None)", "tf.dtypes.saturate_cast": "tf.dtypes.saturate_cast(value,dtype,name=None)", "tf.dynamic_partition": "tf.dynamic_partition(data,partitions,num_partitions,name=None)", "tf.dynamic_stitch": "tf.dynamic_stitch(indices,data,name=None)", "tf.edit_distance": "tf.edit_distance(hypothesis,truth,normalize=True,name='edit_distance')", "tf.einsum": "tf.einsum(equation,*inputs,**kwargs)", "tf.enable_resource_variables": "tf.enable_resource_variables()", "tf.enable_v2_behavior": "tf.enable_v2_behavior()", "tf.enable_v2_tensorshape": "tf.enable_v2_tensorshape()", "tf.io.encode_base64": "tf.io.encode_base64(input,pad=False,name=None)", "tf.ensure_shape": "tf.ensure_shape(x,shape,name=None)", "tf.math.equal": "tf.math.equal(x,y,name=None)", "tf.math.erf": "tf.math.erf(x,name=None)", "tf.math.erfc": "tf.math.erfc(x,name=None)", "tf.errors.error_code_from_exception_type": "tf.errors.error_code_from_exception_type(cls)", "tf.errors.exception_type_from_error_code": "tf.errors.exception_type_from_error_code(error_code)", "tf.estimator.add_metrics": "tf.estimator.add_metrics(estimator,metric_fn)", "tf.estimator.classifier_parse_example_spec": "tf.estimator.classifier_parse_example_spec(feature_columns,label_key,label_dtype=tf.dtypes.int64,label_default=None,weight_column=None)", "tf.estimator.experimental.call_logit_fn": "tf.estimator.experimental.call_logit_fn(logit_fn,features,mode,params,config)", "tf.estimator.experimental.make_early_stopping_hook": "tf.estimator.experimental.make_early_stopping_hook(estimator,should_stop_fn,run_every_secs=60,run_every_steps=None)", "tf.estimator.experimental.make_stop_at_checkpoint_step_hook": "tf.estimator.experimental.make_stop_at_checkpoint_step_hook(estimator,last_step,wait_after_file_check_secs=30)", "tf.estimator.experimental.stop_if_higher_hook": "tf.estimator.experimental.stop_if_higher_hook(estimator,metric_name,threshold,eval_dir=None,min_steps=0,run_every_secs=60,run_every_steps=None)", "tf.estimator.export.build_parsing_serving_input_receiver_fn": "tf.estimator.export.build_parsing_serving_input_receiver_fn(feature_spec,default_batch_size=None)", "tf.estimator.export.build_raw_serving_input_receiver_fn": "tf.estimator.export.build_raw_serving_input_receiver_fn(features,default_batch_size=None)", "tf.estimator.inputs.numpy_input_fn": "tf.estimator.inputs.numpy_input_fn(x,y=None,batch_size=128,num_epochs=1,shuffle=None,queue_capacity=1000,num_threads=1)", "tf.estimator.inputs.pandas_input_fn": "tf.estimator.inputs.pandas_input_fn(x,y=None,batch_size=128,num_epochs=1,shuffle=None,queue_capacity=1000,num_threads=1,target_column='target')", "tf.estimator.regressor_parse_example_spec": "tf.estimator.regressor_parse_example_spec(feature_columns,label_key,label_dtype=tf.dtypes.float32,label_default=None,label_dimension=1,weight_column=None)", "tf.estimator.train_and_evaluate": "tf.estimator.train_and_evaluate(estimator,train_spec,eval_spec)", "tf.math.exp": "tf.math.exp(x,name=None)", "tf.expand_dims": "tf.expand_dims(input,axis=None,name=None,dim=None)", "tf.experimental.function_executor_type": "tf.experimental.function_executor_type(executor_type)", "tf.math.expm1": "tf.math.expm1(x,name=None)", "tf.image.extract_image_patches": "tf.image.extract_image_patches(images,ksizes,strides,rates,padding,name=None)", "tf.extract_volume_patches": "tf.extract_volume_patches(input,ksizes,strides,padding,name=None)", "tf.eye": "tf.eye(num_rows,num_columns=None,batch_shape=None,dtype=tf.dtypes.float32,name=None)", "tf.quantization.fake_quant_with_min_max_args": "tf.quantization.fake_quant_with_min_max_args(inputs,min=-6,max=6,num_bits=8,narrow_range=False,name=None)", "tf.quantization.fake_quant_with_min_max_args_gradient": "tf.quantization.fake_quant_with_min_max_args_gradient(gradients,inputs,min=-6,max=6,num_bits=8,narrow_range=False,name=None)", "tf.quantization.fake_quant_with_min_max_vars": "tf.quantization.fake_quant_with_min_max_vars(inputs,min,max,num_bits=8,narrow_range=False,name=None)", "tf.quantization.fake_quant_with_min_max_vars_gradient": "tf.quantization.fake_quant_with_min_max_vars_gradient(gradients,inputs,min,max,num_bits=8,narrow_range=False,name=None)", "tf.quantization.fake_quant_with_min_max_vars_per_channel": "tf.quantization.fake_quant_with_min_max_vars_per_channel(inputs,min,max,num_bits=8,narrow_range=False,name=None)", "tf.quantization.fake_quant_with_min_max_vars_per_channel_gradient": "tf.quantization.fake_quant_with_min_max_vars_per_channel_gradient(gradients,inputs,min,max,num_bits=8,narrow_range=False,name=None)", "tf.feature_column.bucketized_column": "tf.feature_column.bucketized_column(source_column,boundaries)", "tf.feature_column.categorical_column_with_hash_bucket": "tf.feature_column.categorical_column_with_hash_bucket(key,hash_bucket_size,dtype=tf.dtypes.string)", "tf.feature_column.categorical_column_with_identity": "tf.feature_column.categorical_column_with_identity(key,num_buckets,default_value=None)", "tf.feature_column.categorical_column_with_vocabulary_file": "tf.feature_column.categorical_column_with_vocabulary_file(key,vocabulary_file,vocabulary_size=None,num_oov_buckets=0,default_value=None,dtype=tf.dtypes.string)", "tf.feature_column.categorical_column_with_vocabulary_list": "tf.feature_column.categorical_column_with_vocabulary_list(key,vocabulary_list,dtype=None,default_value=-1,num_oov_buckets=0)", "tf.feature_column.crossed_column": "tf.feature_column.crossed_column(keys,hash_bucket_size,hash_key=None)", "tf.feature_column.embedding_column": "tf.feature_column.embedding_column(categorical_column,dimension,combiner='mean',initializer=None,ckpt_to_load_from=None,tensor_name_in_ckpt=None,max_norm=None,trainable=True)", "tf.feature_column.indicator_column": "tf.feature_column.indicator_column(categorical_column)", "tf.feature_column.input_layer": "tf.feature_column.input_layer(features,feature_columns,weight_collections=None,trainable=True,cols_to_vars=None,cols_to_output_tensors=None)", "tf.feature_column.linear_model": "tf.feature_column.linear_model(features,feature_columns,units=1,sparse_combiner='sum',weight_collections=None,trainable=True,cols_to_vars=None)", "tf.feature_column.make_parse_example_spec": "tf.feature_column.make_parse_example_spec(feature_columns)", "tf.feature_column.numeric_column": "tf.feature_column.numeric_column(key,shape=(1,),default_value=None,dtype=tf.dtypes.float32,normalizer_fn=None)", "tf.feature_column.shared_embedding_columns": "tf.feature_column.shared_embedding_columns(categorical_columns,dimension,combiner='mean',initializer=None,shared_embedding_collection_name=None,ckpt_to_load_from=None,tensor_name_in_ckpt=None,max_norm=None,trainable=True)", "tf.feature_column.weighted_categorical_column": "tf.feature_column.weighted_categorical_column(categorical_column,weight_feature_key,dtype=tf.dtypes.float32)", "tf.signal.fft": "tf.signal.fft(input,name=None)", "tf.signal.fft2d": "tf.signal.fft2d(input,name=None)", "tf.signal.fft3d": "tf.signal.fft3d(input,name=None)", "tf.fill": "tf.fill(dims,value,name=None)", "tf.fixed_size_partitioner": "tf.fixed_size_partitioner(num_shards,axis=0)", "tf.math.floor": "tf.math.floor(x,name=None)", "tf.floor_div": "tf.floor_div(x,y,name=None)", "tf.math.floordiv": "tf.math.floordiv(x,y,name=None)", "tf.floormod": "tf.floormod(x,y,name=None)", "tf.foldl": "tf.foldl(fn,elems,initializer=None,parallel_iterations=10,back_prop=True,swap_memory=False,name=None)", "tf.foldr": "tf.foldr(fn,elems,initializer=None,parallel_iterations=10,back_prop=True,swap_memory=False,name=None)", "tf.gather": "tf.gather(params,indices,validate_indices=None,name=None,axis=0)", "tf.gather_nd": "tf.gather_nd(params,indices,name=None)", "tf.get_collection": "tf.get_collection(key,scope=None)", "tf.get_collection_ref": "tf.get_collection_ref(key)", "tf.get_default_graph": "tf.get_default_graph()", "tf.get_default_session": "tf.get_default_session()", "tf.get_local_variable": "tf.get_local_variable(name,shape=None,dtype=None,initializer=None,regularizer=None,trainable=False,collections=None,caching_device=None,partitioner=None,validate_shape=True,use_resource=None,custom_getter=None,constraint=None,synchronization=tf.VariableSynchronization.AUTO,aggregation=tf.VariableAggregation.NONE)", "tf.get_logger": "tf.get_logger()", "tf.random.get_seed": "tf.random.get_seed(op_seed)", "tf.get_session_handle": "tf.get_session_handle(data,name=None)", "tf.get_session_tensor": "tf.get_session_tensor(handle,dtype,name=None)", "tf.get_variable": "tf.get_variable(name,shape=None,dtype=None,initializer=None,regularizer=None,trainable=None,collections=None,caching_device=None,partitioner=None,validate_shape=True,use_resource=None,custom_getter=None,constraint=None,synchronization=tf.VariableSynchronization.AUTO,aggregation=tf.VariableAggregation.NONE)", "tf.get_variable_scope": "tf.get_variable_scope()", "tf.gfile.Copy": "tf.gfile.Copy(oldpath,newpath,overwrite=False)", "tf.gfile.DeleteRecursively": "tf.gfile.DeleteRecursively(dirname)", "tf.gfile.Exists": "tf.gfile.Exists(filename)", "tf.gfile.Glob": "tf.gfile.Glob(filename)", "tf.gfile.IsDirectory": "tf.gfile.IsDirectory(dirname)", "tf.gfile.ListDirectory": "tf.gfile.ListDirectory(dirname)", "tf.gfile.MakeDirs": "tf.gfile.MakeDirs(dirname)", "tf.gfile.MkDir": "tf.gfile.MkDir(dirname)", "tf.gfile.Remove": "tf.gfile.Remove(filename)", "tf.gfile.Rename": "tf.gfile.Rename(oldname,newname,overwrite=False)", "tf.gfile.Stat": "tf.gfile.Stat(filename)", "tf.gfile.Walk": "tf.gfile.Walk(top,in_order=True)", "tf.linalg.global_norm": "tf.linalg.global_norm(t_list,name=None)", "tf.global_variables": "tf.global_variables(scope=None)", "tf.initializers.global_variables": "tf.initializers.global_variables()", "tf.gradients": "tf.gradients(ys,xs,grad_ys=None,name='gradients',colocate_gradients_with_ops=False,gate_gradients=False,aggregation_method=None,stop_gradients=None,unconnected_gradients=tf.UnconnectedGradients.NONE)", "tf.graph_util.convert_variables_to_constants": "tf.graph_util.convert_variables_to_constants(sess,input_graph_def,output_node_names,variable_names_whitelist=None,variable_names_blacklist=None)", "tf.graph_util.extract_sub_graph": "tf.graph_util.extract_sub_graph(graph_def,dest_nodes)", "tf.graph_util.import_graph_def": "tf.graph_util.import_graph_def(graph_def,input_map=None,return_elements=None,name=None,op_dict=None,producer_op_list=None)", "tf.graph_util.must_run_on_cpu": "tf.graph_util.must_run_on_cpu(node,pin_variables_on_cpu=False)", "tf.graph_util.remove_training_nodes": "tf.graph_util.remove_training_nodes(input_graph,protected_nodes=None)", "tf.graph_util.tensor_shape_from_node_def_name": "tf.graph_util.tensor_shape_from_node_def_name(graph,input_name)", "tf.math.greater": "tf.math.greater(x,y,name=None)", "tf.math.greater_equal": "tf.math.greater_equal(x,y,name=None)", "tf.group": "tf.group(*inputs,**kwargs)", "tf.guarantee_const": "tf.guarantee_const(input,name=None)", "tf.hessians": "tf.hessians(ys,xs,name='hessians',colocate_gradients_with_ops=False,gate_gradients=False,aggregation_method=None)", "tf.histogram_fixed_width": "tf.histogram_fixed_width(values,value_range,nbins=100,dtype=tf.dtypes.int32,name=None)", "tf.histogram_fixed_width_bins": "tf.histogram_fixed_width_bins(values,value_range,nbins=100,dtype=tf.dtypes.int32,name=None)", "tf.identity": "tf.identity(input,name=None)", "tf.identity_n": "tf.identity_n(input,name=None)", "tf.signal.ifft": "tf.signal.ifft(input,name=None)", "tf.signal.ifft2d": "tf.signal.ifft2d(input,name=None)", "tf.signal.ifft3d": "tf.signal.ifft3d(input,name=None)", "tf.math.igamma": "tf.math.igamma(a,x,name=None)", "tf.math.igammac": "tf.math.igammac(a,x,name=None)", "tf.math.imag": "tf.math.imag(input,name=None)", "tf.image.adjust_brightness": "tf.image.adjust_brightness(image,delta)", "tf.image.adjust_contrast": "tf.image.adjust_contrast(images,contrast_factor)", "tf.image.adjust_gamma": "tf.image.adjust_gamma(image,gamma=1,gain=1)", "tf.image.adjust_hue": "tf.image.adjust_hue(image,delta,name=None)", "tf.image.adjust_jpeg_quality": "tf.image.adjust_jpeg_quality(image,jpeg_quality,name=None)", "tf.image.adjust_saturation": "tf.image.adjust_saturation(image,saturation_factor,name=None)", "tf.image.central_crop": "tf.image.central_crop(image,central_fraction)", "tf.image.convert_image_dtype": "tf.image.convert_image_dtype(image,dtype,saturate=False,name=None)", "tf.image.crop_and_resize": "tf.image.crop_and_resize(image,boxes,box_ind,crop_size,method='bilinear',extrapolation_value=0,name=None)", "tf.image.crop_to_bounding_box": "tf.image.crop_to_bounding_box(image,offset_height,offset_width,target_height,target_width)", "tf.io.decode_and_crop_jpeg": "tf.io.decode_and_crop_jpeg(contents,crop_window,channels=0,ratio=1,fancy_upscaling=True,try_recover_truncated=False,acceptable_fraction=1,dct_method='',name=None)", "tf.io.decode_bmp": "tf.io.decode_bmp(contents,channels=0,name=None)", "tf.io.decode_gif": "tf.io.decode_gif(contents,name=None)", "tf.io.decode_image": "tf.io.decode_image(contents,channels=None,dtype=tf.dtypes.uint8,name=None)", "tf.io.decode_jpeg": "tf.io.decode_jpeg(contents,channels=0,ratio=1,fancy_upscaling=True,try_recover_truncated=False,acceptable_fraction=1,dct_method='',name=None)", "tf.io.decode_png": "tf.io.decode_png(contents,channels=0,dtype=tf.dtypes.uint8,name=None)", "tf.image.draw_bounding_boxes": "tf.image.draw_bounding_boxes(images,boxes,name=None)", "tf.io.encode_jpeg": "tf.io.encode_jpeg(image,format='',quality=95,progressive=False,optimize_size=False,chroma_downsampling=True,density_unit='in',x_density=300,y_density=300,xmp_metadata='',name=None)", "tf.image.encode_png": "tf.image.encode_png(image,compression=-1,name=None)", "tf.image.extract_glimpse": "tf.image.extract_glimpse(input,size,offsets,centered=True,normalized=True,uniform_noise=True,name=None)", "tf.io.extract_jpeg_shape": "tf.io.extract_jpeg_shape(contents,output_type=tf.dtypes.int32,name=None)", "tf.image.flip_left_right": "tf.image.flip_left_right(image)", "tf.image.flip_up_down": "tf.image.flip_up_down(image)", "tf.image.grayscale_to_rgb": "tf.image.grayscale_to_rgb(images,name=None)", "tf.image.hsv_to_rgb": "tf.image.hsv_to_rgb(images,name=None)", "tf.image.image_gradients": "tf.image.image_gradients(image)", "tf.io.is_jpeg": "tf.io.is_jpeg(contents,name=None)", "tf.image.non_max_suppression": "tf.image.non_max_suppression(boxes,scores,max_output_size,iou_threshold=0.5,score_threshold=float('-inf'),name=None)", "tf.image.non_max_suppression_overlaps": "tf.image.non_max_suppression_overlaps(overlaps,scores,max_output_size,overlap_threshold=0.5,score_threshold=float('-inf'),name=None)", "tf.image.non_max_suppression_padded": "tf.image.non_max_suppression_padded(boxes,scores,max_output_size,iou_threshold=0.5,score_threshold=float('-inf'),pad_to_max_output_size=False,name=None)", "tf.image.pad_to_bounding_box": "tf.image.pad_to_bounding_box(image,offset_height,offset_width,target_height,target_width)", "tf.image.per_image_standardization": "tf.image.per_image_standardization(image)", "tf.image.psnr": "tf.image.psnr(a,b,max_val,name=None)", "tf.image.random_brightness": "tf.image.random_brightness(image,max_delta,seed=None)", "tf.image.random_contrast": "tf.image.random_contrast(image,lower,upper,seed=None)", "tf.image.random_crop": "tf.image.random_crop(value,size,seed=None,name=None)", "tf.image.random_flip_left_right": "tf.image.random_flip_left_right(image,seed=None)", "tf.image.random_flip_up_down": "tf.image.random_flip_up_down(image,seed=None)", "tf.image.random_hue": "tf.image.random_hue(image,max_delta,seed=None)", "tf.image.random_jpeg_quality": "tf.image.random_jpeg_quality(image,min_jpeg_quality,max_jpeg_quality,seed=None)", "tf.image.random_saturation": "tf.image.random_saturation(image,lower,upper,seed=None)", "tf.image.resize_images": "tf.image.resize_images(images,size,method=ResizeMethod.BILINEAR,align_corners=False,preserve_aspect_ratio=False)", "tf.image.resize_area": "tf.image.resize_area(images,size,align_corners=False,name=None)", "tf.image.resize_bicubic": "tf.image.resize_bicubic(images,size,align_corners=False,name=None)", "tf.image.resize_bilinear": "tf.image.resize_bilinear(images,size,align_corners=False,name=None)", "tf.image.resize_image_with_crop_or_pad": "tf.image.resize_image_with_crop_or_pad(image,target_height,target_width)", "tf.image.resize_image_with_pad": "tf.image.resize_image_with_pad(image,target_height,target_width,method=ResizeMethod.BILINEAR)", "tf.image.resize_nearest_neighbor": "tf.image.resize_nearest_neighbor(images,size,align_corners=False,name=None)", "tf.image.rgb_to_grayscale": "tf.image.rgb_to_grayscale(images,name=None)", "tf.image.rgb_to_hsv": "tf.image.rgb_to_hsv(images,name=None)", "tf.image.rgb_to_yiq": "tf.image.rgb_to_yiq(images)", "tf.image.rgb_to_yuv": "tf.image.rgb_to_yuv(images)", "tf.image.rot90": "tf.image.rot90(image,k=1,name=None)", "tf.image.sample_distorted_bounding_box": "tf.image.sample_distorted_bounding_box(image_size,bounding_boxes,seed=None,seed2=None,min_object_covered=0.1,aspect_ratio_range=None,area_range=None,max_attempts=None,use_image_if_no_bounding_boxes=None,name=None)", "tf.image.sobel_edges": "tf.image.sobel_edges(image)", "tf.image.ssim": "tf.image.ssim(img1,img2,max_val)", "tf.image.ssim_multiscale": "tf.image.ssim_multiscale(img1,img2,max_val,power_factors=_MSSSIM_WEIGHTS)", "tf.image.total_variation": "tf.image.total_variation(images,name=None)", "tf.image.transpose": "tf.image.transpose(image)", "tf.image.yiq_to_rgb": "tf.image.yiq_to_rgb(images)", "tf.image.yuv_to_rgb": "tf.image.yuv_to_rgb(images)", "tf.init_scope": "tf.init_scope()", "tf.initialize_all_tables": "tf.initialize_all_tables(name='init_all_tables')", "tf.initialize_all_variables": "tf.initialize_all_variables()", "tf.initialize_local_variables": "tf.initialize_local_variables()", "tf.initialize_variables": "tf.initialize_variables(var_list,name='init')", "tf.keras.initializers.he_normal": "tf.keras.initializers.he_normal(seed=None)", "tf.keras.initializers.he_uniform": "tf.keras.initializers.he_uniform(seed=None)", "tf.keras.initializers.lecun_normal": "tf.keras.initializers.lecun_normal(seed=None)", "tf.keras.initializers.lecun_uniform": "tf.keras.initializers.lecun_uniform(seed=None)", "tf.initializers.local_variables": "tf.initializers.local_variables()", "tf.initializers.tables_initializer": "tf.initializers.tables_initializer(name='init_all_tables')", "tf.initializers.variables": "tf.initializers.variables(var_list,name='init')", "tf.math.invert_permutation": "tf.math.invert_permutation(x,name=None)", "tf.io.gfile.copy": "tf.io.gfile.copy(src,dst,overwrite=False)", "tf.io.gfile.exists": "tf.io.gfile.exists(path)", "tf.io.gfile.glob": "tf.io.gfile.glob(pattern)", "tf.io.gfile.isdir": "tf.io.gfile.isdir(path)", "tf.io.gfile.listdir": "tf.io.gfile.listdir(path)", "tf.io.gfile.makedirs": "tf.io.gfile.makedirs(path)", "tf.io.gfile.mkdir": "tf.io.gfile.mkdir(path)", "tf.io.gfile.remove": "tf.io.gfile.remove(path)", "tf.io.gfile.rename": "tf.io.gfile.rename(src,dst,overwrite=False)", "tf.io.gfile.rmtree": "tf.io.gfile.rmtree(path)", "tf.io.gfile.stat": "tf.io.gfile.stat(path)", "tf.io.gfile.walk": "tf.io.gfile.walk(top,topdown=True,onerror=None)", "tf.io.match_filenames_once": "tf.io.match_filenames_once(pattern,name=None)", "tf.io.matching_files": "tf.io.matching_files(pattern,name=None)", "tf.io.parse_example": "tf.io.parse_example(serialized,features,name=None,example_names=None)", "tf.io.parse_sequence_example": "tf.io.parse_sequence_example(serialized,context_features=None,sequence_features=None,example_names=None,name=None)", "tf.io.parse_single_example": "tf.io.parse_single_example(serialized,features,name=None,example_names=None)", "tf.io.parse_single_sequence_example": "tf.io.parse_single_sequence_example(serialized,context_features=None,sequence_features=None,example_name=None,name=None)", "tf.io.parse_tensor": "tf.io.parse_tensor(serialized,out_type,name=None)", "tf.io.read_file": "tf.io.read_file(filename,name=None)", "tf.io.serialize_many_sparse": "tf.io.serialize_many_sparse(sp_input,name=None,out_type=tf.dtypes.string)", "tf.io.serialize_sparse": "tf.io.serialize_sparse(sp_input,name=None,out_type=tf.dtypes.string)", "tf.io.serialize_tensor": "tf.io.serialize_tensor(tensor,name=None)", "tf.io.tf_record_iterator": "tf.io.tf_record_iterator(path,options=None)", "tf.io.write_file": "tf.io.write_file(filename,contents,name=None)", "tf.io.write_graph": "tf.io.write_graph(graph_or_graph_def,logdir,name,as_text=True)", "tf.is_variable_initialized": "tf.is_variable_initialized(variable)", "tf.keras.layers.Input": "tf.keras.layers.Input(shape=None,batch_size=None,name=None,dtype=None,sparse=False,tensor=None,**kwargs)", "tf.keras.activations.deserialize": "tf.keras.activations.deserialize(name,custom_objects=None)", "tf.keras.activations.elu": "tf.keras.activations.elu(x,alpha=1.0)", "tf.keras.activations.exponential": "tf.keras.activations.exponential(x)", "tf.keras.activations.get": "tf.keras.activations.get(identifier)", "tf.keras.activations.hard_sigmoid": "tf.keras.activations.hard_sigmoid(x)", "tf.keras.activations.linear": "tf.keras.activations.linear(x)", "tf.keras.activations.relu": "tf.keras.activations.relu(x,alpha=0.0,max_value=None,threshold=0)", "tf.keras.activations.selu": "tf.keras.activations.selu(x)", "tf.keras.activations.serialize": "tf.keras.activations.serialize(activation)", "tf.keras.activations.sigmoid": "tf.keras.activations.sigmoid(x)", "tf.keras.activations.softmax": "tf.keras.activations.softmax(x,axis=-1)", "tf.keras.activations.softplus": "tf.keras.activations.softplus(x)", "tf.keras.activations.softsign": "tf.keras.activations.softsign(x)", "tf.keras.activations.tanh": "tf.keras.activations.tanh(x)", "tf.keras.backend.abs": "tf.keras.backend.abs(x)", "tf.keras.backend.all": "tf.keras.backend.all(x,axis=None,keepdims=False)", "tf.keras.backend.any": "tf.keras.backend.any(x,axis=None,keepdims=False)", "tf.keras.backend.arange": "tf.keras.backend.arange(start,stop=None,step=1,dtype='int32')", "tf.keras.backend.argmax": "tf.keras.backend.argmax(x,axis=-1)", "tf.keras.backend.argmin": "tf.keras.backend.argmin(x,axis=-1)", "tf.keras.backend.backend": "tf.keras.backend.backend()", "tf.keras.backend.batch_dot": "tf.keras.backend.batch_dot(x,y,axes=None)", "tf.keras.backend.batch_flatten": "tf.keras.backend.batch_flatten(x)", "tf.keras.backend.batch_get_value": "tf.keras.backend.batch_get_value(tensors)", "tf.keras.backend.batch_normalization": "tf.keras.backend.batch_normalization(x,mean,var,beta,gamma,axis=-1,epsilon=0.001)", "tf.keras.backend.batch_set_value": "tf.keras.backend.batch_set_value(tuples)", "tf.keras.backend.bias_add": "tf.keras.backend.bias_add(x,bias,data_format=None)", "tf.keras.backend.binary_crossentropy": "tf.keras.backend.binary_crossentropy(target,output,from_logits=False)", "tf.keras.backend.cast": "tf.keras.backend.cast(x,dtype)", "tf.keras.backend.cast_to_floatx": "tf.keras.backend.cast_to_floatx(x)", "tf.keras.backend.categorical_crossentropy": "tf.keras.backend.categorical_crossentropy(target,output,from_logits=False,axis=-1)", "tf.keras.backend.clear_session": "tf.keras.backend.clear_session()", "tf.keras.backend.clip": "tf.keras.backend.clip(x,min_value,max_value)", "tf.keras.backend.concatenate": "tf.keras.backend.concatenate(tensors,axis=-1)", "tf.keras.backend.constant": "tf.keras.backend.constant(value,dtype=None,shape=None,name=None)", "tf.keras.backend.conv1d": "tf.keras.backend.conv1d(x,kernel,strides=1,padding='valid',data_format=None,dilation_rate=1)", "tf.keras.backend.conv2d": "tf.keras.backend.conv2d(x,kernel,strides=(1,1),padding='valid',data_format=None,dilation_rate=(1,1))", "tf.keras.backend.conv2d_transpose": "tf.keras.backend.conv2d_transpose(x,kernel,output_shape,strides=(1,1),padding='valid',data_format=None,dilation_rate=(1,1))", "tf.keras.backend.conv3d": "tf.keras.backend.conv3d(x,kernel,strides=(1,1,1),padding='valid',data_format=None,dilation_rate=(1,1,1))", "tf.keras.backend.cos": "tf.keras.backend.cos(x)", "tf.keras.backend.count_params": "tf.keras.backend.count_params(x)", "tf.keras.backend.ctc_batch_cost": "tf.keras.backend.ctc_batch_cost(y_true,y_pred,input_length,label_length)", "tf.keras.backend.ctc_decode": "tf.keras.backend.ctc_decode(y_pred,input_length,greedy=True,beam_width=100,top_paths=1)", "tf.keras.backend.ctc_label_dense_to_sparse": "tf.keras.backend.ctc_label_dense_to_sparse(labels,label_lengths)", "tf.keras.backend.dot": "tf.keras.backend.dot(x,y)", "tf.keras.backend.dropout": "tf.keras.backend.dropout(x,level,noise_shape=None,seed=None)", "tf.keras.backend.dtype": "tf.keras.backend.dtype(x)", "tf.keras.backend.elu": "tf.keras.backend.elu(x,alpha=1.0)", "tf.keras.backend.epsilon": "tf.keras.backend.epsilon()", "tf.keras.backend.equal": "tf.keras.backend.equal(x,y)", "tf.keras.backend.eval": "tf.keras.backend.eval(x)", "tf.keras.backend.exp": "tf.keras.backend.exp(x)", "tf.keras.backend.expand_dims": "tf.keras.backend.expand_dims(x,axis=-1)", "tf.keras.backend.eye": "tf.keras.backend.eye(size,dtype=None,name=None)", "tf.keras.backend.flatten": "tf.keras.backend.flatten(x)", "tf.keras.backend.floatx": "tf.keras.backend.floatx()", "tf.keras.backend.foldl": "tf.keras.backend.foldl(fn,elems,initializer=None,name=None)", "tf.keras.backend.foldr": "tf.keras.backend.foldr(fn,elems,initializer=None,name=None)", "tf.keras.backend.function": "tf.keras.backend.function(inputs,outputs,updates=None,name=None,**kwargs)", "tf.keras.backend.gather": "tf.keras.backend.gather(reference,indices)", "tf.keras.backend.get_session": "tf.keras.backend.get_session()", "tf.keras.backend.get_uid": "tf.keras.backend.get_uid(prefix='')", "tf.keras.backend.get_value": "tf.keras.backend.get_value(x)", "tf.keras.backend.gradients": "tf.keras.backend.gradients(loss,variables)", "tf.keras.backend.greater": "tf.keras.backend.greater(x,y)", "tf.keras.backend.greater_equal": "tf.keras.backend.greater_equal(x,y)", "tf.keras.backend.hard_sigmoid": "tf.keras.backend.hard_sigmoid(x)", "tf.keras.backend.image_data_format": "tf.keras.backend.image_data_format()", "tf.keras.backend.in_test_phase": "tf.keras.backend.in_test_phase(x,alt,training=None)", "tf.keras.backend.in_top_k": "tf.keras.backend.in_top_k(predictions,targets,k)", "tf.keras.backend.in_train_phase": "tf.keras.backend.in_train_phase(x,alt,training=None)", "tf.keras.backend.int_shape": "tf.keras.backend.int_shape(x)", "tf.keras.backend.is_sparse": "tf.keras.backend.is_sparse(tensor)", "tf.keras.backend.l2_normalize": "tf.keras.backend.l2_normalize(x,axis=None)", "tf.keras.backend.learning_phase": "tf.keras.backend.learning_phase()", "tf.keras.backend.less": "tf.keras.backend.less(x,y)", "tf.keras.backend.less_equal": "tf.keras.backend.less_equal(x,y)", "tf.keras.backend.log": "tf.keras.backend.log(x)", "tf.keras.backend.manual_variable_initialization": "tf.keras.backend.manual_variable_initialization(value)", "tf.keras.backend.map_fn": "tf.keras.backend.map_fn(fn,elems,name=None,dtype=None)", "tf.keras.backend.max": "tf.keras.backend.max(x,axis=None,keepdims=False)", "tf.keras.backend.maximum": "tf.keras.backend.maximum(x,y)", "tf.keras.backend.mean": "tf.keras.backend.mean(x,axis=None,keepdims=False)", "tf.keras.backend.min": "tf.keras.backend.min(x,axis=None,keepdims=False)", "tf.keras.backend.minimum": "tf.keras.backend.minimum(x,y)", "tf.keras.backend.moving_average_update": "tf.keras.backend.moving_average_update(x,value,momentum)", "tf.keras.backend.ndim": "tf.keras.backend.ndim(x)", "tf.keras.backend.normalize_batch_in_training": "tf.keras.backend.normalize_batch_in_training(x,gamma,beta,reduction_axes,epsilon=0.001)", "tf.keras.backend.not_equal": "tf.keras.backend.not_equal(x,y)", "tf.keras.backend.one_hot": "tf.keras.backend.one_hot(indices,num_classes)", "tf.keras.backend.ones": "tf.keras.backend.ones(shape,dtype=None,name=None)", "tf.keras.backend.ones_like": "tf.keras.backend.ones_like(x,dtype=None,name=None)", "tf.keras.backend.permute_dimensions": "tf.keras.backend.permute_dimensions(x,pattern)", "tf.keras.backend.placeholder": "tf.keras.backend.placeholder(shape=None,ndim=None,dtype=None,sparse=False,name=None)", "tf.keras.backend.pool2d": "tf.keras.backend.pool2d(x,pool_size,strides=(1,1),padding='valid',data_format=None,pool_mode='max')", "tf.keras.backend.pool3d": "tf.keras.backend.pool3d(x,pool_size,strides=(1,1,1),padding='valid',data_format=None,pool_mode='max')", "tf.keras.backend.pow": "tf.keras.backend.pow(x,a)", "tf.keras.backend.print_tensor": "tf.keras.backend.print_tensor(x,message='')", "tf.keras.backend.prod": "tf.keras.backend.prod(x,axis=None,keepdims=False)", "tf.keras.backend.random_binomial": "tf.keras.backend.random_binomial(shape,p=0.0,dtype=None,seed=None)", "tf.keras.backend.random_normal": "tf.keras.backend.random_normal(shape,mean=0.0,stddev=1.0,dtype=None,seed=None)", "tf.keras.backend.random_normal_variable": "tf.keras.backend.random_normal_variable(shape,mean,scale,dtype=None,name=None,seed=None)", "tf.keras.backend.random_uniform": "tf.keras.backend.random_uniform(shape,minval=0.0,maxval=1.0,dtype=None,seed=None)", "tf.keras.backend.random_uniform_variable": "tf.keras.backend.random_uniform_variable(shape,low,high,dtype=None,name=None,seed=None)", "tf.keras.backend.relu": "tf.keras.backend.relu(x,alpha=0.0,max_value=None,threshold=0)", "tf.keras.backend.repeat": "tf.keras.backend.repeat(x,n)", "tf.keras.backend.repeat_elements": "tf.keras.backend.repeat_elements(x,rep,axis)", "tf.keras.backend.reset_uids": "tf.keras.backend.reset_uids()", "tf.keras.backend.reshape": "tf.keras.backend.reshape(x,shape)", "tf.keras.backend.resize_images": "tf.keras.backend.resize_images(x,height_factor,width_factor,data_format,interpolation='nearest')", "tf.keras.backend.resize_volumes": "tf.keras.backend.resize_volumes(x,depth_factor,height_factor,width_factor,data_format)", "tf.keras.backend.reverse": "tf.keras.backend.reverse(x,axes)", "tf.keras.backend.rnn": "tf.keras.backend.rnn(step_function,inputs,initial_states,go_backwards=False,mask=None,constants=None,unroll=False,input_length=None,time_major=False,zero_output_for_mask=False)", "tf.keras.backend.round": "tf.keras.backend.round(x)", "tf.keras.backend.separable_conv2d": "tf.keras.backend.separable_conv2d(x,depthwise_kernel,pointwise_kernel,strides=(1,1),padding='valid',data_format=None,dilation_rate=(1,1))", "tf.keras.backend.set_epsilon": "tf.keras.backend.set_epsilon(value)", "tf.keras.backend.set_floatx": "tf.keras.backend.set_floatx(value)", "tf.keras.backend.set_image_data_format": "tf.keras.backend.set_image_data_format(data_format)", "tf.keras.backend.set_learning_phase": "tf.keras.backend.set_learning_phase(value)", "tf.keras.backend.set_session": "tf.keras.backend.set_session(session)", "tf.keras.backend.set_value": "tf.keras.backend.set_value(x,value)", "tf.keras.backend.shape": "tf.keras.backend.shape(x)", "tf.keras.backend.sigmoid": "tf.keras.backend.sigmoid(x)", "tf.keras.backend.sign": "tf.keras.backend.sign(x)", "tf.keras.backend.sin": "tf.keras.backend.sin(x)", "tf.keras.backend.softmax": "tf.keras.backend.softmax(x,axis=-1)", "tf.keras.backend.softplus": "tf.keras.backend.softplus(x)", "tf.keras.backend.softsign": "tf.keras.backend.softsign(x)", "tf.keras.backend.sparse_categorical_crossentropy": "tf.keras.backend.sparse_categorical_crossentropy(target,output,from_logits=False,axis=-1)", "tf.keras.backend.spatial_2d_padding": "tf.keras.backend.spatial_2d_padding(x,padding=((1,1),(1,1)),data_format=None)", "tf.keras.backend.spatial_3d_padding": "tf.keras.backend.spatial_3d_padding(x,padding=((1,1),(1,1),(1,1)),data_format=None)", "tf.keras.backend.sqrt": "tf.keras.backend.sqrt(x)", "tf.keras.backend.square": "tf.keras.backend.square(x)", "tf.keras.backend.squeeze": "tf.keras.backend.squeeze(x,axis)", "tf.keras.backend.stack": "tf.keras.backend.stack(x,axis=0)", "tf.keras.backend.std": "tf.keras.backend.std(x,axis=None,keepdims=False)", "tf.keras.backend.stop_gradient": "tf.keras.backend.stop_gradient(variables)", "tf.keras.backend.sum": "tf.keras.backend.sum(x,axis=None,keepdims=False)", "tf.keras.backend.switch": "tf.keras.backend.switch(condition,then_expression,else_expression)", "tf.keras.backend.tanh": "tf.keras.backend.tanh(x)", "tf.keras.backend.temporal_padding": "tf.keras.backend.temporal_padding(x,padding=(1,1))", "tf.keras.backend.tile": "tf.keras.backend.tile(x,n)", "tf.keras.backend.to_dense": "tf.keras.backend.to_dense(tensor)", "tf.keras.backend.transpose": "tf.keras.backend.transpose(x)", "tf.keras.backend.truncated_normal": "tf.keras.backend.truncated_normal(shape,mean=0.0,stddev=1.0,dtype=None,seed=None)", "tf.keras.backend.update": "tf.keras.backend.update(x,new_x)", "tf.keras.backend.update_add": "tf.keras.backend.update_add(x,increment)", "tf.keras.backend.update_sub": "tf.keras.backend.update_sub(x,decrement)", "tf.keras.backend.var": "tf.keras.backend.var(x,axis=None,keepdims=False)", "tf.keras.backend.variable": "tf.keras.backend.variable(value,dtype=None,name=None,constraint=None)", "tf.keras.backend.zeros": "tf.keras.backend.zeros(shape,dtype=None,name=None)", "tf.keras.backend.zeros_like": "tf.keras.backend.zeros_like(x,dtype=None,name=None)", "tf.keras.constraints.deserialize": "tf.keras.constraints.deserialize(config,custom_objects=None)", "tf.keras.constraints.get": "tf.keras.constraints.get(identifier)", "tf.keras.constraints.serialize": "tf.keras.constraints.serialize(constraint)", "tf.keras.datasets.boston_housing.load_data": "tf.keras.datasets.boston_housing.load_data(path='boston_housing.npz',test_split=0.2,seed=113)", "tf.keras.datasets.cifar10.load_data": "tf.keras.datasets.cifar10.load_data()", "tf.keras.datasets.cifar100.load_data": "tf.keras.datasets.cifar100.load_data(label_mode='fine')", "tf.keras.datasets.fashion_mnist.load_data": "tf.keras.datasets.fashion_mnist.load_data()", "tf.keras.datasets.imdb.get_word_index": "tf.keras.datasets.imdb.get_word_index(path='imdb_word_index.json')", "tf.keras.datasets.imdb.load_data": "tf.keras.datasets.imdb.load_data(path='imdb.npz',num_words=None,skip_top=0,maxlen=None,seed=113,start_char=1,oov_char=2,index_from=3,**kwargs)", "tf.keras.datasets.mnist.load_data": "tf.keras.datasets.mnist.load_data(path='mnist.npz')", "tf.keras.datasets.reuters.get_word_index": "tf.keras.datasets.reuters.get_word_index(path='reuters_word_index.json')", "tf.keras.datasets.reuters.load_data": "tf.keras.datasets.reuters.load_data(path='reuters.npz',num_words=None,skip_top=0,maxlen=None,test_split=0.2,seed=113,start_char=1,oov_char=2,index_from=3,**kwargs)", "tf.keras.estimator.model_to_estimator": "tf.keras.estimator.model_to_estimator(keras_model=None,keras_model_path=None,custom_objects=None,model_dir=None,config=None)", "tf.keras.initializers.deserialize": "tf.keras.initializers.deserialize(config,custom_objects=None)", "tf.keras.initializers.get": "tf.keras.initializers.get(identifier)", "tf.keras.initializers.serialize": "tf.keras.initializers.serialize(initializer)", "tf.keras.layers.add": "tf.keras.layers.add(inputs,**kwargs)", "tf.keras.layers.average": "tf.keras.layers.average(inputs,**kwargs)", "tf.keras.layers.concatenate": "tf.keras.layers.concatenate(inputs,axis=-1,**kwargs)", "tf.keras.layers.dot": "tf.keras.layers.dot(inputs,axes,normalize=False,**kwargs)", "tf.keras.layers.maximum": "tf.keras.layers.maximum(inputs,**kwargs)", "tf.keras.layers.minimum": "tf.keras.layers.minimum(inputs,**kwargs)", "tf.keras.layers.multiply": "tf.keras.layers.multiply(inputs,**kwargs)", "tf.keras.layers.subtract": "tf.keras.layers.subtract(inputs,**kwargs)", "tf.keras.metrics.kullback_leibler_divergence": "tf.keras.metrics.kullback_leibler_divergence(y_true,y_pred)", "tf.keras.metrics.mean_absolute_error": "tf.keras.metrics.mean_absolute_error(y_true,y_pred)", "tf.keras.metrics.mean_absolute_percentage_error": "tf.keras.metrics.mean_absolute_percentage_error(y_true,y_pred)", "tf.keras.metrics.mean_squared_error": "tf.keras.metrics.mean_squared_error(y_true,y_pred)", "tf.keras.metrics.mean_squared_logarithmic_error": "tf.keras.metrics.mean_squared_logarithmic_error(y_true,y_pred)", "tf.keras.metrics.binary_crossentropy": "tf.keras.metrics.binary_crossentropy(y_true,y_pred,from_logits=False)", "tf.keras.metrics.categorical_crossentropy": "tf.keras.metrics.categorical_crossentropy(y_true,y_pred,from_logits=False)", "tf.keras.losses.categorical_hinge": "tf.keras.losses.categorical_hinge(y_true,y_pred)", "tf.keras.metrics.cosine_proximity": "tf.keras.metrics.cosine_proximity(y_true,y_pred)", "tf.keras.losses.deserialize": "tf.keras.losses.deserialize(name,custom_objects=None)", "tf.keras.losses.get": "tf.keras.losses.get(identifier)", "tf.keras.metrics.hinge": "tf.keras.metrics.hinge(y_true,y_pred)", "tf.keras.losses.logcosh": "tf.keras.losses.logcosh(y_true,y_pred)", "tf.keras.metrics.poisson": "tf.keras.metrics.poisson(y_true,y_pred)", "tf.keras.losses.serialize": "tf.keras.losses.serialize(loss)", "tf.keras.metrics.sparse_categorical_crossentropy": "tf.keras.metrics.sparse_categorical_crossentropy(y_true,y_pred,from_logits=False)", "tf.keras.metrics.squared_hinge": "tf.keras.metrics.squared_hinge(y_true,y_pred)", "tf.keras.metrics.binary_accuracy": "tf.keras.metrics.binary_accuracy(y_true,y_pred,threshold=0.5)", "tf.keras.metrics.categorical_accuracy": "tf.keras.metrics.categorical_accuracy(y_true,y_pred)", "tf.keras.metrics.deserialize": "tf.keras.metrics.deserialize(config,custom_objects=None)", "tf.keras.metrics.get": "tf.keras.metrics.get(identifier)", "tf.keras.metrics.serialize": "tf.keras.metrics.serialize(metric)", "tf.keras.metrics.sparse_categorical_accuracy": "tf.keras.metrics.sparse_categorical_accuracy(y_true,y_pred)", "tf.keras.metrics.sparse_top_k_categorical_accuracy": "tf.keras.metrics.sparse_top_k_categorical_accuracy(y_true,y_pred,k=5)", "tf.keras.metrics.top_k_categorical_accuracy": "tf.keras.metrics.top_k_categorical_accuracy(y_true,y_pred,k=5)", "tf.keras.models.clone_model": "tf.keras.models.clone_model(model,input_tensors=None)", "tf.keras.models.load_model": "tf.keras.models.load_model(filepath,custom_objects=None,compile=True)", "tf.keras.models.model_from_config": "tf.keras.models.model_from_config(config,custom_objects=None)", "tf.keras.models.model_from_json": "tf.keras.models.model_from_json(json_string,custom_objects=None)", "tf.keras.models.model_from_yaml": "tf.keras.models.model_from_yaml(yaml_string,custom_objects=None)", "tf.keras.models.save_model": "tf.keras.models.save_model(model,filepath,overwrite=True,include_optimizer=True)", "tf.keras.optimizers.deserialize": "tf.keras.optimizers.deserialize(config,custom_objects=None)", "tf.keras.optimizers.get": "tf.keras.optimizers.get(identifier)", "tf.keras.optimizers.serialize": "tf.keras.optimizers.serialize(optimizer)", "tf.keras.regularizers.deserialize": "tf.keras.regularizers.deserialize(config,custom_objects=None)", "tf.keras.regularizers.get": "tf.keras.regularizers.get(identifier)", "tf.keras.regularizers.l1": "tf.keras.regularizers.l1(l=0.01)", "tf.keras.regularizers.l1_l2": "tf.keras.regularizers.l1_l2(l1=0.01,l2=0.01)", "tf.keras.regularizers.l2": "tf.keras.regularizers.l2(l=0.01)", "tf.keras.regularizers.serialize": "tf.keras.regularizers.serialize(regularizer)", "tf.keras.utils.convert_all_kernels_in_model": "tf.keras.utils.convert_all_kernels_in_model(model)", "tf.keras.utils.custom_object_scope": "tf.keras.utils.custom_object_scope(*args)", "tf.keras.utils.deserialize_keras_object": "tf.keras.utils.deserialize_keras_object(identifier,module_objects=None,custom_objects=None,printable_module_name='object')", "tf.keras.utils.get_custom_objects": "tf.keras.utils.get_custom_objects()", "tf.keras.utils.get_file": "tf.keras.utils.get_file(fname,origin,untar=False,md5_hash=None,file_hash=None,cache_subdir='datasets',hash_algorithm='auto',extract=False,archive_format='auto',cache_dir=None)", "tf.keras.utils.get_source_inputs": "tf.keras.utils.get_source_inputs(tensor,layer=None,node_index=None)", "tf.keras.utils.multi_gpu_model": "tf.keras.utils.multi_gpu_model(model,gpus,cpu_merge=True,cpu_relocation=False)", "tf.keras.utils.normalize": "tf.keras.utils.normalize(x,axis=-1,order=2)", "tf.keras.utils.plot_model": "tf.keras.utils.plot_model(model,to_file='model.png',show_shapes=False,show_layer_names=True,rankdir='TB')", "tf.keras.utils.serialize_keras_object": "tf.keras.utils.serialize_keras_object(instance)", "tf.keras.utils.to_categorical": "tf.keras.utils.to_categorical(y,num_classes=None,dtype='float32')", "tf.layers.average_pooling1d": "tf.layers.average_pooling1d(inputs,pool_size,strides,padding='valid',data_format='channels_last',name=None)", "tf.layers.average_pooling2d": "tf.layers.average_pooling2d(inputs,pool_size,strides,padding='valid',data_format='channels_last',name=None)", "tf.layers.average_pooling3d": "tf.layers.average_pooling3d(inputs,pool_size,strides,padding='valid',data_format='channels_last',name=None)", "tf.layers.batch_normalization": "tf.layers.batch_normalization(inputs,axis=-1,momentum=0.99,epsilon=0.001,center=True,scale=True,beta_initializer=tf.zeros_initializer(),gamma_initializer=tf.ones_initializer(),moving_mean_initializer=tf.zeros_initializer(),moving_variance_initializer=tf.ones_initializer(),beta_regularizer=None,gamma_regularizer=None,beta_constraint=None,gamma_constraint=None,training=False,trainable=True,name=None,reuse=None,renorm=False,renorm_clipping=None,renorm_momentum=0.99,fused=None,virtual_batch_size=None,adjustment=None)", "tf.layers.conv1d": "tf.layers.conv1d(inputs,filters,kernel_size,strides=1,padding='valid',data_format='channels_last',dilation_rate=1,activation=None,use_bias=True,kernel_initializer=None,bias_initializer=tf.zeros_initializer(),kernel_regularizer=None,bias_regularizer=None,activity_regularizer=None,kernel_constraint=None,bias_constraint=None,trainable=True,name=None,reuse=None)", "tf.layers.conv2d": "tf.layers.conv2d(inputs,filters,kernel_size,strides=(1,1),padding='valid',data_format='channels_last',dilation_rate=(1,1),activation=None,use_bias=True,kernel_initializer=None,bias_initializer=tf.zeros_initializer(),kernel_regularizer=None,bias_regularizer=None,activity_regularizer=None,kernel_constraint=None,bias_constraint=None,trainable=True,name=None,reuse=None)", "tf.layers.conv2d_transpose": "tf.layers.conv2d_transpose(inputs,filters,kernel_size,strides=(1,1),padding='valid',data_format='channels_last',activation=None,use_bias=True,kernel_initializer=None,bias_initializer=tf.zeros_initializer(),kernel_regularizer=None,bias_regularizer=None,activity_regularizer=None,kernel_constraint=None,bias_constraint=None,trainable=True,name=None,reuse=None)", "tf.layers.conv3d": "tf.layers.conv3d(inputs,filters,kernel_size,strides=(1,1,1),padding='valid',data_format='channels_last',dilation_rate=(1,1,1),activation=None,use_bias=True,kernel_initializer=None,bias_initializer=tf.zeros_initializer(),kernel_regularizer=None,bias_regularizer=None,activity_regularizer=None,kernel_constraint=None,bias_constraint=None,trainable=True,name=None,reuse=None)", "tf.layers.conv3d_transpose": "tf.layers.conv3d_transpose(inputs,filters,kernel_size,strides=(1,1,1),padding='valid',data_format='channels_last',activation=None,use_bias=True,kernel_initializer=None,bias_initializer=tf.zeros_initializer(),kernel_regularizer=None,bias_regularizer=None,activity_regularizer=None,kernel_constraint=None,bias_constraint=None,trainable=True,name=None,reuse=None)", "tf.layers.dense": "tf.layers.dense(inputs,units,activation=None,use_bias=True,kernel_initializer=None,bias_initializer=tf.zeros_initializer(),kernel_regularizer=None,bias_regularizer=None,activity_regularizer=None,kernel_constraint=None,bias_constraint=None,trainable=True,name=None,reuse=None)", "tf.layers.dropout": "tf.layers.dropout(inputs,rate=0.5,noise_shape=None,seed=None,training=False,name=None)", "tf.layers.experimental.keras_style_scope": "tf.layers.experimental.keras_style_scope()", "tf.layers.experimental.set_keras_style": "tf.layers.experimental.set_keras_style()", "tf.layers.flatten": "tf.layers.flatten(inputs,name=None,data_format='channels_last')", "tf.layers.max_pooling1d": "tf.layers.max_pooling1d(inputs,pool_size,strides,padding='valid',data_format='channels_last',name=None)", "tf.layers.max_pooling2d": "tf.layers.max_pooling2d(inputs,pool_size,strides,padding='valid',data_format='channels_last',name=None)", "tf.layers.max_pooling3d": "tf.layers.max_pooling3d(inputs,pool_size,strides,padding='valid',data_format='channels_last',name=None)", "tf.layers.separable_conv1d": "tf.layers.separable_conv1d(inputs,filters,kernel_size,strides=1,padding='valid',data_format='channels_last',dilation_rate=1,depth_multiplier=1,activation=None,use_bias=True,depthwise_initializer=None,pointwise_initializer=None,bias_initializer=tf.zeros_initializer(),depthwise_regularizer=None,pointwise_regularizer=None,bias_regularizer=None,activity_regularizer=None,depthwise_constraint=None,pointwise_constraint=None,bias_constraint=None,trainable=True,name=None,reuse=None)", "tf.layers.separable_conv2d": "tf.layers.separable_conv2d(inputs,filters,kernel_size,strides=(1,1),padding='valid',data_format='channels_last',dilation_rate=(1,1),depth_multiplier=1,activation=None,use_bias=True,depthwise_initializer=None,pointwise_initializer=None,bias_initializer=tf.zeros_initializer(),depthwise_regularizer=None,pointwise_regularizer=None,bias_regularizer=None,activity_regularizer=None,depthwise_constraint=None,pointwise_constraint=None,bias_constraint=None,trainable=True,name=None,reuse=None)", "tf.math.lbeta": "tf.math.lbeta(x,name=None)", "tf.math.less": "tf.math.less(x,y,name=None)", "tf.math.less_equal": "tf.math.less_equal(x,y,name=None)", "tf.math.lgamma": "tf.math.lgamma(x,name=None)", "tf.linspace": "tf.linspace(start,stop,num,name=None)", "tf.linalg.adjoint": "tf.linalg.adjoint(matrix,name=None)", "tf.linalg.band_part": "tf.linalg.band_part(input,num_lower,num_upper,name=None)", "tf.linalg.det": "tf.linalg.det(input,name=None)", "tf.linalg.diag": "tf.linalg.diag(diagonal,name=None)", "tf.linalg.diag_part": "tf.linalg.diag_part(input,name=None)", "tf.linalg.eigh": "tf.linalg.eigh(tensor,name=None)", "tf.linalg.eigvalsh": "tf.linalg.eigvalsh(tensor,name=None)", "tf.linalg.expm": "tf.linalg.expm(input,name=None)", "tf.linalg.inv": "tf.linalg.inv(input,adjoint=False,name=None)", "tf.math.l2_normalize": "tf.math.l2_normalize(x,axis=None,epsilon=1e-12,name=None,dim=None)", "tf.linalg.logdet": "tf.linalg.logdet(matrix,name=None)", "tf.linalg.logm": "tf.linalg.logm(input,name=None)", "tf.linalg.lstsq": "tf.linalg.lstsq(matrix,rhs,l2_regularizer=0.0,fast=True,name=None)", "tf.linalg.lu": "tf.linalg.lu(input,output_idx_type=tf.dtypes.int32,name=None)", "tf.linalg.matmul": "tf.linalg.matmul(a,b,transpose_a=False,transpose_b=False,adjoint_a=False,adjoint_b=False,a_is_sparse=False,b_is_sparse=False,name=None)", "tf.linalg.matvec": "tf.linalg.matvec(a,b,transpose_a=False,adjoint_a=False,a_is_sparse=False,b_is_sparse=False,name=None)", "tf.norm": "tf.norm(tensor,ord='euclidean',axis=None,keepdims=None,name=None,keep_dims=None)", "tf.linalg.qr": "tf.linalg.qr(input,full_matrices=False,name=None)", "tf.linalg.set_diag": "tf.linalg.set_diag(input,diagonal,name=None)", "tf.linalg.slogdet": "tf.linalg.slogdet(input,name=None)", "tf.linalg.solve": "tf.linalg.solve(matrix,rhs,adjoint=False,name=None)", "tf.linalg.sqrtm": "tf.linalg.sqrtm(input,name=None)", "tf.linalg.svd": "tf.linalg.svd(tensor,full_matrices=False,compute_uv=True,name=None)", "tf.tensordot": "tf.tensordot(a,b,axes,name=None)", "tf.linalg.trace": "tf.linalg.trace(x,name=None)", "tf.linalg.transpose": "tf.linalg.transpose(a,name='matrix_transpose',conjugate=False)", "tf.linalg.triangular_solve": "tf.linalg.triangular_solve(matrix,rhs,lower=True,adjoint=False,name=None)", "tf.load_file_system_library": "tf.load_file_system_library(library_filename)", "tf.load_library": "tf.load_library(library_location)", "tf.load_op_library": "tf.load_op_library(library_filename)", "tf.local_variables": "tf.local_variables(scope=None)", "tf.math.log": "tf.math.log(x,name=None)", "tf.math.log1p": "tf.math.log1p(x,name=None)", "tf.math.log_sigmoid": "tf.math.log_sigmoid(x,name=None)", "tf.logging.TaskLevelStatusMessage": "tf.logging.TaskLevelStatusMessage(msg)", "tf.logging.debug": "tf.logging.debug(msg,*args,**kwargs)", "tf.logging.error": "tf.logging.error(msg,*args,**kwargs)", "tf.logging.fatal": "tf.logging.fatal(msg,*args,**kwargs)", "tf.logging.flush": "tf.logging.flush()", "tf.logging.get_verbosity": "tf.logging.get_verbosity()", "tf.logging.info": "tf.logging.info(msg,*args,**kwargs)", "tf.logging.log": "tf.logging.log(level,msg,*args,**kwargs)", "tf.logging.log_every_n": "tf.logging.log_every_n(level,msg,n,*args)", "tf.logging.log_first_n": "tf.logging.log_first_n(level,msg,n,*args)", "tf.logging.log_if": "tf.logging.log_if(level,msg,condition,*args)", "tf.logging.set_verbosity": "tf.logging.set_verbosity(v)", "tf.logging.vlog": "tf.logging.vlog(level,msg,*args,**kwargs)", "tf.logging.warn": "tf.logging.warn(msg,*args,**kwargs)", "tf.logging.warning": "tf.logging.warning(msg,*args,**kwargs)", "tf.math.logical_and": "tf.math.logical_and(x,y,name=None)", "tf.math.logical_not": "tf.math.logical_not(x,name=None)", "tf.math.logical_or": "tf.math.logical_or(x,y,name=None)", "tf.math.logical_xor": "tf.math.logical_xor(x,y,name='LogicalXor')", "tf.losses.absolute_difference": "tf.losses.absolute_difference(labels,predictions,weights=1.0,scope=None,loss_collection=tf.GraphKeys.LOSSES,reduction=Reduction.SUM_BY_NONZERO_WEIGHTS)", "tf.losses.add_loss": "tf.losses.add_loss(loss,loss_collection=tf.GraphKeys.LOSSES)", "tf.losses.compute_weighted_loss": "tf.losses.compute_weighted_loss(losses,weights=1.0,scope=None,loss_collection=tf.GraphKeys.LOSSES,reduction=Reduction.SUM_BY_NONZERO_WEIGHTS)", "tf.losses.cosine_distance": "tf.losses.cosine_distance(labels,predictions,axis=None,weights=1.0,scope=None,loss_collection=tf.GraphKeys.LOSSES,reduction=Reduction.SUM_BY_NONZERO_WEIGHTS,dim=None)", "tf.losses.get_losses": "tf.losses.get_losses(scope=None,loss_collection=tf.GraphKeys.LOSSES)", "tf.losses.get_regularization_loss": "tf.losses.get_regularization_loss(scope=None,name='total_regularization_loss')", "tf.losses.get_regularization_losses": "tf.losses.get_regularization_losses(scope=None)", "tf.losses.get_total_loss": "tf.losses.get_total_loss(add_regularization_losses=True,name='total_loss')", "tf.losses.hinge_loss": "tf.losses.hinge_loss(labels,logits,weights=1.0,scope=None,loss_collection=tf.GraphKeys.LOSSES,reduction=Reduction.SUM_BY_NONZERO_WEIGHTS)", "tf.losses.huber_loss": "tf.losses.huber_loss(labels,predictions,weights=1.0,delta=1.0,scope=None,loss_collection=tf.GraphKeys.LOSSES,reduction=Reduction.SUM_BY_NONZERO_WEIGHTS)", "tf.losses.log_loss": "tf.losses.log_loss(labels,predictions,weights=1.0,epsilon=1e-07,scope=None,loss_collection=tf.GraphKeys.LOSSES,reduction=Reduction.SUM_BY_NONZERO_WEIGHTS)", "tf.losses.mean_pairwise_squared_error": "tf.losses.mean_pairwise_squared_error(labels,predictions,weights=1.0,scope=None,loss_collection=tf.GraphKeys.LOSSES)", "tf.losses.mean_squared_error": "tf.losses.mean_squared_error(labels,predictions,weights=1.0,scope=None,loss_collection=tf.GraphKeys.LOSSES,reduction=Reduction.SUM_BY_NONZERO_WEIGHTS)", "tf.losses.sigmoid_cross_entropy": "tf.losses.sigmoid_cross_entropy(multi_class_labels,logits,weights=1.0,label_smoothing=0,scope=None,loss_collection=tf.GraphKeys.LOSSES,reduction=Reduction.SUM_BY_NONZERO_WEIGHTS)", "tf.losses.softmax_cross_entropy": "tf.losses.softmax_cross_entropy(onehot_labels,logits,weights=1.0,label_smoothing=0,scope=None,loss_collection=tf.GraphKeys.LOSSES,reduction=Reduction.SUM_BY_NONZERO_WEIGHTS)", "tf.losses.sparse_softmax_cross_entropy": "tf.losses.sparse_softmax_cross_entropy(labels,logits,weights=1.0,scope=None,loss_collection=tf.GraphKeys.LOSSES,reduction=Reduction.SUM_BY_NONZERO_WEIGHTS)", "tf.make_template": "tf.make_template(name_,func_,create_scope_now_=False,unique_name_=None,custom_getter_=None,**kwargs)", "tf.reshape": "tf.reshape(tensor,shape,name=None)", "tf.reverse": "tf.reverse(tensor,axis,name=None)", "tf.roll": "tf.roll(input,shift,axis)", "tf.scatter_nd": "tf.scatter_nd(indices,updates,shape,name=None)", "tf.space_to_batch_nd": "tf.space_to_batch_nd(input,block_shape,paddings,name=None)", "tf.tile": "tf.tile(input,multiples,name=None)", "tf.map_fn": "tf.map_fn(fn,elems,dtype=None,parallel_iterations=None,back_prop=True,swap_memory=False,infer_shape=True,name=None)", "tf.math.bessel_i0": "tf.math.bessel_i0(x,name=None)", "tf.math.bessel_i0e": "tf.math.bessel_i0e(x,name=None)", "tf.math.bessel_i1": "tf.math.bessel_i1(x,name=None)", "tf.math.bessel_i1e": "tf.math.bessel_i1e(x,name=None)", "tf.math.in_top_k": "tf.math.in_top_k(predictions,targets,k,name=None)", "tf.nn.log_softmax": "tf.nn.log_softmax(logits,axis=None,name=None,dim=None)", "tf.math.maximum": "tf.math.maximum(x,y,name=None)", "tf.math.minimum": "tf.math.minimum(x,y,name=None)", "tf.math.multiply": "tf.math.multiply(x,y,name=None)", "tf.math.negative": "tf.math.negative(x,name=None)", "tf.math.not_equal": "tf.math.not_equal(x,y,name=None)", "tf.math.polygamma": "tf.math.polygamma(a,x,name=None)", "tf.math.polyval": "tf.math.polyval(coeffs,x,name=None)", "tf.math.pow": "tf.math.pow(x,y,name=None)", "tf.math.real": "tf.math.real(input,name=None)", "tf.math.reciprocal": "tf.math.reciprocal(x,name=None)", "tf.math.reduce_all": "tf.math.reduce_all(input_tensor,axis=None,keepdims=None,name=None,reduction_indices=None,keep_dims=None)", "tf.math.reduce_any": "tf.math.reduce_any(input_tensor,axis=None,keepdims=None,name=None,reduction_indices=None,keep_dims=None)", "tf.math.reduce_logsumexp": "tf.math.reduce_logsumexp(input_tensor,axis=None,keepdims=None,name=None,reduction_indices=None,keep_dims=None)", "tf.math.reduce_max": "tf.math.reduce_max(input_tensor,axis=None,keepdims=None,name=None,reduction_indices=None,keep_dims=None)", "tf.math.reduce_mean": "tf.math.reduce_mean(input_tensor,axis=None,keepdims=None,name=None,reduction_indices=None,keep_dims=None)", "tf.math.reduce_min": "tf.math.reduce_min(input_tensor,axis=None,keepdims=None,name=None,reduction_indices=None,keep_dims=None)", "tf.math.reduce_prod": "tf.math.reduce_prod(input_tensor,axis=None,keepdims=None,name=None,reduction_indices=None,keep_dims=None)", "tf.math.reduce_std": "tf.math.reduce_std(input_tensor,axis=None,keepdims=False,name=None)", "tf.math.reduce_sum": "tf.math.reduce_sum(input_tensor,axis=None,keepdims=None,name=None,reduction_indices=None,keep_dims=None)", "tf.math.reduce_variance": "tf.math.reduce_variance(input_tensor,axis=None,keepdims=False,name=None)", "tf.math.rint": "tf.math.rint(x,name=None)", "tf.math.round": "tf.math.round(x,name=None)", "tf.math.rsqrt": "tf.math.rsqrt(x,name=None)", "tf.math.scalar_mul": "tf.math.scalar_mul(scalar,x,name=None)", "tf.math.segment_max": "tf.math.segment_max(data,segment_ids,name=None)", "tf.math.segment_mean": "tf.math.segment_mean(data,segment_ids,name=None)", "tf.math.segment_min": "tf.math.segment_min(data,segment_ids,name=None)", "tf.math.segment_prod": "tf.math.segment_prod(data,segment_ids,name=None)", "tf.math.segment_sum": "tf.math.segment_sum(data,segment_ids,name=None)", "tf.math.sigmoid": "tf.math.sigmoid(x,name=None)", "tf.math.sign": "tf.math.sign(x,name=None)", "tf.math.sin": "tf.math.sin(x,name=None)", "tf.math.sinh": "tf.math.sinh(x,name=None)", "tf.nn.softmax": "tf.nn.softmax(logits,axis=None,name=None,dim=None)", "tf.math.softplus": "tf.math.softplus(features,name=None)", "tf.nn.softsign": "tf.nn.softsign(features,name=None)", "tf.math.sqrt": "tf.math.sqrt(x,name=None)", "tf.math.square": "tf.math.square(x,name=None)", "tf.math.squared_difference": "tf.math.squared_difference(x,y,name=None)", "tf.math.subtract": "tf.math.subtract(x,y,name=None)", "tf.math.tan": "tf.math.tan(x,name=None)", "tf.math.tanh": "tf.math.tanh(x,name=None)", "tf.math.top_k": "tf.math.top_k(input,k=1,sorted=True,name=None)", "tf.math.truediv": "tf.math.truediv(x,y,name=None)", "tf.math.unsorted_segment_max": "tf.math.unsorted_segment_max(data,segment_ids,num_segments,name=None)", "tf.math.unsorted_segment_mean": "tf.math.unsorted_segment_mean(data,segment_ids,num_segments,name=None)", "tf.math.unsorted_segment_min": "tf.math.unsorted_segment_min(data,segment_ids,num_segments,name=None)", "tf.math.unsorted_segment_prod": "tf.math.unsorted_segment_prod(data,segment_ids,num_segments,name=None)", "tf.math.unsorted_segment_sqrt_n": "tf.math.unsorted_segment_sqrt_n(data,segment_ids,num_segments,name=None)", "tf.math.unsorted_segment_sum": "tf.math.unsorted_segment_sum(data,segment_ids,num_segments,name=None)", "tf.math.xdivy": "tf.math.xdivy(x,y,name=None)", "tf.math.xlogy": "tf.math.xlogy(x,y,name=None)", "tf.math.zero_fraction": "tf.math.zero_fraction(value,name=None)", "tf.math.zeta": "tf.math.zeta(x,q,name=None)", "tf.meshgrid": "tf.meshgrid(*args,**kwargs)", "tf.metrics.accuracy": "tf.metrics.accuracy(labels,predictions,weights=None,metrics_collections=None,updates_collections=None,name=None)", "tf.metrics.auc": "tf.metrics.auc(labels,predictions,weights=None,num_thresholds=200,metrics_collections=None,updates_collections=None,curve='ROC',name=None,summation_method='trapezoidal')", "tf.metrics.average_precision_at_k": "tf.metrics.average_precision_at_k(labels,predictions,k,weights=None,metrics_collections=None,updates_collections=None,name=None)", "tf.metrics.false_negatives": "tf.metrics.false_negatives(labels,predictions,weights=None,metrics_collections=None,updates_collections=None,name=None)", "tf.metrics.false_negatives_at_thresholds": "tf.metrics.false_negatives_at_thresholds(labels,predictions,thresholds,weights=None,metrics_collections=None,updates_collections=None,name=None)", "tf.metrics.false_positives": "tf.metrics.false_positives(labels,predictions,weights=None,metrics_collections=None,updates_collections=None,name=None)", "tf.metrics.false_positives_at_thresholds": "tf.metrics.false_positives_at_thresholds(labels,predictions,thresholds,weights=None,metrics_collections=None,updates_collections=None,name=None)", "tf.metrics.mean": "tf.metrics.mean(values,weights=None,metrics_collections=None,updates_collections=None,name=None)", "tf.metrics.mean_absolute_error": "tf.metrics.mean_absolute_error(labels,predictions,weights=None,metrics_collections=None,updates_collections=None,name=None)", "tf.metrics.mean_cosine_distance": "tf.metrics.mean_cosine_distance(labels,predictions,dim,weights=None,metrics_collections=None,updates_collections=None,name=None)", "tf.metrics.mean_iou": "tf.metrics.mean_iou(labels,predictions,num_classes,weights=None,metrics_collections=None,updates_collections=None,name=None)", "tf.metrics.mean_per_class_accuracy": "tf.metrics.mean_per_class_accuracy(labels,predictions,num_classes,weights=None,metrics_collections=None,updates_collections=None,name=None)", "tf.metrics.mean_relative_error": "tf.metrics.mean_relative_error(labels,predictions,normalizer,weights=None,metrics_collections=None,updates_collections=None,name=None)", "tf.metrics.mean_squared_error": "tf.metrics.mean_squared_error(labels,predictions,weights=None,metrics_collections=None,updates_collections=None,name=None)", "tf.metrics.mean_tensor": "tf.metrics.mean_tensor(values,weights=None,metrics_collections=None,updates_collections=None,name=None)", "tf.metrics.percentage_below": "tf.metrics.percentage_below(values,threshold,weights=None,metrics_collections=None,updates_collections=None,name=None)", "tf.metrics.precision": "tf.metrics.precision(labels,predictions,weights=None,metrics_collections=None,updates_collections=None,name=None)", "tf.metrics.precision_at_k": "tf.metrics.precision_at_k(labels,predictions,k,class_id=None,weights=None,metrics_collections=None,updates_collections=None,name=None)", "tf.metrics.precision_at_thresholds": "tf.metrics.precision_at_thresholds(labels,predictions,thresholds,weights=None,metrics_collections=None,updates_collections=None,name=None)", "tf.metrics.precision_at_top_k": "tf.metrics.precision_at_top_k(labels,predictions_idx,k=None,class_id=None,weights=None,metrics_collections=None,updates_collections=None,name=None)", "tf.metrics.recall": "tf.metrics.recall(labels,predictions,weights=None,metrics_collections=None,updates_collections=None,name=None)", "tf.metrics.recall_at_k": "tf.metrics.recall_at_k(labels,predictions,k,class_id=None,weights=None,metrics_collections=None,updates_collections=None,name=None)", "tf.metrics.recall_at_thresholds": "tf.metrics.recall_at_thresholds(labels,predictions,thresholds,weights=None,metrics_collections=None,updates_collections=None,name=None)", "tf.metrics.recall_at_top_k": "tf.metrics.recall_at_top_k(labels,predictions_idx,k=None,class_id=None,weights=None,metrics_collections=None,updates_collections=None,name=None)", "tf.metrics.root_mean_squared_error": "tf.metrics.root_mean_squared_error(labels,predictions,weights=None,metrics_collections=None,updates_collections=None,name=None)", "tf.metrics.sensitivity_at_specificity": "tf.metrics.sensitivity_at_specificity(labels,predictions,specificity,weights=None,num_thresholds=200,metrics_collections=None,updates_collections=None,name=None)", "tf.metrics.sparse_average_precision_at_k": "tf.metrics.sparse_average_precision_at_k(labels,predictions,k,weights=None,metrics_collections=None,updates_collections=None,name=None)", "tf.metrics.sparse_precision_at_k": "tf.metrics.sparse_precision_at_k(labels,predictions,k,class_id=None,weights=None,metrics_collections=None,updates_collections=None,name=None)", "tf.metrics.specificity_at_sensitivity": "tf.metrics.specificity_at_sensitivity(labels,predictions,sensitivity,weights=None,num_thresholds=200,metrics_collections=None,updates_collections=None,name=None)", "tf.metrics.true_negatives": "tf.metrics.true_negatives(labels,predictions,weights=None,metrics_collections=None,updates_collections=None,name=None)", "tf.metrics.true_negatives_at_thresholds": "tf.metrics.true_negatives_at_thresholds(labels,predictions,thresholds,weights=None,metrics_collections=None,updates_collections=None,name=None)", "tf.metrics.true_positives": "tf.metrics.true_positives(labels,predictions,weights=None,metrics_collections=None,updates_collections=None,name=None)", "tf.metrics.true_positives_at_thresholds": "tf.metrics.true_positives_at_thresholds(labels,predictions,thresholds,weights=None,metrics_collections=None,updates_collections=None,name=None)", "tf.min_max_variable_partitioner": "tf.min_max_variable_partitioner(max_partitions=1,axis=0,min_slice_size=(256<<10),bytes_per_string_element=16)", "tf.model_variables": "tf.model_variables(scope=None)", "tf.moving_average_variables": "tf.moving_average_variables(scope=None)", "tf.random.multinomial": "tf.random.multinomial(logits,num_samples,seed=None,name=None,output_dtype=None)", "tf.random.all_candidate_sampler": "tf.random.all_candidate_sampler(true_classes,num_true,num_sampled,unique,seed=None,name=None)", "tf.nn.atrous_conv2d": "tf.nn.atrous_conv2d(value,filters,rate,padding,name=None)", "tf.nn.atrous_conv2d_transpose": "tf.nn.atrous_conv2d_transpose(value,filters,output_shape,rate,padding,name=None)", "tf.nn.avg_pool": "tf.nn.avg_pool(value,ksize,strides,padding,data_format='NHWC',name=None)", "tf.nn.avg_pool3d": "tf.nn.avg_pool3d(input,ksize,strides,padding,data_format='NDHWC',name=None)", "tf.nn.batch_norm_with_global_normalization": "tf.nn.batch_norm_with_global_normalization(t,m,v,beta,gamma,variance_epsilon,scale_after_normalization,name=None)", "tf.nn.batch_normalization": "tf.nn.batch_normalization(x,mean,variance,offset,scale,variance_epsilon,name=None)", "tf.nn.bias_add": "tf.nn.bias_add(value,bias,data_format=None,name=None)", "tf.nn.bidirectional_dynamic_rnn": "tf.nn.bidirectional_dynamic_rnn(cell_fw,cell_bw,inputs,sequence_length=None,initial_state_fw=None,initial_state_bw=None,dtype=None,parallel_iterations=None,swap_memory=False,time_major=False,scope=None)", "tf.nn.collapse_repeated": "tf.nn.collapse_repeated(labels,seq_length,name=None)", "tf.nn.compute_accidental_hits": "tf.nn.compute_accidental_hits(true_classes,sampled_candidates,num_true,seed=None,name=None)", "tf.nn.conv1d": "tf.nn.conv1d(value,filters,stride,padding,use_cudnn_on_gpu=None,data_format=None,name=None)", "tf.nn.conv2d": "tf.nn.conv2d(input,filter,strides,padding,use_cudnn_on_gpu=True,data_format='NHWC',dilations=[1,1,1,1],name=None)", "tf.nn.conv2d_backprop_filter": "tf.nn.conv2d_backprop_filter(input,filter_sizes,out_backprop,strides,padding,use_cudnn_on_gpu=True,data_format='NHWC',dilations=[1,1,1,1],name=None)", "tf.nn.conv2d_backprop_input": "tf.nn.conv2d_backprop_input(input_sizes,filter,out_backprop,strides,padding,use_cudnn_on_gpu=True,data_format='NHWC',dilations=[1,1,1,1],name=None)", "tf.nn.conv2d_transpose": "tf.nn.conv2d_transpose(value,filter,output_shape,strides,padding='SAME',data_format='NHWC',name=None)", "tf.nn.conv3d": "tf.nn.conv3d(input,filter,strides,padding,data_format='NDHWC',dilations=[1,1,1,1,1],name=None)", "tf.nn.conv3d_backprop_filter": "tf.nn.conv3d_backprop_filter(input,filter_sizes,out_backprop,strides,padding,data_format='NDHWC',dilations=[1,1,1,1,1],name=None)", "tf.nn.conv3d_transpose": "tf.nn.conv3d_transpose(value,filter,output_shape,strides,padding='SAME',data_format='NDHWC',name=None)", "tf.nn.convolution": "tf.nn.convolution(input,filter,padding,strides=None,dilation_rate=None,name=None,data_format=None)", "tf.nn.crelu": "tf.nn.crelu(features,name=None,axis=-1)", "tf.nn.ctc_beam_search_decoder": "tf.nn.ctc_beam_search_decoder(inputs,sequence_length,beam_width=100,top_paths=1,merge_repeated=True)", "tf.nn.ctc_beam_search_decoder_v2": "tf.nn.ctc_beam_search_decoder_v2(inputs,sequence_length,beam_width=100,top_paths=1)", "tf.nn.ctc_greedy_decoder": "tf.nn.ctc_greedy_decoder(inputs,sequence_length,merge_repeated=True)", "tf.nn.ctc_loss": "tf.nn.ctc_loss(labels,inputs,sequence_length,preprocess_collapse_repeated=False,ctc_merge_repeated=True,ignore_longer_outputs_than_inputs=False,time_major=True)", "tf.nn.ctc_loss_v2": "tf.nn.ctc_loss_v2(labels,logits,label_length,logit_length,logits_time_major=True,unique=None,blank_index=None,name=None)", "tf.nn.ctc_unique_labels": "tf.nn.ctc_unique_labels(labels,name=None)", "tf.nn.depthwise_conv2d": "tf.nn.depthwise_conv2d(input,filter,strides,padding,rate=None,name=None,data_format=None)", "tf.nn.depthwise_conv2d_backprop_filter": "tf.nn.depthwise_conv2d_backprop_filter(input,filter_sizes,out_backprop,strides,padding,data_format='NHWC',dilations=[1,1,1,1],name=None)", "tf.nn.depthwise_conv2d_backprop_input": "tf.nn.depthwise_conv2d_backprop_input(input_sizes,filter,out_backprop,strides,padding,data_format='NHWC',dilations=[1,1,1,1],name=None)", "tf.nn.depthwise_conv2d_native": "tf.nn.depthwise_conv2d_native(input,filter,strides,padding,data_format='NHWC',dilations=[1,1,1,1],name=None)", "tf.nn.dilation2d": "tf.nn.dilation2d(input,filter,strides,rates,padding,name=None)", "tf.nn.dropout": "tf.nn.dropout(x,keep_prob=None,noise_shape=None,seed=None,name=None,rate=None)", "tf.nn.dynamic_rnn": "tf.nn.dynamic_rnn(cell,inputs,sequence_length=None,initial_state=None,dtype=None,parallel_iterations=None,swap_memory=False,time_major=False,scope=None)", "tf.nn.elu": "tf.nn.elu(features,name=None)", "tf.nn.embedding_lookup": "tf.nn.embedding_lookup(params,ids,partition_strategy='mod',name=None,validate_indices=True,max_norm=None)", "tf.nn.embedding_lookup_sparse": "tf.nn.embedding_lookup_sparse(params,sp_ids,sp_weights,partition_strategy='mod',name=None,combiner=None,max_norm=None)", "tf.nn.erosion2d": "tf.nn.erosion2d(value,kernel,strides,rates,padding,name=None)", "tf.random.fixed_unigram_candidate_sampler": "tf.random.fixed_unigram_candidate_sampler(true_classes,num_true,num_sampled,unique,range_max,vocab_file='',distortion=1.0,num_reserved_ids=0,num_shards=1,shard=0,unigrams=(),seed=None,name=None)", "tf.nn.fractional_avg_pool": "tf.nn.fractional_avg_pool(value,pooling_ratio,pseudo_random=False,overlapping=False,deterministic=False,seed=0,seed2=0,name=None)", "tf.nn.fractional_max_pool": "tf.nn.fractional_max_pool(value,pooling_ratio,pseudo_random=False,overlapping=False,deterministic=False,seed=0,seed2=0,name=None)", "tf.nn.fused_batch_norm": "tf.nn.fused_batch_norm(x,scale,offset,mean=None,variance=None,epsilon=0.001,data_format='NHWC',is_training=True,name=None)", "tf.nn.l2_loss": "tf.nn.l2_loss(t,name=None)", "tf.nn.leaky_relu": "tf.nn.leaky_relu(features,alpha=0.2,name=None)", "tf.random.learned_unigram_candidate_sampler": "tf.random.learned_unigram_candidate_sampler(true_classes,num_true,num_sampled,unique,range_max,seed=None,name=None)", "tf.nn.local_response_normalization": "tf.nn.local_response_normalization(input,depth_radius=5,bias=1,alpha=1,beta=0.5,name=None)", "tf.nn.log_poisson_loss": "tf.nn.log_poisson_loss(targets,log_input,compute_full_loss=False,name=None)", "tf.random.log_uniform_candidate_sampler": "tf.random.log_uniform_candidate_sampler(true_classes,num_true,num_sampled,unique,range_max,seed=None,name=None)", "tf.nn.max_pool": "tf.nn.max_pool(value,ksize,strides,padding,data_format='NHWC',name=None)", "tf.nn.max_pool3d": "tf.nn.max_pool3d(input,ksize,strides,padding,data_format='NDHWC',name=None)", "tf.nn.max_pool_with_argmax": "tf.nn.max_pool_with_argmax(input,ksize,strides,padding,Targmax=tf.dtypes.int64,name=None)", "tf.nn.moments": "tf.nn.moments(x,axes,shift=None,name=None,keep_dims=False)", "tf.nn.nce_loss": "tf.nn.nce_loss(weights,biases,labels,inputs,num_sampled,num_classes,num_true=1,sampled_values=None,remove_accidental_hits=False,partition_strategy='mod',name='nce_loss')", "tf.nn.normalize_moments": "tf.nn.normalize_moments(counts,mean_ss,variance_ss,shift,name=None)", "tf.nn.pool": "tf.nn.pool(input,window_shape,pooling_type,padding,dilation_rate=None,strides=None,name=None,data_format=None)", "tf.nn.quantized_avg_pool": "tf.nn.quantized_avg_pool(input,min_input,max_input,ksize,strides,padding,name=None)", "tf.nn.quantized_conv2d": "tf.nn.quantized_conv2d(input,filter,min_input,max_input,min_filter,max_filter,strides,padding,out_type=tf.dtypes.qint32,dilations=[1,1,1,1],name=None)", "tf.nn.quantized_max_pool": "tf.nn.quantized_max_pool(input,min_input,max_input,ksize,strides,padding,name=None)", "tf.nn.quantized_relu_x": "tf.nn.quantized_relu_x(features,max_value,min_features,max_features,out_type=tf.dtypes.quint8,name=None)", "tf.nn.raw_rnn": "tf.nn.raw_rnn(cell,loop_fn,parallel_iterations=None,swap_memory=False,scope=None)", "tf.nn.relu": "tf.nn.relu(features,name=None)", "tf.nn.relu6": "tf.nn.relu6(features,name=None)", "tf.nn.relu_layer": "tf.nn.relu_layer(x,weights,biases,name=None)", "tf.nn.safe_embedding_lookup_sparse": "tf.nn.safe_embedding_lookup_sparse(embedding_weights,sparse_ids,sparse_weights=None,combiner='mean',default_id=None,name=None,partition_strategy='div',max_norm=None)", "tf.nn.sampled_softmax_loss": "tf.nn.sampled_softmax_loss(weights,biases,labels,inputs,num_sampled,num_classes,num_true=1,sampled_values=None,remove_accidental_hits=True,partition_strategy='mod',name='sampled_softmax_loss',seed=None)", "tf.nn.selu": "tf.nn.selu(features,name=None)", "tf.nn.separable_conv2d": "tf.nn.separable_conv2d(input,depthwise_filter,pointwise_filter,strides,padding,rate=None,name=None,data_format=None)", "tf.nn.sigmoid_cross_entropy_with_logits": "tf.nn.sigmoid_cross_entropy_with_logits(_sentinel=None,labels=None,logits=None,name=None)", "tf.nn.softmax_cross_entropy_with_logits": "tf.nn.softmax_cross_entropy_with_logits(_sentinel=None,labels=None,logits=None,dim=-1,name=None)", "tf.nn.softmax_cross_entropy_with_logits_v2": "tf.nn.softmax_cross_entropy_with_logits_v2(labels,logits,axis=None,name=None,dim=None)", "tf.nn.space_to_batch": "tf.nn.space_to_batch(input,paddings,block_size,name=None)", "tf.nn.space_to_depth": "tf.nn.space_to_depth(input,block_size,name=None,data_format='NHWC')", "tf.nn.sparse_softmax_cross_entropy_with_logits": "tf.nn.sparse_softmax_cross_entropy_with_logits(_sentinel=None,labels=None,logits=None,name=None)", "tf.nn.sufficient_statistics": "tf.nn.sufficient_statistics(x,axes,shift=None,keep_dims=False,name=None)", "tf.random.uniform_candidate_sampler": "tf.random.uniform_candidate_sampler(true_classes,num_true,num_sampled,unique,range_max,seed=None,name=None)", "tf.nn.weighted_cross_entropy_with_logits": "tf.nn.weighted_cross_entropy_with_logits(targets,logits,pos_weight,name=None)", "tf.nn.weighted_moments": "tf.nn.weighted_moments(x,axes,frequency_weights,name=None,keep_dims=False)", "tf.nn.with_space_to_batch": "tf.nn.with_space_to_batch(input,dilation_rate,padding,op,filter_shape=None,spatial_dims=None,data_format=None)", "tf.nn.xw_plus_b": "tf.nn.xw_plus_b(x,weights,biases,name=None)", "tf.no_op": "tf.no_op(name=None)", "tf.no_regularizer": "tf.no_regularizer(_)", "tf.one_hot": "tf.one_hot(indices,depth,on_value=None,off_value=None,axis=None,dtype=None,name=None)", "tf.ones": "tf.ones(shape,dtype=tf.dtypes.float32,name=None)", "tf.ones_like": "tf.ones_like(tensor,dtype=None,name=None,optimize=True)", "tf.op_scope": "tf.op_scope(values,name,default_name=None)", "tf.pad": "tf.pad(tensor,paddings,mode='CONSTANT',name=None,constant_values=0)", "tf.parallel_stack": "tf.parallel_stack(values,name='parallel_stack')", "tf.placeholder": "tf.placeholder(dtype,shape=None,name=None)", "tf.placeholder_with_default": "tf.placeholder_with_default(input,shape,name=None)", "tf.print": "tf.print(*inputs,**kwargs)", "tf.profiler.advise": "tf.profiler.advise(graph=None,run_meta=None,options=_DEFAULT_ADVISE_OPTIONS)", "tf.profiler.profile": "tf.profiler.profile(graph=None,run_meta=None,op_log=None,cmd='scope',options=_DEFAULT_PROFILE_OPTIONS)", "tf.profiler.write_op_log": "tf.profiler.write_op_log(graph,log_dir,op_log=None,run_meta=None,add_trace=True)", "tf.py_func": "tf.py_func(func,inp,Tout,stateful=True,name=None)", "tf.quantization.quantize": "tf.quantization.quantize(input,min_range,max_range,T,mode='MIN_COMBINED',round_mode='HALF_AWAY_FROM_ZERO',name=None)", "tf.quantization.quantize_and_dequantize": "tf.quantization.quantize_and_dequantize(input,input_min,input_max,signed_input=True,num_bits=8,range_given=False,round_mode='HALF_TO_EVEN',name=None)", "tf.quantization.quantized_concat": "tf.quantization.quantized_concat(concat_dim,values,input_mins,input_maxes,name=None)", "tf.quantize_v2": "tf.quantize_v2(input,min_range,max_range,T,mode='MIN_COMBINED',name=None,round_mode='HALF_AWAY_FROM_ZERO')", "tf.ragged.constant": "tf.ragged.constant(pylist,dtype=None,ragged_rank=None,inner_shape=None,name=None)", "tf.ragged.constant_value": "tf.ragged.constant_value(pylist,dtype=None,ragged_rank=None,inner_shape=None)", "tf.ragged.map_flat_values": "tf.ragged.map_flat_values(op,*args,**kwargs)", "tf.ragged.range": "tf.ragged.range(starts,limits=None,deltas=1,dtype=None,name=None)", "tf.ragged.row_splits_to_segment_ids": "tf.ragged.row_splits_to_segment_ids(splits,name=None)", "tf.ragged.segment_ids_to_row_splits": "tf.ragged.segment_ids_to_row_splits(segment_ids,num_segments=None,name=None)", "tf.random.categorical": "tf.random.categorical(logits,num_samples,dtype=None,seed=None,name=None)", "tf.random.gamma": "tf.random.gamma(shape,alpha,beta=None,dtype=tf.dtypes.float32,seed=None,name=None)", "tf.random.normal": "tf.random.normal(shape,mean=0.0,stddev=1.0,dtype=tf.dtypes.float32,seed=None,name=None)", "tf.random.poisson": "tf.random.poisson(lam,shape,dtype=tf.dtypes.float32,seed=None,name=None)", "tf.random.set_random_seed": "tf.random.set_random_seed(seed)", "tf.random.shuffle": "tf.random.shuffle(value,seed=None,name=None)", "tf.random.stateless_categorical": "tf.random.stateless_categorical(logits,num_samples,seed,dtype=tf.dtypes.int64,name=None)", "tf.random.truncated_normal": "tf.random.truncated_normal(shape,mean=0.0,stddev=1.0,dtype=tf.dtypes.float32,seed=None,name=None)", "tf.random.uniform": "tf.random.uniform(shape,minval=0,maxval=None,dtype=tf.dtypes.float32,seed=None,name=None)", "tf.range": "tf.range(limit,delta=1,dtype=None,name='range')tf.range(start,limit,delta=1,dtype=None,name='range')", "tf.rank": "tf.rank(input,name=None)", "tf.realdiv": "tf.realdiv(x,y,name=None)", "tf.strings.reduce_join": "tf.strings.reduce_join(inputs,axis=None,keep_dims=False,separator='',name=None,reduction_indices=None)", "tf.strings.regex_replace": "tf.strings.regex_replace(input,pattern,rewrite,replace_global=True,name=None)", "tf.register_tensor_conversion_function": "tf.register_tensor_conversion_function(base_type,conversion_func,priority=100)", "tf.report_uninitialized_variables": "tf.report_uninitialized_variables(var_list=None,name='report_uninitialized_variables')", "tf.required_space_to_batch_paddings": "tf.required_space_to_batch_paddings(input_shape,block_shape,base_paddings=None,name=None)", "tf.reset_default_graph": "tf.reset_default_graph()", "tf.resource_loader.get_data_files_path": "tf.resource_loader.get_data_files_path()", "tf.resource_loader.get_path_to_datafile": "tf.resource_loader.get_path_to_datafile(path)", "tf.resource_loader.get_root_dir_with_all_resources": "tf.resource_loader.get_root_dir_with_all_resources()", "tf.resource_loader.load_resource": "tf.resource_loader.load_resource(path)", "tf.resource_loader.readahead_file_path": "tf.resource_loader.readahead_file_path(path,readahead='128M')", "tf.reverse_sequence": "tf.reverse_sequence(input,seq_lengths,seq_axis=None,batch_axis=None,name=None,seq_dim=None,batch_dim=None)", "tf.saved_model.build_signature_def": "tf.saved_model.build_signature_def(inputs=None,outputs=None,method_name=None)", "tf.saved_model.build_tensor_info": "tf.saved_model.build_tensor_info(tensor)", "tf.saved_model.classification_signature_def": "tf.saved_model.classification_signature_def(examples,classes,scores)", "tf.saved_model.contains_saved_model": "tf.saved_model.contains_saved_model(export_dir)", "tf.saved_model.experimental.save": "tf.saved_model.experimental.save(obj,export_dir,signatures=None)", "tf.saved_model.get_tensor_from_tensor_info": "tf.saved_model.get_tensor_from_tensor_info(tensor_info,graph=None,import_scope=None)", "tf.saved_model.is_valid_signature": "tf.saved_model.is_valid_signature(signature_def)", "tf.saved_model.load": "tf.saved_model.load(sess,tags,export_dir,import_scope=None,**saver_kwargs)", "tf.saved_model.main_op.main_op": "tf.saved_model.main_op.main_op()", "tf.saved_model.main_op_with_restore": "tf.saved_model.main_op_with_restore(restore_op_name)", "tf.saved_model.predict_signature_def": "tf.saved_model.predict_signature_def(inputs,outputs)", "tf.saved_model.regression_signature_def": "tf.saved_model.regression_signature_def(examples,predictions)", "tf.saved_model.simple_save": "tf.saved_model.simple_save(session,export_dir,inputs,outputs,legacy_init_op=None)", "tf.scan": "tf.scan(fn,elems,initializer=None,parallel_iterations=10,back_prop=True,swap_memory=False,infer_shape=True,reverse=False,name=None)", "tf.scatter_add": "tf.scatter_add(ref,indices,updates,use_locking=False,name=None)", "tf.scatter_div": "tf.scatter_div(ref,indices,updates,use_locking=False,name=None)", "tf.scatter_max": "tf.scatter_max(ref,indices,updates,use_locking=False,name=None)", "tf.scatter_min": "tf.scatter_min(ref,indices,updates,use_locking=False,name=None)", "tf.scatter_mul": "tf.scatter_mul(ref,indices,updates,use_locking=False,name=None)", "tf.scatter_nd_add": "tf.scatter_nd_add(ref,indices,updates,use_locking=False,name=None)", "tf.scatter_nd_sub": "tf.scatter_nd_sub(ref,indices,updates,use_locking=False,name=None)", "tf.scatter_nd_update": "tf.scatter_nd_update(ref,indices,updates,use_locking=True,name=None)", "tf.scatter_sub": "tf.scatter_sub(ref,indices,updates,use_locking=False,name=None)", "tf.scatter_update": "tf.scatter_update(ref,indices,updates,use_locking=True,name=None)", "tf.searchsorted": "tf.searchsorted(sorted_sequence,values,side='left',out_type=tf.dtypes.int32,name=None)", "tf.sequence_mask": "tf.sequence_mask(lengths,maxlen=None,dtype=tf.dtypes.bool,name=None)", "tf.setdiff1d": "tf.setdiff1d(x,y,index_dtype=tf.dtypes.int32,name=None)", "tf.shape": "tf.shape(input,name=None,out_type=tf.dtypes.int32)", "tf.shape_n": "tf.shape_n(input,out_type=tf.dtypes.int32,name=None)", "tf.signal.dct": "tf.signal.dct(input,type=2,n=None,axis=-1,norm=None,name=None)", "tf.signal.idct": "tf.signal.idct(input,type=2,n=None,axis=-1,norm=None,name=None)", "tf.signal.irfft": "tf.signal.irfft(input_tensor,fft_length=None,name=None)", "tf.signal.irfft2d": "tf.signal.irfft2d(input_tensor,fft_length=None,name=None)", "tf.signal.irfft3d": "tf.signal.irfft3d(input_tensor,fft_length=None,name=None)", "tf.signal.rfft": "tf.signal.rfft(input_tensor,fft_length=None,name=None)", "tf.signal.rfft2d": "tf.signal.rfft2d(input_tensor,fft_length=None,name=None)", "tf.signal.rfft3d": "tf.signal.rfft3d(input_tensor,fft_length=None,name=None)", "tf.size": "tf.size(input,name=None,out_type=tf.dtypes.int32)", "tf.slice": "tf.slice(input_,begin,size,name=None)", "tf.sparse.add": "tf.sparse.add(a,b,threshold=None,thresh=None)", "tf.sparse.concat": "tf.sparse.concat(axis,sp_inputs,name=None,expand_nonconcat_dim=False,concat_dim=None)", "tf.sparse.cross": "tf.sparse.cross(inputs,name=None)", "tf.sparse.cross_hashed": "tf.sparse.cross_hashed(inputs,num_buckets=0,hash_key=None,name=None)", "tf.sparse.expand_dims": "tf.sparse.expand_dims(sp_input,axis=None,name=None)", "tf.sparse.eye": "tf.sparse.eye(num_rows,num_columns=None,dtype=tf.dtypes.float32,name=None)", "tf.sparse.fill_empty_rows": "tf.sparse.fill_empty_rows(sp_input,default_value,name=None)", "tf.sparse.mask": "tf.sparse.mask(a,mask_indices,name=None)", "tf.sparse.sparse_dense_matmul": "tf.sparse.sparse_dense_matmul(sp_a,b,adjoint_a=False,adjoint_b=False,name=None)", "tf.sparse.maximum": "tf.sparse.maximum(sp_a,sp_b,name=None)", "tf.sparse.merge": "tf.sparse.merge(sp_ids,sp_values,vocab_size,name=None,already_sorted=False)", "tf.sparse.minimum": "tf.sparse.minimum(sp_a,sp_b,name=None)", "tf.sparse.placeholder": "tf.sparse.placeholder(dtype,shape=None,name=None)", "tf.sparse.reduce_max": "tf.sparse.reduce_max(sp_input,axis=None,keepdims=None,reduction_axes=None,keep_dims=None)", "tf.sparse.reduce_max_sparse": "tf.sparse.reduce_max_sparse(sp_input,axis=None,keepdims=None,reduction_axes=None,keep_dims=None)", "tf.sparse.reduce_sum": "tf.sparse.reduce_sum(sp_input,axis=None,keepdims=None,reduction_axes=None,keep_dims=None)", "tf.sparse.reduce_sum_sparse": "tf.sparse.reduce_sum_sparse(sp_input,axis=None,keepdims=None,reduction_axes=None,keep_dims=None)", "tf.sparse.reorder": "tf.sparse.reorder(sp_input,name=None)", "tf.sparse.reset_shape": "tf.sparse.reset_shape(sp_input,new_shape=None)", "tf.sparse.reshape": "tf.sparse.reshape(sp_input,shape,name=None)", "tf.sparse.retain": "tf.sparse.retain(sp_input,to_retain)", "tf.sparse.segment_mean": "tf.sparse.segment_mean(data,indices,segment_ids,name=None,num_segments=None)", "tf.sparse.segment_sqrt_n": "tf.sparse.segment_sqrt_n(data,indices,segment_ids,name=None,num_segments=None)", "tf.sparse.segment_sum": "tf.sparse.segment_sum(data,indices,segment_ids,name=None,num_segments=None)", "tf.sparse.slice": "tf.sparse.slice(sp_input,start,size,name=None)", "tf.sparse.softmax": "tf.sparse.softmax(sp_input,name=None)", "tf.sparse.split": "tf.sparse.split(keyword_required=KeywordRequired(),sp_input=None,num_split=None,axis=None,name=None,split_dim=None)", "tf.sparse.to_dense": "tf.sparse.to_dense(sp_input,default_value=0,validate_indices=True,name=None)", "tf.sparse.to_indicator": "tf.sparse.to_indicator(sp_input,vocab_size,name=None)", "tf.sparse.transpose": "tf.sparse.transpose(sp_input,perm=None,name=None)", "tf.sparse_matmul": "tf.sparse_matmul(a,b,transpose_a=False,transpose_b=False,a_is_sparse=False,b_is_sparse=False,name=None)", "tf.sparse_to_dense": "tf.sparse_to_dense(sparse_indices,output_shape,sparse_values,default_value=0,validate_indices=True,name=None)", "tf.split": "tf.split(value,num_or_size_splits,axis=0,num=None,name='split')", "tf.squeeze": "tf.squeeze(input,axis=None,name=None,squeeze_dims=None)", "tf.stack": "tf.stack(values,axis=0,name='stack')", "tf.stop_gradient": "tf.stop_gradient(input,name=None)", "tf.strided_slice": "tf.strided_slice(input_,begin,end,strides=None,begin_mask=0,end_mask=0,ellipsis_mask=0,new_axis_mask=0,shrink_axis_mask=0,var=None,name=None)", "tf.strings.join": "tf.strings.join(inputs,separator='',name=None)", "tf.string_split": "tf.string_split(source,delimiter='',skip_empty=True)", "tf.strings.strip": "tf.strings.strip(input,name=None)", "tf.strings.to_hash_bucket": "tf.strings.to_hash_bucket(string_tensor,num_buckets,name=None)", "tf.strings.to_hash_bucket_fast": "tf.strings.to_hash_bucket_fast(input,num_buckets,name=None)", "tf.strings.to_hash_bucket_strong": "tf.strings.to_hash_bucket_strong(input,num_buckets,key,name=None)", "tf.strings.to_number": "tf.strings.to_number(string_tensor,out_type=tf.dtypes.float32,name=None)", "tf.strings.format": "tf.strings.format(template,inputs,placeholder='{}',summarize=3,name=None)", "tf.strings.length": "tf.strings.length(input,name=None,unit='BYTE')", "tf.strings.regex_full_match": "tf.strings.regex_full_match(input,pattern,name=None)", "tf.strings.split": "tf.strings.split(source,sep=None,maxsplit=-1)", "tf.strings.substr": "tf.strings.substr(input,pos,len,name=None,unit='BYTE')", "tf.strings.unicode_decode": "tf.strings.unicode_decode(input,input_encoding,errors='replace',replacement_char=65533,replace_control_characters=False,name=None)", "tf.strings.unicode_decode_with_offsets": "tf.strings.unicode_decode_with_offsets(input,input_encoding,errors='replace',replacement_char=65533,replace_control_characters=False,name=None)", "tf.strings.unicode_encode": "tf.strings.unicode_encode(input,output_encoding,errors='replace',replacement_char=65533,name=None)", "tf.strings.unicode_script": "tf.strings.unicode_script(input,name=None)", "tf.strings.unicode_split": "tf.strings.unicode_split(input,input_encoding,errors='replace',replacement_char=65533,name=None)", "tf.strings.unicode_split_with_offsets": "tf.strings.unicode_split_with_offsets(input,input_encoding,errors='replace',replacement_char=65533,name=None)", "tf.strings.unicode_transcode": "tf.strings.unicode_transcode(input,input_encoding,output_encoding,errors='replace',replacement_char=65533,replace_control_characters=False,name=None)", "tf.substr": "tf.substr(input,pos,len,name=None,unit='BYTE')", "tf.summary.audio": "tf.summary.audio(name,tensor,sample_rate,max_outputs=3,collections=None,family=None)", "tf.summary.get_summary_description": "tf.summary.get_summary_description(node_def)", "tf.summary.histogram": "tf.summary.histogram(name,values,collections=None,family=None)", "tf.summary.image": "tf.summary.image(name,tensor,max_outputs=3,collections=None,family=None)", "tf.summary.merge": "tf.summary.merge(inputs,collections=None,name=None)", "tf.summary.merge_all": "tf.summary.merge_all(key=tf.GraphKeys.SUMMARIES,scope=None,name=None)", "tf.summary.scalar": "tf.summary.scalar(name,tensor,collections=None,family=None)", "tf.summary.tensor_summary": "tf.summary.tensor_summary(name,tensor,summary_description=None,collections=None,summary_metadata=None,family=None,display_name=None)", "tf.summary.text": "tf.summary.text(name,tensor,collections=None)", "tf.sysconfig.get_compile_flags": "tf.sysconfig.get_compile_flags()", "tf.sysconfig.get_include": "tf.sysconfig.get_include()", "tf.sysconfig.get_lib": "tf.sysconfig.get_lib()", "tf.sysconfig.get_link_flags": "tf.sysconfig.get_link_flags()", "tf.tensor_scatter_add": "tf.tensor_scatter_add(tensor,indices,updates,name=None)", "tf.tensor_scatter_sub": "tf.tensor_scatter_sub(tensor,indices,updates,name=None)", "tf.tensor_scatter_update": "tf.tensor_scatter_update(tensor,indices,updates,name=None)", "tf.test.assert_equal_graph_def": "tf.test.assert_equal_graph_def(actual,expected,checkpoint_v2=False)", "tf.test.benchmark_config": "tf.test.benchmark_config()", "tf.test.compute_gradient": "tf.test.compute_gradient(x,x_shape,y,y_shape,x_init_value=None,delta=0.001,init_targets=None,extra_feed_dict=None)", "tf.test.compute_gradient_error": "tf.test.compute_gradient_error(x,x_shape,y,y_shape,x_init_value=None,delta=0.001,init_targets=None,extra_feed_dict=None)", "tf.test.create_local_cluster": "tf.test.create_local_cluster(num_workers,num_ps,protocol='grpc',worker_config=None,ps_config=None)", "tf.test.get_temp_dir": "tf.test.get_temp_dir()", "tf.test.gpu_device_name": "tf.test.gpu_device_name()", "tf.test.is_built_with_cuda": "tf.test.is_built_with_cuda()", "tf.test.is_gpu_available": "tf.test.is_gpu_available(cuda_only=False,min_cuda_compute_capability=None)", "tf.test.main": "tf.test.main(argv=None)", "tf.test.test_src_dir_path": "tf.test.test_src_dir_path(relative_path)", "tf.timestamp": "tf.timestamp(name=None)", "tf.to_bfloat16": "tf.to_bfloat16(x,name='ToBFloat16')", "tf.to_complex128": "tf.to_complex128(x,name='ToComplex128')", "tf.to_complex64": "tf.to_complex64(x,name='ToComplex64')", "tf.to_double": "tf.to_double(x,name='ToDouble')", "tf.to_float": "tf.to_float(x,name='ToFloat')", "tf.to_int32": "tf.to_int32(x,name='ToInt32')", "tf.to_int64": "tf.to_int64(x,name='ToInt64')", "tf.train.MonitoredTrainingSession": "tf.train.MonitoredTrainingSession(master='',is_chief=True,checkpoint_dir=None,scaffold=None,hooks=None,chief_only_hooks=None,save_checkpoint_secs=USE_DEFAULT,save_summaries_steps=USE_DEFAULT,save_summaries_secs=USE_DEFAULT,config=None,stop_grace_period_secs=120,log_step_count_steps=100,max_wait_secs=7200,save_checkpoint_steps=USE_DEFAULT,summary_dir=None)", "tf.train.NewCheckpointReader": "tf.train.NewCheckpointReader(filepattern)", "tf.train.queue_runner.add_queue_runner": "tf.train.queue_runner.add_queue_runner(qr,collection=tf.GraphKeys.QUEUE_RUNNERS)", "tf.train.assert_global_step": "tf.train.assert_global_step(global_step_tensor)", "tf.train.basic_train_loop": "tf.train.basic_train_loop(supervisor,train_step_fn,args=None,kwargs=None,master='')", "tf.train.batch": "tf.train.batch(tensors,batch_size,num_threads=1,capacity=32,enqueue_many=False,shapes=None,dynamic_pad=False,allow_smaller_final_batch=False,shared_name=None,name=None)", "tf.train.batch_join": "tf.train.batch_join(tensors_list,batch_size,capacity=32,enqueue_many=False,shapes=None,dynamic_pad=False,allow_smaller_final_batch=False,shared_name=None,name=None)", "tf.train.checkpoint_exists": "tf.train.checkpoint_exists(checkpoint_prefix)", "tf.train.cosine_decay": "tf.train.cosine_decay(learning_rate,global_step,decay_steps,alpha=0.0,name=None)", "tf.train.cosine_decay_restarts": "tf.train.cosine_decay_restarts(learning_rate,global_step,first_decay_steps,t_mul=2.0,m_mul=1.0,alpha=0.0,name=None)", "tf.train.create_global_step": "tf.train.create_global_step(graph=None)", "tf.train.do_quantize_training_on_graphdef": "tf.train.do_quantize_training_on_graphdef(input_graph,num_bits)", "tf.train.exponential_decay": "tf.train.exponential_decay(learning_rate,global_step,decay_steps,decay_rate,staircase=False,name=None)", "tf.train.export_meta_graph": "tf.train.export_meta_graph(filename=None,meta_info_def=None,graph_def=None,saver_def=None,collection_list=None,as_text=False,graph=None,export_scope=None,clear_devices=False,clear_extraneous_savers=False,strip_default_attrs=False,**kwargs)", "tf.train.generate_checkpoint_state_proto": "tf.train.generate_checkpoint_state_proto(save_dir,model_checkpoint_path,all_model_checkpoint_paths=None,all_model_checkpoint_timestamps=None,last_preserved_timestamp=None)", "tf.train.get_checkpoint_mtimes": "tf.train.get_checkpoint_mtimes(checkpoint_prefixes)", "tf.train.get_checkpoint_state": "tf.train.get_checkpoint_state(checkpoint_dir,latest_filename=None)", "tf.train.get_global_step": "tf.train.get_global_step(graph=None)", "tf.train.get_or_create_global_step": "tf.train.get_or_create_global_step(graph=None)", "tf.train.global_step": "tf.train.global_step(sess,global_step_tensor)", "tf.train.import_meta_graph": "tf.train.import_meta_graph(meta_graph_or_file,clear_devices=False,import_scope=None,**kwargs)", "tf.train.init_from_checkpoint": "tf.train.init_from_checkpoint(ckpt_dir_or_file,assignment_map)", "tf.train.input_producer": "tf.train.input_producer(input_tensor,element_shape=None,num_epochs=None,shuffle=True,seed=None,capacity=32,shared_name=None,summary_name=None,name=None,cancel_op=None)", "tf.train.inverse_time_decay": "tf.train.inverse_time_decay(learning_rate,global_step,decay_steps,decay_rate,staircase=False,name=None)", "tf.train.latest_checkpoint": "tf.train.latest_checkpoint(checkpoint_dir,latest_filename=None)", "tf.train.limit_epochs": "tf.train.limit_epochs(tensor,num_epochs=None,name=None)", "tf.train.linear_cosine_decay": "tf.train.linear_cosine_decay(learning_rate,global_step,decay_steps,num_periods=0.5,alpha=0.0,beta=0.001,name=None)", "tf.train.list_variables": "tf.train.list_variables(ckpt_dir_or_file)", "tf.train.load_checkpoint": "tf.train.load_checkpoint(ckpt_dir_or_file)", "tf.train.load_variable": "tf.train.load_variable(ckpt_dir_or_file,name)", "tf.train.maybe_batch": "tf.train.maybe_batch(tensors,keep_input,batch_size,num_threads=1,capacity=32,enqueue_many=False,shapes=None,dynamic_pad=False,allow_smaller_final_batch=False,shared_name=None,name=None)", "tf.train.maybe_batch_join": "tf.train.maybe_batch_join(tensors_list,keep_input,batch_size,capacity=32,enqueue_many=False,shapes=None,dynamic_pad=False,allow_smaller_final_batch=False,shared_name=None,name=None)", "tf.train.maybe_shuffle_batch": "tf.train.maybe_shuffle_batch(tensors,batch_size,capacity,min_after_dequeue,keep_input,num_threads=1,seed=None,enqueue_many=False,shapes=None,allow_smaller_final_batch=False,shared_name=None,name=None)", "tf.train.maybe_shuffle_batch_join": "tf.train.maybe_shuffle_batch_join(tensors_list,batch_size,capacity,min_after_dequeue,keep_input,seed=None,enqueue_many=False,shapes=None,allow_smaller_final_batch=False,shared_name=None,name=None)", "tf.train.natural_exp_decay": "tf.train.natural_exp_decay(learning_rate,global_step,decay_steps,decay_rate,staircase=False,name=None)", "tf.train.noisy_linear_cosine_decay": "tf.train.noisy_linear_cosine_decay(learning_rate,global_step,decay_steps,initial_variance=1.0,variance_decay=0.55,num_periods=0.5,alpha=0.0,beta=0.001,name=None)", "tf.train.piecewise_constant_decay": "tf.train.piecewise_constant_decay(x,boundaries,values,name=None)", "tf.train.polynomial_decay": "tf.train.polynomial_decay(learning_rate,global_step,decay_steps,end_learning_rate=0.0001,power=1.0,cycle=False,name=None)", "tf.train.queue_runner.start_queue_runners": "tf.train.queue_runner.start_queue_runners(sess=None,coord=None,daemon=True,start=True,collection=tf.GraphKeys.QUEUE_RUNNERS)", "tf.train.range_input_producer": "tf.train.range_input_producer(limit,num_epochs=None,shuffle=True,seed=None,capacity=32,shared_name=None,name=None)", "tf.train.remove_checkpoint": "tf.train.remove_checkpoint(checkpoint_prefix,checkpoint_format_version=tf.train.SaverDef.V2,meta_graph_suffix='meta')", "tf.train.replica_device_setter": "tf.train.replica_device_setter(ps_tasks=0,ps_device='/job:ps',worker_device='/job:worker',merge_devices=True,cluster=None,ps_ops=None,ps_strategy=None)", "tf.train.sdca_fprint": "tf.train.sdca_fprint(input,name=None)", "tf.train.sdca_optimizer": "tf.train.sdca_optimizer(sparse_example_indices,sparse_feature_indices,sparse_feature_values,dense_features,example_weights,example_labels,sparse_indices,sparse_weights,dense_weights,example_state_data,loss_type,l1,l2,num_loss_partitions,num_inner_iterations,adaptative=True,name=None)", "tf.train.sdca_shrink_l1": "tf.train.sdca_shrink_l1(weights,l1,l2,name=None)", "tf.train.shuffle_batch": "tf.train.shuffle_batch(tensors,batch_size,capacity,min_after_dequeue,num_threads=1,seed=None,enqueue_many=False,shapes=None,allow_smaller_final_batch=False,shared_name=None,name=None)", "tf.train.shuffle_batch_join": "tf.train.shuffle_batch_join(tensors_list,batch_size,capacity,min_after_dequeue,seed=None,enqueue_many=False,shapes=None,allow_smaller_final_batch=False,shared_name=None,name=None)", "tf.train.slice_input_producer": "tf.train.slice_input_producer(tensor_list,num_epochs=None,shuffle=True,seed=None,capacity=32,shared_name=None,name=None)", "tf.train.string_input_producer": "tf.train.string_input_producer(string_tensor,num_epochs=None,shuffle=True,seed=None,capacity=32,shared_name=None,name=None,cancel_op=None)", "tf.train.summary_iterator": "tf.train.summary_iterator(path)", "tf.train.update_checkpoint_state": "tf.train.update_checkpoint_state(save_dir,model_checkpoint_path,all_model_checkpoint_paths=None,latest_filename=None,all_model_checkpoint_timestamps=None,last_preserved_timestamp=None)", "tf.train.warm_start": "tf.train.warm_start(ckpt_to_initialize_from,vars_to_warm_start='.*',var_name_to_vocab_info=None,var_name_to_prev_var_name=None)", "tf.trainable_variables": "tf.trainable_variables(scope=None)", "tf.transpose": "tf.transpose(a,perm=None,name='transpose',conjugate=False)", "tf.truncatediv": "tf.truncatediv(x,y,name=None)", "tf.truncatemod": "tf.truncatemod(x,y,name=None)", "tf.tuple": "tf.tuple(tensors,name=None,control_inputs=None)", "tf.unique": "tf.unique(x,out_idx=tf.dtypes.int32,name=None)", "tf.unique_with_counts": "tf.unique_with_counts(x,out_idx=tf.dtypes.int32,name=None)", "tf.unravel_index": "tf.unravel_index(indices,dims,name=None)", "tf.unstack": "tf.unstack(value,num=None,axis=0,name='unstack')", "tf.variable_axis_size_partitioner": "tf.variable_axis_size_partitioner(max_shard_bytes,axis=0,bytes_per_string_element=16,max_shards=None)", "tf.variable_creator_scope": "tf.variable_creator_scope(variable_creator)", "tf.variable_op_scope": "tf.variable_op_scope(values,name_or_scope,default_name=None,initializer=None,regularizer=None,caching_device=None,partitioner=None,custom_getter=None,reuse=None,dtype=None,use_resource=None,constraint=None)", "tf.where": "tf.where(condition,x=None,y=None,name=None)", "tf.while_loop": "tf.while_loop(cond,body,loop_vars,shape_invariants=None,parallel_iterations=10,back_prop=True,swap_memory=False,name=None,maximum_iterations=None,return_same_structure=False)", "tf.wrap_function": "tf.wrap_function(fn,signature,name=None)", "tf.zeros": "tf.zeros(shape,dtype=tf.dtypes.float32,name=None)", "tf.zeros_like": "tf.zeros_like(tensor,dtype=None,name=None,optimize=True)"}