{% from 'file_utils.j2' import load_npy, load_csv, load_img_dir %}

global trn_gens_args_{{layer_id}}, val_gens_args_{{layer_id}}, tst_gens_args_{{layer_id}}
trn_gens_args_{{layer_id}}, val_gens_args_{{layer_id}}, tst_gens_args_{{layer_id}} = [], [], []

{% filter remove_lspaces(8) %}
    {% for idx, source, partition in zip(range(0, len(sources)), sources, partitions): %}
        {% set tag = str(layer_id)+'_'+str(idx) %}

        {% filter remove_lspaces(8) %}        
            {% if source['type'] == 'file' and source['ext'] == '.npy' %}
                {{ load_npy(source['path'], tag) }}
            {% elif source['type'] == 'file' and source['ext'] == '.csv' %}
                {{ load_csv(source['path'], tag) }}
            {% elif source['type'] == 'directory' and source['ext'] in ['.jpg', '.png', '.jpeg', '.tif', '.tiff'] %}
                {{ load_img_dir(source['path'], tag) }}
            {% endif %}
        {% endfilter %}

        trn_sz = round({{partition[0]}}*size_{{tag}})
        val_sz = round({{partition[1]}}*size_{{tag}})
        tst_sz = size_{{tag}} - trn_sz - val_sz
        
        trn_gens_args_{{layer_id}}.append((generator_{{tag}}, 0, trn_sz))
        val_gens_args_{{layer_id}}.append((generator_{{tag}}, trn_sz, trn_sz+val_sz))
        tst_gens_args_{{layer_id}}.append((generator_{{tag}}, trn_sz+val_sz, trn_sz+val_sz+tst_sz))
    {% endfor %}
{% endfilter %}
    
def make_generator_trn_{{layer_id}}():
    global trn_gens_args_{{layer_id}}

    def gen():
        for f, lo, hi in trn_gens_args_{{layer_id}}:
            yield from f(lo, hi)
    return gen()

def make_generator_val_{{layer_id}}():
    global val_gens_args_{{layer_id}}

    def gen():
        for f, lo, hi in val_gens_args_{{layer_id}}:
            yield from f(lo, hi)
    return gen()

def make_generator_tst_{{layer_id}}():
    global tst_gens_args_{{layer_id}}

    def gen():
        for f, lo, hi in tst_gens_args_{{layer_id}}:
            yield from f(lo, hi)
    return gen()


shapes = [next(f(lo, hi)).shape for f, lo, hi in trn_gens_args_{{layer_id}}]
if len(set(shapes)) > 1:
    raise ValueError("Shape mismatch! Yielded shapes were: " + str(shapes))

sample = _sample = next(make_generator_trn_{{layer_id}}())

# Set up datasets
X_trn = tf.data.Dataset.from_generator(make_generator_trn_{{layer_id}},
                                         output_shapes=sample.shape,
                                         output_types=np.float32)

X_val = tf.data.Dataset.from_generator(make_generator_val_{{layer_id}},
                                         output_shapes=sample.shape,
                                         output_types=np.float32)

X_tst = tf.data.Dataset.from_generator(make_generator_tst_{{layer_id}},
                                        output_shapes=sample.shape,
                                        output_types=np.float32)
{% filter remove_lspaces(8) %}
    {% if shuffle and shuffle_buffer_size is none %}
        X_trn = X_trn.shuffle(trn_size_{{layer_id}}, seed={{seed}}).batch({{batch_size}})
    {% elif shuffle and shuffle_buffer_size is not none %}
        X_trn = X_trn.shuffle({{shuffle_buffer_size}}, seed={{seed}}).batch({{batch_size}})
    {% endif %}
{% endfilter %}

X_trn = X_trn.batch({{batch_size}})
X_val = X_val.batch({{batch_size}})
X_tst = X_tst.batch(1)

# Create iterators
iterator = tf.data.Iterator.from_structure(X_trn.output_types, X_trn.output_shapes)
trn_init = iterator.make_initializer(X_trn, name='trn_iterator_{{layer_id}}')
val_init = iterator.make_initializer(X_val, name='val_iterator_{{layer_id}}')
tst_init = iterator.make_initializer(X_tst, name='tst_iterator_{{layer_id}}')

Y = iterator.get_next()
