{% macro run_normal(graph, layer_name, output_layer, target_layer, n_epochs, class_weights, optimizer, learning_rate, decay_steps, decay_rate, momentum, beta1, beta2, distributed, export_directory) %}
        self._status = 'initializing'

        self._grid_size = 5
        self._classes = ['rectangle','triangle','circle']
        self._num_class = len(self._classes)
        self._num_box = 2 #number of boxes per cell
        
        w_img = 224
        h_img = 224

        self._lambdacoord = 5.0
        self._lambdanoobj = 0.5
        
        # we need classes
        
        output_layer_id = '{{output_layer}}'
        target_layer_id = '{{target_layer}}'
        input_data_nodes = graph.get_direct_data_nodes(output_layer_id)
        label_data_nodes = graph.get_direct_data_nodes(target_layer_id)
        assert len(input_data_nodes) == 1
        assert len(label_data_nodes) == 1
        input_data_node = input_data_nodes[0]
        label_data_node = label_data_nodes[0]

        self._input_data_node = input_data_node.layer_id

        self._trn_sz_tot = input_data_node.layer.size_training
        self._val_sz_tot = input_data_node.layer.size_validation
        self._tst_sz_tot = input_data_node.layer.size_testing

        # Make training set
        dataset_trn = tf.data.Dataset.zip((
            tf.data.Dataset.from_generator(
                input_data_node.layer_instance.make_generator_training,
                output_shapes=input_data_node.layer_instance.sample.shape,
                output_types=np.float32                
            ),
            tf.data.Dataset.from_generator(
                label_data_node.layer_instance.make_generator_training,
                output_shapes=label_data_node.layer_instance.sample.shape,
                output_types=np.float32
            )
        ))

        # Make validation set
        dataset_val = tf.data.Dataset.zip((
            tf.data.Dataset.from_generator(
                input_data_node.layer_instance.make_generator_validation,
                output_shapes=input_data_node.layer_instance.sample.shape,
                output_types=np.float32                
            ),
            tf.data.Dataset.from_generator(
                label_data_node.layer_instance.make_generator_validation,
                output_shapes=label_data_node.layer_instance.sample.shape,
                output_types=np.float32
            )
        ))

        # Make testing set
        dataset_tst = tf.data.Dataset.zip((
            tf.data.Dataset.from_generator(
                input_data_node.layer_instance.make_generator_testing,
                output_shapes=input_data_node.layer_instance.sample.shape,
                output_types=np.float32                
            ),
            tf.data.Dataset.from_generator(
                label_data_node.layer_instance.make_generator_testing,
                output_shapes=label_data_node.layer_instance.sample.shape,
                output_types=np.float32
            )
        ))

        dataset_trn = dataset_trn.batch(self._batch_size)
        dataset_val = dataset_val.batch(self._batch_size)
        dataset_tst = dataset_tst.batch(1)                

        # Make initializers
        iterator = tf.data.Iterator.from_structure(dataset_trn.output_types, dataset_trn.output_shapes)
        trn_init = iterator.make_initializer(dataset_trn)
        val_init = iterator.make_initializer(dataset_val)
        tst_init = iterator.make_initializer(dataset_tst)        
        input_tensor, label_tensor = iterator.get_next()

        # Build the TensorFlow graph # TODO: perhaps this part can be delegated to the graph?

        def build_graph(input_tensor, label_tensor):
            layer_output_tensors = {
                input_data_node.layer_id: input_tensor,
                label_data_node.layer_id: label_tensor
            }

            for node in graph.inner_nodes:
                args = []
                for input_node in graph.get_input_nodes(node):
                    args.append(layer_output_tensors[input_node.layer_id])
                    y = node.layer_instance(*args)
                layer_output_tensors[node.layer_id] = y


            return layer_output_tensors
        
        layer_output_tensors = build_graph(input_tensor, label_tensor)
        output_tensor = layer_output_tensors[output_layer_id]
        target_tensor = layer_output_tensors[target_layer_id]
        
        # Create an exportable version of the TensorFlow graph
        self._input_tensor_export = tf.placeholder(shape=dataset_trn.output_shapes[0], dtype=dataset_trn.output_types[0])
        self._output_tensor_export = build_graph(
            self._input_tensor_export,
            tf.placeholder(shape=dataset_trn.output_shapes[1], dtype=dataset_trn.output_types[1])
        )[output_layer_id]

        # loss function here
        def compute_iou(boxes1, boxes2):
            """calculate ious
            Args:
            boxes1: 5-D tensor [self._batch_size, self._grid_size, self._grid_size, self._num_box, 4]  ====> (x_center, y_center, w, h)
            boxes2: 5-D tensor [self._batch_size, self._grid_size, self._grid_size, self._num_box, 4] ===> (x_center, y_center, w, h)
            Return:
            iou: 4-D tensor [self._batch_size, self._grid_size, self._grid_size, self._num_box]
            """
            # transform (x_center, y_center, w, h) to (x1, y1, x2, y2)
            boxes1_t = tf.stack([boxes1[..., 0] - boxes1[..., 2] / 2.0,
                                boxes1[..., 1] - boxes1[..., 3] / 2.0,
                                boxes1[..., 0] + boxes1[..., 2] / 2.0,
                                boxes1[..., 1] + boxes1[..., 3] / 2.0],
                                axis=-1)

            boxes2_t = tf.stack([boxes2[..., 0] - boxes2[..., 2] / 2.0,
                                boxes2[..., 1] - boxes2[..., 3] / 2.0,
                                boxes2[..., 0] + boxes2[..., 2] / 2.0,
                                boxes2[..., 1] + boxes2[..., 3] / 2.0],
                                axis=-1)
            # calculate the left up point & right down point
            lu = tf.maximum(boxes1_t[..., :2], boxes2_t[..., :2])
            rd = tf.minimum(boxes1_t[..., 2:], boxes2_t[..., 2:])
            # intersection
            intersection = tf.maximum(0.0, rd - lu)
            inter_square = intersection[..., 0] * intersection[..., 1]
            # calculate the boxs1 square and boxs2 square
            square1 = boxes1[..., 2] * boxes1[..., 3]
            square2 = boxes2[..., 2] * boxes2[..., 3]
            union_square = tf.maximum(square1 + square2 - inter_square, 1e-10)
            return tf.clip_by_value(inter_square / union_square, 0.0, 1.0)  

        def loss_fn(output, labels):
            """calculate loss function
            Args:
            output: 4-D tensor [self._batch_size, self._grid_size, self._grid_size, 5*self._num_box+self._num_class] 
            labels: 4-D tensor [self._batch_size, self._grid_size, self._grid_size, 5+self._num_class]
            Return:
            loss: scalar
            """
            # first step: reshape the output
            output = tf.reshape(output, shape = [self._batch_size, self._grid_size, self._grid_size, 5*self._num_box+self._num_class])
            offset = np.transpose(np.reshape(np.array(
                [np.arange(self._grid_size)] * self._grid_size * self._num_box),
                (self._num_box, self._grid_size, self._grid_size)), (1, 2, 0))
            offset = offset[None, :]
            offset = tf.constant(offset, dtype=tf.float32)
            offset_tran = tf.transpose(offset, (0, 2, 1, 3))
            
            predicted_object = output[..., :self._num_box]
            
            
            predict_box_offset = tf.reshape(output[...,self._num_box:5*self._num_box], (-1, self._grid_size, self._grid_size, self._num_box, 4))
            
            
            predicted_class = output[...,5*self._num_box:]
            
            
            predicted_normalized_box = tf.stack(
                                        [(predict_box_offset[..., 0] + offset) / self._grid_size,
                                        (predict_box_offset[..., 1] + offset_tran) / self._grid_size,
                                        tf.square(predict_box_offset[..., 2]),
                                        tf.square(predict_box_offset[..., 3])], axis=-1)

            
            true_object = labels[..., :1]
            true_box = tf.reshape(labels[..., 1:5], (-1, self._grid_size, self._grid_size, 1, 4))
            
            true_normalized_box = tf.tile(true_box, (1, 1, 1, self._num_box, 1))/w_img
            true_class = labels[..., 5:]
            
            true_box_offset =  tf.stack(
                                        [true_normalized_box[..., 0] * self._grid_size - offset,
                                        true_normalized_box[..., 1] * self._grid_size - offset_tran,
                                        tf.sqrt(true_normalized_box[..., 2]),
                                        tf.sqrt(true_normalized_box[..., 3])], axis=-1)
            
            predict_iou = compute_iou(true_normalized_box, predicted_normalized_box)
            
            object_mask = tf.reduce_max(predict_iou, 3, keepdims=True)  
                        
            object_mask = tf.cast((predict_iou>=object_mask), tf.float32)*true_object

            noobject_mask = tf.ones_like(object_mask) - object_mask
            
            ## class loss
            class_delta = true_object*(predicted_class - true_class)
            class_loss = tf.reduce_mean(tf.reduce_sum(tf.square(class_delta), axis=[1,2,3]))
            
            ## object loss
            object_delta = object_mask*(predicted_object - predict_iou)
            object_loss = tf.reduce_mean(tf.reduce_sum(tf.square(object_delta), axis=[1,2,3]))
            
            ## noobject loss
            noobject_delta = noobject_mask*predicted_object
            noobject_loss = tf.reduce_mean(tf.reduce_sum(tf.square(noobject_delta), axis=[1,2,3]))
            
            ## coord loss
            box_mask = tf.expand_dims(object_mask, 4)
            box_delta = box_mask*(predict_box_offset - true_box_offset)
            box_loss = tf.reduce_mean(tf.reduce_sum(tf.square(box_delta), axis=[1,2,3]))
            

            loss = 0.5*class_loss + object_loss + 0.1*noobject_loss + 10*box_loss

            # accuracy

            correct_predictions =  tf.equal(tf.argmax(predicted_class, axis =3), tf.argmax(true_class, axis = 3) )
            
            image_accuracy =  tf.reduce_mean(tf.cast(correct_predictions, tf.float32), axis = [1,2])[-1]
            total_accuracy =tf.reduce_mean(tf.cast(correct_predictions, tf.float32))
            return loss, class_loss, box_loss, predicted_object, predicted_class, predicted_normalized_box, image_accuracy, total_accuracy

        loss_tensor, classification_loss_tensor, bbox_loss_tensor, predicted_object, predicted_class, predicted_normalized_box, image_accuracy_tensor, accuracy_tensor = loss_fn(output_tensor, target_tensor)
        
        #training
        global_step = None
        {% filter remove_lspaces(8) %}        
            {% if optimizer == 'tf.compat.v1.train.GradientDescentOptimizer' %}
                optimizer = tf.compat.v1.train.GradientDescentOptimizer(learning_rate={{learning_rate}})
            {% elif optimizer == 'tf.compat.v1.train.MomentumOptimizer' %}
                global_step = tf.Variable(0)
                learning_rate_momentum = tf.train.exponential_decay(
                    learning_rate={{learning_rate}},
                    global_step=global_step,
                    decay_steps={{decay_steps}},
                    decay_rate={{decay_rate}},
                    staircase=True
                )
                optimizer = tf.train.MomentumOptimizer(learning_rate=learning_rate_momentum, momentum={{momentum}})
            {% elif optimizer == 'tf.compat.v1.train.AdamOptimizer' %}
                optimizer = tf.train.AdamOptimizer(learning_rate={{learning_rate}}, beta1={{beta1}}, beta2={{beta2}})
            {% elif optimizer == 'tf.compat.v1.train.AdagradOptimizer' %}
                optimizer = tf.compat.v1.train.AdagradOptimizer(learning_rate={{learning_rate}})            
            {% elif optimizer == 'tf.compat.v1.train.RmsPropOptimizer' %}
                optimizer = tf.compat.v1.train.RMSPropOptimizer(learning_rate={{learning_rate}})                        
            {% else %}
                raise NotImplementedError('Optimizer {{optimizer}} not supported yet')
            {% endif %}
        {% endfilter %}

        layer_weight_tensors = {}
        layer_bias_tensors = {}        
        layer_gradient_tensors = {}
        for node in graph.inner_nodes:
            if not isinstance(node.layer, Tf1xLayer): # In case of pure custom layers...
                continue
            
            layer_weight_tensors[node.layer_id] = node.layer.weights
            layer_bias_tensors[node.layer_id] = node.layer.biases            
            
            if len(node.layer.trainable_variables) > 0:
                gradients = {}
                for name, tensor in node.layer.trainable_variables.items():
                    grad_tensor = tf.gradients(loss_tensor, tensor)
                    if any(x is None for x in grad_tensor):
                        grad_tensor = tf.constant(0)
                    gradients[name] = grad_tensor
                layer_gradient_tensors[node.layer_id] = gradients
                # self._internal_layer_gradients[node.layer_id] = {name: [] for name in node.layer.trainable_variables.keys()} # Initialize
                # self._layer_gradients = self._internal_layer_gradients.copy()

        trainable_vars = tf.trainable_variables() # TODO: safer to get from nodes. Especially with split graph in mind.
        grads = tf.gradients(loss_tensor, trainable_vars)
        update_weights = optimizer.apply_gradients(zip(grads, trainable_vars), global_step=global_step)        

        config = tf.ConfigProto()
        config.gpu_options.allow_growth = True
        sess = tf.Session(config=config)
        self._sess = sess

        trackable_variables = {}
        trackable_variables.update({x.name: x for x in tf.trainable_variables() if isinstance(x, Trackable)})
        trackable_variables.update({k: v for k, v in locals().items() if isinstance(v, Trackable) and not isinstance(v, tf.python.data.ops.iterator_ops.Iterator)}) # TODO: Iterators based on 'stateful functions' cannot be serialized.
        self._checkpoint = tf.train.Checkpoint(**trackable_variables)
        sess.run(tf.global_variables_initializer())
        
        {% filter remove_lspaces(8) %}
            {% if export_directory is not none %}        
                path = tf.train.latest_checkpoint('{{export_directory}}')
                status = self._checkpoint.restore(path)
                status.assert_consumed().run_restore_ops(session=self._sess)
            {% endif %}
        {% endfilter %}                    
        
        def train_step():
            if not self._headless:
                _, self._predicted_object, self._predicted_class, self._predicted_normalized_box, self._classification_loss_training, self._bbox_loss_training, self._loss_training, self._accuracy_training, \
                    self._image_accuracy, self._layer_outputs, self._layer_weights, self._layer_biases, \
                    self._layer_gradients \
                    = sess.run([
                        update_weights, predicted_object, predicted_class, predicted_normalized_box, classification_loss_tensor, bbox_loss_tensor, loss_tensor, accuracy_tensor,
                        image_accuracy_tensor, layer_output_tensors, layer_weight_tensors, layer_bias_tensors, layer_gradient_tensors
                    ])
                #print( 'type of self.image_accuracy is ' + str(type(self._image_accuracy)))
                #print( 'self.image_accuracy is ' + str(self._image_accuracy))
            else:
                _, self._classification_loss_training, self._bbox_loss_training, self._loss_training, self._accuracy_training, \
                    = sess.run([
                        update_weights, classification_loss_tensor, bbox_loss_tensor, loss_tensor, accuracy_tensor
                    ])

        def validation_step():
            if not self._headless:
                self._predicted_object, self._predicted_class, self._predicted_normalized_box, self._classification_loss_validation, self._bbox_loss_validation, self._loss_validation, self._accuracy_validation, \
                    self._image_accuracy, self._layer_outputs, self._layer_weights, self._layer_biases, \
                    self._layer_gradients \
                    = sess.run([
                        predicted_object, predicted_class, predicted_normalized_box, classification_loss_tensor, bbox_loss_tensor, loss_tensor, accuracy_tensor,
                        image_accuracy_tensor, layer_output_tensors, layer_weight_tensors, layer_bias_tensors, layer_gradient_tensors
                    ])
            else:
                self._classification_loss_validation, self._bbox_loss_validation, self._loss_validation, self._accuracy_validation, \
                    = sess.run([
                        classification_loss_tensor, bbox_loss_tensor, loss_tensor, accuracy_tensor
                    ])

            
        def test_step():
            self._predicted_object, self._predicted_class, self._predicted_normalized_box, self._classification_loss_testing, self._bbox_loss_testing, self._loss_testing, self._accuracy_testing, \
                self._image_accuracy, self._layer_outputs, self._layer_weights, self._layer_gradients \
                = sess.run([
                    predicted_object, predicted_class, predicted_normalized_box, classification_loss_tensor, bbox_loss_tensor, loss_tensor, accuracy_tensor,
                    image_accuracy_tensor, layer_output_tensors, layer_weight_tensors, layer_gradient_tensors
                ])
            #accuracy_list.append(acc)
            #loss_list.append(loss)

        self._variables = {k: v for k, v in locals().items() if can_serialize(v)}

        log.info("Entering training loop")
        
        # Training loop
        self._epoch = 0
        print(self._epoch)
        while self._epoch < self._n_epochs and not self._stopped:
            t0 = time.perf_counter()
            self._training_iteration = 0
            self._validation_iteration = 0
            self._status = 'training'
            sess.run(trn_init)            
            try:
                while not self._stopped:
                    train_step()
                    yield YieldLevel.SNAPSHOT
                    self._training_iteration += 1
            except tf.errors.OutOfRangeError:
                pass

            self._status = 'validation'
            sess.run(val_init)            
            try:
                while not self._stopped:
                    validation_step()
                    yield YieldLevel.SNAPSHOT                    
                    self._validation_iteration += 1
            except tf.errors.OutOfRangeError:
                pass
            log.info(
                f"Finished epoch {self._epoch+1}/{self._n_epochs} - "
                f"loss training, validation: {self.loss_training:.6f}, {self.loss_validation:.6f} - "
                f"acc. training, validation: {self.accuracy_training:.6f}, {self.accuracy_validation:.6f}"
            )
            log.info(f"Epoch duration: {round(time.perf_counter() - t0, 3)} s")            
            self._epoch += 1

        self._variables = {k: v for k, v in locals().items() if can_serialize(v)}            
        yield YieldLevel.DEFAULT            
        
        # Test loop
        self._testing_iteration = 0
        self._status = 'testing'
        sess.run(tst_init)                                
        try:
            while not self._stopped:
                test_step()
                yield YieldLevel.SNAPSHOT
                self._testing_iteration += 1
        except tf.errors.OutOfRangeError:
            pass

        self._status = 'finished'
        self._variables = {k: v for k, v in locals().items() if can_serialize(v)}
        yield YieldLevel.DEFAULT
{% endmacro %}


################################################### Main #####################################################
{% macro layer_tf1x_object_detection(layer_name, output_layer, target_layer, n_epochs, class_weights, optimizer, learning_rate, decay_steps, decay_rate, momentum, beta1, beta2, distributed, export_directory) %}
import itertools
import cv2
class {{layer_name}}(ObjectDetectionLayer):
    def __init__(self):
        self._n_epochs = {{n_epochs}}
        self._batch_size = 10 # TODO: {{batch_size}}?

        self._stopped = False
        self._paused = False
        self._headless = False
        self._status = 'created'
        
        self._loss_training = 0.0
        self._loss_validation = 0.0
        self._loss_testing = 0.0  

        self._bbox_loss_training = 0.0
        self._bbox_loss_validation = 0.0
        self._bbox_loss_testing = 0.0  
        
        self._classification_loss_training = 0.0
        self._classification_loss_validation = 0.0
        self._classification_loss_testing = 0.0  

        self._input_data_node = ''
        self._predicted_object = []
        self._predicted_class = []
        self._predicted_normalized_box = []

        self._accuracy_training = 0.0
        self._accuracy_validation = 0.0
        self._accuracy_testing = 0.0
        
        self._image_accuracy = 0.0

        self._variables = {}
        self._layer_outputs = {}
        self._layer_weights = {}
        self._layer_biases = {}        
        self._layer_gradients = {}

        self._training_iteration = 0
        self._validation_iteration = 0
        self._testing_iteration = 0

        self._trn_sz_tot = 0
        self._val_sz_tot = 0
        self._tst_sz_tot = 0

        self._checkpoint = None
        
    def run(self, graph: Graph):
        """Called as the main entry point for training. Responsible for training the model.

        Args:
            graph: A PerceptiLabs Graph object containing references to all layers objects included in the model produced by this training layer.
        """   
        {% if not distributed -%}
            {{ run_normal(graph, layer_name, output_layer, target_layer, n_epochs, class_weights, optimizer, learning_rate, decay_steps, decay_rate, momentum, beta1, beta2, distributed, export_directory) }}
        {% endif %}            

    def on_export(self, path: str, mode: str) -> None:
        """Called when the export or save button is clicked in the frontend.
        It is up to the implementing layer to save the model to disk.
        
        Args:
            path: the directory where the exported model will be stored.
            mode: how to export the model. Made available to frontend via 'export_modes' property."""

        log.debug(f"Export called. Project path = {path}, mode = {mode}")
        pb_path = os.path.join(path, '1')
        
        # Export non-compressed model
        if mode in ['TFModel', 'TFModel+checkpoint']:
            tf.compat.v1.saved_model.simple_save(self._sess, pb_path, inputs={'input': self._input_tensor_export}, outputs={'output': self._output_tensor_export})

        # Export compressed model
        if mode in ['TFLite', 'TFLite+checkpoint']:
            converter = tf.lite.TFLiteConverter.from_session(self._sess, [self._input_tensor_export], [self._output_tensor_export])
            converter.post_training_quantize = True
            tflite_model = converter.convert()
            open(pb_path, "wb").write(tflite_model)

        # Export checkpoint
        if mode in ['TFModel+checkpoint', 'TFLite+checkpoint']:
            {% filter remove_lspaces(8) %}
                {% if distributed %}
                    self._saver.save(self._sess, os.path.join(path, 'model.ckpt'), global_step=0)
                {% else %}
                    self._checkpoint.save(file_prefix=os.path.join(path, 'model.ckpt'), session=self._sess)
                {% endif %}
            {% endfilter %}
                
    def on_stop(self) -> None:
        """Called when the save model button is clicked in the frontend. 
        It is up to the implementing layer to save the model to disk."""
        self._stopped = True

    def on_headless_activate(self) -> None:
        """"Called when the statistics shown in statistics window are not needed.
        Purose is to speed up the iteration speed significantly."""
        self._headless = True

        self._layer_outputs = {} 
        self._layer_weights = {}
        self._layer_biases = {}
        self._layer_gradients = {}

    def on_headless_deactivate(self) -> None:
        """"Called when the statistics shown in statistics window are needed.
        May slow down the iteration speed of the training."""
        import time
        log.info(f"Set to headless_off at time {time.time()}")
        self._headless = False

    @property
    def export_modes(self) -> List[str]:
        """Returns the possible modes of exporting a model."""        
        return [
            'TFModel',
            'TFLite'
            'TFModel+checkpoint',
            'TFLite+checkpoint',            
        ]
        
    @property
    def is_paused(self) -> None:
        """Returns true when the training is paused."""        
        return self._paused

    @property
    def batch_size(self):
        """ Size of the current training batch """        
        return self._batch_size
    
    @property
    def get_input_data_node(self):
        """ node corresponding to input tensor"""
        return self._input_data_node

    @property
    def grid_size(self):
        """ size of the grid """
        return self._grid_size
    
    @property
    def classes(self):
        """classes in the dataset"""
        return self._classes

    @property
    def num_class(self):
        """ number of classes in the dataset"""
        return self._num_class

    @property   
    def num_box(self):
        """ number of boxes per grid"""
        return self._num_box 

    @property
    def lambdacoord(self):
        return self._lambdacoord
        
    @property
    def lambdanoobj(self):  
        return self._lambdanoobj

    @property
    def status(self):
        """Called when the pause button is clicked in the frontend. It is up to the implementing layer to pause its execution."""        
        return self._status
    
    @property
    def epoch(self):
        """The current epoch"""        
        return self._epoch

    @property
    def variables(self):
        """Any variables belonging to this layer that should be rendered in the frontend.
        
        Returns:
            A dictionary with tensor names for keys and picklable for values.
        """
        return self._variables.copy()        

    @property
    def sample(self) -> np.ndarray:
        """Returns a single data sample"""        
        return np.empty(())

    @property
    def size_training(self) -> int:
        """Returns the size of the training dataset"""                                    
        return self._trn_sz_tot

    @property
    def size_validation(self) -> int:
        """Returns the size of the validation dataset"""                                            
        return self._val_sz_tot

    @property
    def size_testing(self) -> int:
        """Returns the size of the testing dataset"""
        return self._tst_sz_tot

    def make_generator_training(self) -> Generator[np.ndarray, None, None]:
        """Returns a generator yielding single samples of training data. In the case of a training layer, this typically yields the model output."""        
        # Simply call sess.run on the output & target tensors :)  #TODO: how to make generators generic? We have two datasets here, but not all datasets will be labeled. Distinguish between supervised/unsupervised data layers and instead REQUIRE pairs of data layers for supervised?
        yield from []
        
    def make_generator_validation(self) -> Generator[np.ndarray, None, None]:
        """Returns a generator yielding single samples of validation data. In the case of a training layer, this typically yields the model output."""                
        yield from []
        
    def make_generator_testing(self) -> Generator[np.ndarray, None, None]:
        """Returns a generator yielding single samples of testing data. In the case of a training layer, this typically yields the model output."""                        
        yield from []

    @property
    def accuracy_training(self) -> float:
        """Returns the current accuracy of the training phase"""        
        return self._accuracy_training
    
    @property
    def accuracy_validation(self) -> float:
        """Returns the current accuracy of the validation phase"""                
        return self._accuracy_validation

    @property
    def accuracy_testing(self) -> float:
        """Returns the current accuracy of the testing phase"""                        
        return self._accuracy_testing

    @property
    def loss_training(self) -> float:
        """Returns the current loss of the training phase"""                
        return self._loss_training        

    @property
    def loss_validation(self) -> float:
        """Returns the current loss of the validation phase"""                        
        return self._loss_validation   

    @property
    def loss_bbox_training(self) -> float:
        """Returns the current loss of the training phase"""                
        return self._bbox_loss_training        

    @property
    def loss_bbox_validation(self) -> float:
        """Returns the current loss of the validation phase"""                        
        return self._bbox_loss_validation        

    @property
    def loss_bbox_testing(self) -> float:
        """Returns the current loss of the testing phase"""                
        return self._bbox_loss_testing

    @property
    def loss_testing(self) -> float:
        """Returns the current loss of the testing phase"""                
        return self._loss_testing

    @property
    def loss_classification_training(self) -> float:
        """Returns the current loss of the training phase"""                
        return self._classification_loss_training        

    @property
    def loss_classification_validation(self) -> float:
        """Returns the current classification loss of the validation phase"""                        
        return self._classification_loss_validation        

    @property
    def loss_classification_testing(self) -> float:
        """Returns the current loss of the testing phase"""                
        return self._classification_loss_testing

    @property
    def get_predicted_normalized_boxes(self) -> np.ndarray:
        """ returns the images with predicted bboxes"""
        return self._predicted_normalized_box

    @property
    def get_predicted_classes(self) -> np.ndarray:
        """ returns the images with predicted bboxes"""
        return self._predicted_class

    @property
    def get_predicted_objects(self) -> np.ndarray:
        """ returns the images with predicted bboxes"""
        return self._predicted_object

    @property
    def layer_weights(self) -> Dict[str, Dict[str, Picklable]]:
        """The weight values of each layer in the input Graph during the training.

        Returns:
            A dictionary of nested dictionaries, where each key is a layer id. The nested dictionaries contain weight name and value pairs. The values must be picklable.
        """        
        return self._layer_weights

    @property
    def layer_biases(self) -> Dict[str, Dict[str, Picklable]]:
        """The bias values of each layer in the input Graph during the training.

        Returns:
            A dictionary of nested dictionaries, where each key is a layer id. The nested dictionaries contain weight name and value pairs. The values must be picklable.
        """        
        return self._layer_biases
    
    @property
    def layer_gradients(self) -> Dict[str, Dict[str, Picklable]]:
        """The gradients with respect to the loss of all trainable variables of each layer in the input Graph.

        Returns:
            A dictionary of nested dictionaries, where each key is a layer id. The nested dictionaries contain gradient name and value pairs. The values must be picklable.
        """        
        return self._layer_gradients
    
    @property
    def layer_outputs(self) -> Dict[str, Dict[str, Picklable]]:
        """The output values of each layer in the input Graph during the training (e.g., tf.Tensors evaluated for each iteration)

        Returns:
            A dictionary of nested dictionaries, where each key is a layer id. The nested dictionaries contain variable name and value pairs. The values must be picklable.
        """
        return self._layer_outputs

    @property
    def training_iteration(self) -> int:
        """The current training iteration"""
        return self._training_iteration

    @property
    def validation_iteration(self) -> int:
        """The current validation iteration"""        
        return self._validation_iteration

    @property
    def testing_iteration(self) -> int:
        """The current testing iteration"""                
        return self._testing_iteration
    
    @property
    def image_accuracy(self) -> float:
        return self._image_accuracy

    @property
    def progress(self) -> float:
        """A number indicating the overall progress of the training
        
        Returns:
            A floating point number between 0 and 1
        """        
        n_iterations_per_epoch = np.ceil(self.size_training / self._batch_size) + \
                                 np.ceil(self.size_validation / self._batch_size)
        n_iterations_total = self._n_epochs * n_iterations_per_epoch

        iteration = self.epoch * n_iterations_per_epoch + \
                    self.training_iteration + self.validation_iteration
        
        progress = min(iteration/(n_iterations_total - 1), 1.0) 
        return progress
{% endmacro %}
