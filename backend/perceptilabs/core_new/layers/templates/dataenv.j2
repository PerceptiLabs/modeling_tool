{% macro layer_dataenvironment(layer_name, environment_name) %}
class {{layer_name}}(DataLayer):
    """Class responsible for running the gym environment."""    
    def __init__(self):
        self._variables = {}
        self._env_name = '{{environment_name}}'
        # self._env = gym.make(self._env_name)
        self._variables = {k: v for k, v in locals().items() if can_serialize(v)}
    
    @property
    def size_training(self) -> int:
        """Returns the size of the training dataset"""                    
        return 1

    @property
    def size_validation(self) -> int:
        """Returns the size of the validation dataset"""
        return 1

    @property
    def size_testing(self) -> int:
        """Returns the size of the testing dataset"""                    
        return 1

    @property
    def variables(self) -> Dict[str, Picklable]:
        """Returns any variables that the layer should make available and that can be pickled."""
        return self._variables

    @property
    def sample(self) -> np.ndarray:
        """Returns a single data sample"""                    
        sample = next(self.make_generator_training())
        return sample

    def make_generator_training(self) -> Generator[np.ndarray, None, None]:
        """Returns a sample from gym environment."""                                        
        def gen():
            import gym
            global env, state
            env = gym.make(self._env_name)
            sample = env.reset()
            state = sample
            while True:
                yield np.float32(state)
        return gen()

    def make_generator_testing(self) -> Generator[np.ndarray, None, None]:
        """Returns a sample from gym environment."""                                        
        def gen():
            import gym
            global env, state
            sample = self._env.reset()
            state = sample
            while True:
                yield state
        return gen()
        
    def make_generator_validation(self) -> Generator[np.ndarray, None, None]:
        """Returns a sample from gym environment."""                                        
        def gen():
            import gym
            global env, state
            sample = self._env.reset()
            state = sample
            while True:
                yield state
        return gen()
{% endmacro %}