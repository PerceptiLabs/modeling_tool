{% macro layer_datarandom(layer_name, distribution, mean, stddev, shape, batch_size) %}
class {{layer_name}}(DataLayer):
    """Class responsible for generating random noise"""    
    def __init__(self):
        self._variables = {}
        self._batch_size = {{batch_size}}
        self._mean = {{mean}}
        self._stddev = {{stddev}}
        self._distribution = '{{distribution}}'
        self._shape = [{{batch_size}}] + [{{shape}}]
        self._variables = {k: v for k, v in locals().items() if dill.pickles(v)}

    @property
    def size_training(self) -> int:
        """Returns the size of the training dataset"""                    
        return 1

    @property
    def size_validation(self) -> int:
        """Returns the size of the validation dataset"""
        return 1

    @property
    def size_testing(self) -> int:
        """Returns the size of the testing dataset"""                    
        return 1

    @property
    def variables(self) -> Dict[str, Picklable]:
        """Returns any variables that the layer should make available and that can be pickled."""
        return self._variables

    @property
    def sample(self) -> np.ndarray:
        """Returns a single data sample"""                    
        sample = next(self.make_generator_training())
        return sample

                    
    def make_generator_training(self):
        """Returns a single batch of random noise data."""                                        
        {% filter remove_lspaces(8) %}
            {% if distribution == 'normal' %}
                def gen():
                    batch = tf.random.normal(self._shape, mean = self._mean, stddev = self._stddev, dtype=tf.dtypes.float32, seed=None, name=None)
                    yield batch
            {% elif distribution == 'uniform' %}
                def gen():
                    batch = tf.random.normal(tf.random.uniform(shape = self._shape, minval=0, maxval=None, dtype=tf.dtypes.float32, seed=None, name=None)
                    yield batch
            {% endif %}
        {% endfilter %}
        return gen()
    
    def make_generator_testing(self) -> Generator[np.ndarray, None, None]:
        """Returns a single batch of random noise data."""                                        
        {% filter remove_lspaces(8) %}
            {% if distribution == 'normal' %}
                def gen():
                    batch = tf.random.normal(self._shape, mean = self._mean, stddev = self._stddev, dtype=tf.dtypes.float32, seed=None, name=None)
                    yield batch
            {% elif distribution == 'uniform' %}
                def gen():
                    batch = tf.random.normal(tf.random.uniform(shape = self._shape, minval=0, maxval=None, dtype=tf.dtypes.float32, seed=None, name=None)
                    yield batch
            {% endif %}
        {% endfilter %}
        return gen()
        
    def make_generator_validation(self) -> Generator[np.ndarray, None, None]:
        """Returns a single batch of random noise data."""                                        
        {% filter remove_lspaces(8) %}
            {% if distribution == 'normal' %}
                def gen():
                    batch = tf.random.normal(self._shape, mean = self._mean, stddev = self._stddev, dtype=tf.dtypes.float32, seed=None, name=None)
                    yield batch
            {% elif distribution == 'uniform' %}
                def gen():
                    batch = tf.random.normal(tf.random.uniform(shape = self._shape, minval=0, maxval=None, dtype=tf.dtypes.float32, seed=None, name=None)
                    yield batch
            {% endif %}
        {% endfilter %}
        return gen()
    
{% endmacro %}

