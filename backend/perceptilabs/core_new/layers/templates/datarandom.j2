{% macro layer_datarandom(layer_name, distribution, shape, batch_size) %} # mean, stddev,
class {{layer_name}}(DataLayer):
    """Class responsible for generating random noise"""    
    def __init__(self):
        self._variables = {}
        # self._batch_size = {{batch_size}}
        # self._mean = {{mean}}
        # self._stddev = {{stddev}}
        self._distribution = '{{distribution}}'
        # self._shape =  {{shape}} #[{{batch_size}}] +
        self._variables = {k: v for k, v in locals().items() if dill.pickles(v)}

    @property
    def size_training(self) -> int:
        """Returns the size of the training dataset"""                    
        return 1

    @property
    def size_validation(self) -> int:
        """Returns the size of the validation dataset"""
        return 1

    @property
    def size_testing(self) -> int:
        """Returns the size of the testing dataset"""                    
        return 1

    @property
    def variables(self) -> Dict[str, Picklable]:
        """Returns any variables that the layer should make available and that can be pickled."""
        return self._variables

    @property
    def sample(self) -> np.ndarray:
        """Returns a single data sample"""                    
        sample = next(self.make_generator_training())
        return sample

                    
    def make_generator_training(self) -> Generator[np.ndarray, None, None]:
        """Returns a sample of random noise data."""                                        
        {% filter remove_lspaces(8) %}
            {% if distribution == 'Normal' %}
                def gen():
                    sample = np.random.normal({{mean}}, {{stddev}}, {{shape}})
                    yield sample
            {% elif distribution == 'Uniform' %}
                def gen():
                    sample = np.random.uniform({{minval}}, {{maxval}}, {{shape}})
                    yield sample
            {% endif %}
        {% endfilter %}
        return gen()
    
    def make_generator_testing(self) -> Generator[np.ndarray, None, None]:
        """Returns a sample of random noise data."""                                        
        {% filter remove_lspaces(8) %}
            {% if distribution == 'Normal' %}
                def gen():
                    sample = np.random.normal({{mean}}, {{stddev}}, {{shape}})
                    yield sample
            {% elif distribution == 'Uniform' %}
                def gen():
                    sample = np.random.uniform({{minval}}, {{maxval}}, {{shape}})
                    yield sample
            {% endif %}
        {% endfilter %}
        return gen()
        
    def make_generator_validation(self) -> Generator[np.ndarray, None, None]:
        """Returns a sample of random noise data."""      
        np.random.seed(1024)                                  
        {% filter remove_lspaces(8) %}
            {% if distribution == 'Normal' %}
                def gen():
                    sample = np.random.normal({{mean}}, {{stddev}}, {{shape}})
                    yield sample
            {% elif distribution == 'Uniform' %}
                def gen():
                    sample = np.random.uniform({{minval}}, {{maxval}}, {{shape}})
                    yield sample
            {% endif %}
        {% endfilter %}
        return gen()
    
{% endmacro %}

