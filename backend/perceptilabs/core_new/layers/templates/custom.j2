{% macro layer_custom_inner(layer_spec, graph_spec=None) %}
class {{layer_spec.sanitized_name}}(Tf1xLayer):
    def __call__(self, inputs: Dict[str, tf.Tensor], is_training: tf.Tensor = None) -> Dict[str, tf.Tensor]:
        """ Returns a transformed version of the input data.

        Args:
            inputs: a dict of inputs (e.g., a tf.Tensor).

        Returns:
            The transformed input data in a dict.
        """
        x = inputs['input']
        y = x

        self._variables = {k: v for k, v in locals().items() if can_serialize(v)}    

        self._outputs = {'output': y}
        return self._outputs

    @property
    def variables(self) -> Dict[str, Picklable]:
        """Any variables belonging to this layer that should be rendered in the frontend.
        
        Returns:
            A dictionary with tensor names for keys and picklable for values.
        """
        return {}

    @property
    def trainable_variables(self) -> Dict[str, tf.Tensor]:
        """Any trainable variables belonging to this layer that should be updated during backpropagation. Their gradients will also be rendered in the frontend.
        
        Returns:
            A dictionary with tensor names for keys and tensors for values.
        """
        return {}

    def get_sample(self, sess=None) -> np.ndarray:        
        """Returns a single data sample"""
        if sess is not None:
            outputs = sess.run(self._outputs)
            return {
                key: value[0] if len(value) > 0 else value
                for key, value in outputs.items()
            }
        else:
            return None

    @property
    def weights(self) -> Dict[str, tf.Tensor]:
        """Any weight tensors belonging to this layer that should be rendered in the frontend.

        Return:
            A dictionary with tensor names for keys and tensors for values.
        """        
        return {}

    @property
    def biases(self) -> Dict[str, tf.Tensor]:
        """Any weight tensors belonging to this layer that should be rendered in the frontend.

        Return:
            A dictionary with tensor names for keys and tensors for values.
        """        
        return {} 
{% endmacro %}
