{% macro run_normal(graph, layer_name, output_layer, target_layer, n_epochs, loss_function, class_weights, optimizer, learning_rate, decay_steps, decay_rate, momentum, beta1, beta2, distributed, export_directory) %}
        self._status = 'initializing'

        output_layer_id = '{{output_layer}}'
        target_layer_id = '{{target_layer}}'
        input_data_nodes = graph.get_direct_data_nodes(output_layer_id)
        label_data_nodes = graph.get_direct_data_nodes(target_layer_id)

        assert len(input_data_nodes) == 1
        assert len(label_data_nodes) == 1
        input_data_node = input_data_nodes[0]
        label_data_node = label_data_nodes[0]

        self._trn_sz_tot = input_data_node.layer.size_training
        self._val_sz_tot = input_data_node.layer.size_validation
        self._tst_sz_tot = input_data_node.layer.size_testing

        # Make training set
        dataset_trn = tf.data.Dataset.zip((
            tf.data.Dataset.from_generator(
                input_data_node.layer_instance.make_generator_training,
                output_shapes=input_data_node.layer_instance.sample.shape,
                output_types=np.float32                
            ),
            tf.data.Dataset.from_generator(
                label_data_node.layer_instance.make_generator_training,
                output_shapes=label_data_node.layer_instance.sample.shape,
                output_types=np.float32
            )
        ))

        # Make validation set
        dataset_val = tf.data.Dataset.zip((
            tf.data.Dataset.from_generator(
                input_data_node.layer_instance.make_generator_validation,
                output_shapes=input_data_node.layer_instance.sample.shape,
                output_types=np.float32                
            ),
            tf.data.Dataset.from_generator(
                label_data_node.layer_instance.make_generator_validation,
                output_shapes=label_data_node.layer_instance.sample.shape,
                output_types=np.float32
            )
        ))

        # Make testing set
        dataset_tst = tf.data.Dataset.zip((
            tf.data.Dataset.from_generator(
                input_data_node.layer_instance.make_generator_testing,
                output_shapes=input_data_node.layer_instance.sample.shape,
                output_types=np.float32                
            ),
            tf.data.Dataset.from_generator(
                label_data_node.layer_instance.make_generator_testing,
                output_shapes=label_data_node.layer_instance.sample.shape,
                output_types=np.float32
            )
        ))

        dataset_trn = dataset_trn.batch(self._batch_size)
        dataset_val = dataset_val.batch(self._batch_size)
        dataset_tst = dataset_tst.batch(1)                

        # Make initializers
        iterator = tf.data.Iterator.from_structure(dataset_trn.output_types, dataset_trn.output_shapes)
        trn_init = iterator.make_initializer(dataset_trn)
        val_init = iterator.make_initializer(dataset_val)
        tst_init = iterator.make_initializer(dataset_tst)        
        input_tensor, label_tensor = iterator.get_next()

        # Build the TensorFlow graph # TODO: perhaps this part can be delegated to the graph?

        def build_graph(input_tensor, label_tensor):
            layer_output_tensors = {
                input_data_node.layer_id: input_tensor,
                label_data_node.layer_id: label_tensor
            }

            for node in graph.inner_nodes:
                args = []
                for input_node in graph.get_input_nodes(node):
                    args.append(layer_output_tensors[input_node.layer_id])
                    y = node.layer_instance(*args)
                layer_output_tensors[node.layer_id] = y


            return layer_output_tensors

        layer_output_tensors = build_graph(input_tensor, label_tensor)
        output_tensor = layer_output_tensors[output_layer_id]
        target_tensor = layer_output_tensors[target_layer_id]
        
        # Create an exportable version of the TensorFlow graph
        self._input_tensor_export = tf.placeholder(shape=dataset_trn.output_shapes[0], dtype=dataset_trn.output_types[0])
        self._output_tensor_export = build_graph(
            self._input_tensor_export,
            tf.placeholder(shape=dataset_trn.output_shapes[1], dtype=dataset_trn.output_types[1])
        )[output_layer_id]

        loss_tensor = tf.reduce_mean(tf.square(output_tensor - target_tensor))
        correct_predictions = tf.equal(tf.argmax(output_tensor, -1), tf.argmax(target_tensor, -1))
        accuracy_tensor = tf.reduce_mean(tf.cast(correct_predictions, tf.float32))

        global_step = None
        {% filter remove_lspaces(8) %}        
            {% if optimizer == 'tf.compat.v1.train.GradientDescentOptimizer' %}
                optimizer = tf.compat.v1.train.GradientDescentOptimizer(learning_rate={{learning_rate}})
            {% elif optimizer == 'tf.compat.v1.train.MomentumOptimizer' %}
                global_step = tf.Variable(0)
                learning_rate_momentum = tf.train.exponential_decay(
                    learning_rate={{learning_rate}},
                    global_step=global_step,
                    decay_steps={{decay_steps}},
                    decay_rate={{decay_rate}},
                    staircase=True
                )
                optimizer = tf.train.MomentumOptimizer(learning_rate=learning_rate_momentum, momentum={{momentum}})
            {% elif optimizer == 'tf.compat.v1.train.AdamOptimizer' %}
                optimizer = tf.train.AdamOptimizer(learning_rate={{learning_rate}}, beta1={{beta1}}, beta2={{beta2}})
            {% elif optimizer == 'tf.compat.v1.train.AdagradOptimizer' %}
                optimizer = tf.compat.v1.train.AdagradOptimizer(learning_rate={{learning_rate}})            
            {% elif optimizer == 'tf.compat.v1.train.RmsPropOptimizer' %}
                optimizer = tf.compat.v1.train.RMSPropOptimizer(learning_rate={{learning_rate}})                        
            {% else %}
                raise NotImplementedError('Optimizer {{optimizer}} not supported yet')
            {% endif %}
        {% endfilter %}

        layer_weight_tensors = {}
        layer_bias_tensors = {}        
        layer_gradient_tensors = {}
        for node in graph.inner_nodes:
            if not isinstance(node.layer, Tf1xLayer): # In case of pure custom layers...
                continue
            
            layer_weight_tensors[node.layer_id] = node.layer.weights
            layer_bias_tensors[node.layer_id] = node.layer.biases            
            
            if len(node.layer.trainable_variables) > 0:
                gradients = {}
                for name, tensor in node.layer.trainable_variables.items():
                    grad_tensor = tf.gradients(loss_tensor, tensor)
                    if any(x is None for x in grad_tensor):
                        grad_tensor = tf.constant(0)
                    gradients[name] = grad_tensor
                layer_gradient_tensors[node.layer_id] = gradients
                # self._internal_layer_gradients[node.layer_id] = {name: [] for name in node.layer.trainable_variables.keys()} # Initialize
                # self._layer_gradients = self._internal_layer_gradients.copy()

        # trainable_vars = tf.trainable_variables() # TODO: safer to get from nodes. Especially with split graph in mind.
        # grads = tf.gradients(loss_tensor, trainable_vars)
        # update_weights = optimizer.apply_gradients(zip(grads, trainable_vars), global_step=global_step)        
        
        grads_and_vars = optimizer.compute_gradients(loss_tensor)
        update_weights = optimizer.apply_gradients(grads_and_vars, global_step=global_step)
        
        config = tf.ConfigProto()
        config.gpu_options.allow_growth = True
        sess = tf.Session(config=config)
        self._sess = sess

        trackable_variables = {}
        trackable_variables.update({x.name: x for x in tf.trainable_variables() if isinstance(x, Trackable)})
        trackable_variables.update({k: v for k, v in locals().items() if isinstance(v, Trackable) and not isinstance(v, tf.python.data.ops.iterator_ops.Iterator)}) # TODO: Iterators based on 'stateful functions' cannot be serialized.
        self._checkpoint = tf.train.Checkpoint(**trackable_variables)
        sess.run(tf.global_variables_initializer())
        
        {% filter remove_lspaces(8) %}
            {% if export_directory is not none %}        
                path = tf.train.latest_checkpoint('{{export_directory}}')
                status = self._checkpoint.restore(path)
                status.assert_consumed().run_restore_ops(session=self._sess)
            {% endif %}
        {% endfilter %}                    
        
        def train_step():
            if not self._headless:
                _, self._loss_training, self._accuracy_training, \
                    self._layer_outputs, self._layer_weights, self._layer_biases, \
                    self._layer_gradients \
                    = sess.run([
                        update_weights, loss_tensor, accuracy_tensor,
                        layer_output_tensors, layer_weight_tensors, layer_bias_tensors, layer_gradient_tensors
                    ])
            else:
                _, self._loss_training, self._accuracy_training, \
                    = sess.run([
                        update_weights, loss_tensor, accuracy_tensor
                    ])
            
        def validation_step():
            if not self._headless:
                self._loss_validation, self._accuracy_validation, \
                    self._layer_outputs, self._layer_weights, self._layer_biases, \
                    self._layer_gradients \
                    = sess.run([
                        loss_tensor, accuracy_tensor,
                        layer_output_tensors, layer_weight_tensors, layer_bias_tensors, layer_gradient_tensors
                    ])
            else:
                self._loss_validation, self._accuracy_validation, \
                    = sess.run([
                        loss_tensor, accuracy_tensor
                    ])

            
        def test_step():
            self._loss_testing, self._accuracy_testing, \
                self._layer_outputs, self._layer_weights, self._layer_gradients \
                = sess.run([
                    loss_tensor, accuracy_tensor,
                    layer_output_tensors, layer_weight_tensors, layer_gradient_tensors
                ])
            #accuracy_list.append(acc)
            #loss_list.append(loss)

        self._variables = {k: v for k, v in locals().items() if can_serialize(v)}

        log.info("Entering training loop")

        # Training loop
        self._epoch = 0
        while self._epoch < self._n_epochs and not self._stopped:
            t0 = time.perf_counter()
            self._training_iteration = 0
            self._validation_iteration = 0
            self._status = 'training'
            sess.run(trn_init)            
            try:
                while not self._stopped:
                    train_step()
                    yield YieldLevel.SNAPSHOT
                    self._training_iteration += 1
            except tf.errors.OutOfRangeError:
                pass

            self._status = 'validation'
            sess.run(val_init)            
            try:
                while not self._stopped:
                    validation_step()
                    yield YieldLevel.SNAPSHOT                    
                    self._validation_iteration += 1
            except tf.errors.OutOfRangeError:
                pass
            log.info(
                f"Finished epoch {self._epoch+1}/{self._n_epochs} - "
                f"loss training, validation: {self.loss_training:.6f}, {self.loss_validation:.6f} - "
                f"acc. training, validation: {self.accuracy_training:.6f}, {self.accuracy_validation:.6f}"
            )
            log.info(f"Epoch duration: {round(time.perf_counter() - t0, 3)} s")            
            self._epoch += 1

        self._variables = {k: v for k, v in locals().items() if can_serialize(v)}            
        yield YieldLevel.DEFAULT            
        
        # Test loop
        self._testing_iteration = 0
        self._status = 'testing'
        sess.run(tst_init)                                
        try:
            while not self._stopped:
                test_step()
                yield YieldLevel.SNAPSHOT
                self._testing_iteration += 1
        except tf.errors.OutOfRangeError:
            pass

        self._status = 'finished'
        self._variables = {k: v for k, v in locals().items() if can_serialize(v)}
        yield YieldLevel.DEFAULT
{% endmacro %}

#################################################### Distributed Training #################################################
{% macro run_distributed(graph, layer_name, output_layer, target_layer, n_epochs, loss_function, class_weights, optimizer, learning_rate, decay_steps, decay_rate, momentum, beta1, beta2, distributed, export_directory, use_cpus) %}
        INCLUDE_KERAS_METRICS = False

        self_layer_name = '{{layer_name}}' # this is passed as input
        output_layer_id = '{{output_layer}}'
        target_layer_id = '{{target_layer}}'
        input_data_nodes = graph.get_direct_data_nodes(output_layer_id)
        label_data_nodes = graph.get_direct_data_nodes(target_layer_id)

        assert len(input_data_nodes) == 1
        assert len(label_data_nodes) == 1
        input_data_node = input_data_nodes[0]
        label_data_node = label_data_nodes[0]

        self._trn_sz_tot = input_data_node.layer.size_training
        self._val_sz_tot = input_data_node.layer.size_validation
        self._tst_sz_tot = input_data_node.layer.size_testing


        if {{use_cpus}}:
            # Set Devices and Distribution Strategy
            n_devices = 4
            config = tf.ConfigProto(device_count={"CPU": n_devices, "GPU": 0},
                                gpu_options={"allow_growth": True},
                                inter_op_parallelism_threads=n_devices,
                                intra_op_parallelism_threads=1)

            sess = tf.Session(config=config)
            tf.keras.backend.set_session(sess) # since we use keras metrics
            self._sess = sess

            strategy = tf.distribute.MirroredStrategy(devices=[f'/CPU:{i}' for i in range(n_devices)]) # TODO: not needed under real circumstances, should default to all.
        else:
            # Set Devices and Distribution Strategy
            n_devices = len(GPUtil.getGPUs())

            config = tf.ConfigProto(gpu_options={"allow_growth": True}, log_device_placement=True, allow_soft_placement=True)

            sess = tf.Session(config=config)
            tf.keras.backend.set_session(sess) # since we use keras metrics
            self._sess = sess

            strategy = tf.distribute.MirroredStrategy(devices=[f'/GPU:{i}' for i in range(n_devices)]) # TODO: not needed under real circumstances, should default to all.

        BATCH_SIZE_PER_REPLICA = self._batch_size # TODO: should this be batch_size divided by n_devices or not?
        GLOBAL_BATCH_SIZE = BATCH_SIZE_PER_REPLICA * n_devices

        # Make training set
        dataset_trn = tf.data.Dataset.zip((
            tf.data.Dataset.from_generator(
                input_data_node.layer_instance.make_generator_training,
                output_shapes=input_data_node.layer_instance.sample.shape,
                output_types=np.float32                
            ),
            tf.data.Dataset.from_generator(
                label_data_node.layer_instance.make_generator_training,
                output_shapes=label_data_node.layer_instance.sample.shape,
                output_types=np.float32
            )
        ))

        # Make validation set
        dataset_val = tf.data.Dataset.zip((
            tf.data.Dataset.from_generator(
                input_data_node.layer_instance.make_generator_validation,
                output_shapes=input_data_node.layer_instance.sample.shape,
                output_types=np.float32                
            ),
            tf.data.Dataset.from_generator(
                label_data_node.layer_instance.make_generator_validation,
                output_shapes=label_data_node.layer_instance.sample.shape,
                output_types=np.float32
            )
        ))

        # Make testing set
        dataset_tst = tf.data.Dataset.zip((
            tf.data.Dataset.from_generator(
                input_data_node.layer_instance.make_generator_testing,
                output_shapes=input_data_node.layer_instance.sample.shape,
                output_types=np.float32                
            ),
            tf.data.Dataset.from_generator(
                label_data_node.layer_instance.make_generator_testing,
                output_shapes=label_data_node.layer_instance.sample.shape,
                output_types=np.float32
            )
        ))

        train_dataset = dataset_trn.batch(GLOBAL_BATCH_SIZE)
        validation_dataset = dataset_val.batch(GLOBAL_BATCH_SIZE)
        test_dataset = dataset_tst.batch(1) # Since the batch size for test is 1, it does not make sense to divide the batch over several replicas. Do testing as usual.

        # NOTE: A key difference for distributed: we have one _iterator_ per dataset, as opposed to one _initializer_ per dataset in the normal case.
        # This means that we have to create a different version of all metrics (accuracy, f1, auc, etc), the gradients and more importantly: 'all tensors'.

        with strategy.scope():
            train_iterator = strategy.make_dataset_iterator(train_dataset)
            validation_iterator = strategy.make_dataset_iterator(validation_dataset)

        test_iterator = tf.data.Iterator.from_structure(test_dataset.output_types, test_dataset.output_shapes)
        test_iterator_init = test_iterator.make_initializer(test_dataset)

        def create_model():
            # The tensors generated by distributed iterators are only accessible locally from each replica. Therefore,
            # each replica must create its own version of the model. This has the following two consequences:
            #
            #     * all tensorflow variables/operations must be executed on device, once per replica => the wrapped layers are further wrapped as a Model.
            #     * we must keep track of the created variables, so that the validation steps can reuse the trained variables => we use get_variable instead of tf.Variable, with a var-scope for each layer.
            #     * we will have several instances/copies of non-trainable/non-tensorflow variables. => Each layer wrapper tracks the number of times it's been created, or they would overwrite eachother.
            
            class Model:
                def __init__(self):
                    pass
                
                def __call__(self, x, y):
                    layer_output_tensors = {
                        input_data_node.layer_id: x,
                        label_data_node.layer_id: y
                    }

                    for node in graph.inner_nodes:
                        args = []
                        for input_node in graph.get_input_nodes(node):
                            args.append(layer_output_tensors[input_node.layer_id])
                        y = node.layer_instance(*args)
                        layer_output_tensors[node.layer_id] = y

                    return layer_output_tensors 
            
            return Model()

        with strategy.scope():

            if INCLUDE_KERAS_METRICS:
                # contrib.f1_score and metrics.auc do not work with distributed. 
                # note: f1_score seems to be deprecated in tf2.0, so it makes sense that they haven't imported it in tf 2.0
                # https://stackoverflow.com/questions/53620581/calculate-f1-score-using-tf-metrics-precision-recall-in-a-tf-estimator-setup
                #
                # Likewise, AUC does not work properly for distributed. Keras metrics seem to be the recommended approach.
                # This works out of the box for AUC, but not for F1 score (not implemented). Using definition and going via Recall and Precision instead.
                
                num_thresholds=200
                epsilon = 1e-7
                thresholds = [(i+0) * 1.0 / (num_thresholds - 1) for i in range(num_thresholds - 0)]
                #thresholds = [0.0] + thresholds + [1.0]
                
                recall_train = tf.keras.metrics.Recall(thresholds=thresholds)
                precision_train = tf.keras.metrics.Precision(thresholds=thresholds)
                
                r = recall_train.result()
                p = precision_train.result()
                
                f1_train = tf.reduce_max(tf.math.divide_no_nan(2*r*p, r+p)) # TODO: create custom metric instead? make PR at tf?
                auc_train = tf.keras.metrics.AUC(curve='ROC')
                auc_train_tensor = auc_train.result()
                
                recall_val = tf.keras.metrics.Recall(thresholds=thresholds)
                precision_val = tf.keras.metrics.Precision(thresholds=thresholds)
                
                r = recall_val.result()
                p = precision_val.result()
                
                f1_val = tf.reduce_max(tf.math.divide_no_nan(2*r*p, r+p)) # TODO: create custom metric instead? make PR at tf?    
                auc_val = tf.keras.metrics.AUC(curve='ROC')
                auc_val_tensor = auc_val.result()
                
                
            model = create_model()
            
            train_iterator_init = train_iterator.initialize()
            validation_iterator_init = validation_iterator.initialize()

            global_step = None
            {% filter remove_lspaces(8) %}        
                {% if optimizer == 'tf.compat.v1.train.GradientDescentOptimizer' %}
                    optimizer = tf.compat.v1.train.GradientDescentOptimizer(learning_rate={{learning_rate}}*n_devices)
                {% elif optimizer == 'tf.compat.v1.train.MomentumOptimizer' %}
                    global_step = tf.Variable(0)
                    learning_rate_momentum = tf.train.exponential_decay(
                        learning_rate={{learning_rate}}*n_devices,
                        global_step=global_step,
                        decay_steps={{decay_steps}},
                        decay_rate={{decay_rate}},
                        staircase=True
                    )
                    optimizer = tf.train.MomentumOptimizer(learning_rate=learning_rate_momentum, momentum={{momentum}})
                {% elif optimizer == 'tf.compat.v1.train.AdamOptimizer' %}
                    optimizer = tf.train.AdamOptimizer(learning_rate={{learning_rate}}*n_devices, beta1={{beta1}}, beta2={{beta2}})
                {% elif optimizer == 'tf.compat.v1.train.AdagradOptimizer' %}
                    optimizer = tf.compat.v1.train.AdagradOptimizer(learning_rate={{learning_rate}}*n_devices)            
                {% elif optimizer == 'tf.compat.v1.train.RmsPropOptimizer' %}
                    optimizer = tf.compat.v1.train.RMSPropOptimizer(learning_rate={{learning_rate}}*n_devices)                        
                {% else %}
                    raise NotImplementedError('Optimizer {{optimizer}} not supported yet')
                {% endif %}
            {% endfilter %}
            
            def train_step(inputs):
                x, y = inputs
                layer_output_tensors = model(x, y)
                output_tensor = layer_output_tensors[output_layer_id]
                target_tensor = layer_output_tensors[target_layer_id]

                loss_tensor = tf.reduce_sum(tf.square(output_tensor - target_tensor)) / GLOBAL_BATCH_SIZE
                correct_predictions = tf.equal(tf.argmax(output_tensor,-1), tf.argmax(target_tensor,-1))
                accuracy_tensor = tf.reduce_mean(tf.cast(correct_predictions, tf.float32))

                layer_weight_tensors = {}
                layer_bias_tensors = {}        
                layer_gradient_tensors = {}
                for node in graph.inner_nodes:
                    if not isinstance(node.layer, Tf1xLayer): # In case of pure custom layers...
                        continue
                    
                    layer_weight_tensors[node.layer_id] = node.layer.weights
                    layer_bias_tensors[node.layer_id] = node.layer.biases            
                    
                    if len(node.layer.trainable_variables) > 0:
                        gradients = {}
                        for name, tensor in node.layer.trainable_variables.items():
                            grad_tensor = tf.gradients(loss_tensor, tensor)
                            if any(x is None for x in grad_tensor):
                                grad_tensor = tf.constant(0)
                            if type(grad_tensor) is list and len(grad_tensor) == 1:
                                gradients[name] = grad_tensor[0]
                            else:
                                gradients[name] = grad_tensor
                        layer_gradient_tensors[node.layer_id] = gradients
                        self._layer_gradients[node.layer_id] = {name: [] for name in node.layer.trainable_variables.keys()} # Initialize

                trainable_vars = tf.trainable_variables()
                grads = tf.gradients(loss_tensor, trainable_vars)        
                update_weights = optimizer.apply_gradients(zip(grads, trainable_vars), global_step=global_step)

                if INCLUDE_KERAS_METRICS:
                    update_auc = auc_train.update_state(target_tensor, output_tensor)
                    update_recall = recall_train.update_state(target_tensor, output_tensor)
                    update_precision = precision_train.update_state(target_tensor, output_tensor)
                    
                    update_ops = [update_weights, update_auc, update_recall, update_precision]
                else:
                    update_ops = [update_weights]

                with tf.control_dependencies(update_ops):
                    def add_identity(x):
                        if isinstance(x, dict):
                            return {k: add_identity(v) for k, v in x.items()}
                        else:
                            return tf.identity(x)
                    
                    # Only tensors CREATED in this scope will be affected. Therefore, we pass them through the identity operation.
                    return add_identity(loss_tensor), add_identity(accuracy_tensor), add_identity(layer_output_tensors), add_identity(layer_weight_tensors), add_identity(layer_bias_tensors), add_identity(layer_gradient_tensors)

            def validation_step(inputs):
                x, y = inputs
                layer_output_tensors = model(x, y)
                output_tensor = layer_output_tensors[output_layer_id]
                target_tensor = layer_output_tensors[target_layer_id]

                loss_tensor = tf.reduce_sum(tf.square(output_tensor - target_tensor)) / GLOBAL_BATCH_SIZE
                correct_predictions = tf.equal(tf.argmax(output_tensor,-1), tf.argmax(target_tensor,-1))
                accuracy_tensor = tf.reduce_mean(tf.cast(correct_predictions, tf.float32))

                layer_weight_tensors = {}
                layer_bias_tensors = {}        
                layer_gradient_tensors = {}
                for node in graph.inner_nodes:
                    layer_weight_tensors[node.layer_id] = node.layer.weights
                    layer_bias_tensors[node.layer_id] = node.layer.biases            
                    
                    if len(node.layer.trainable_variables) > 0:
                        gradients = {}
                        for name, tensor in node.layer.trainable_variables.items():
                            grad_tensor = tf.gradients(loss_tensor, tensor)
                            if any(x is None for x in grad_tensor):
                                grad_tensor = tf.constant(0)
                            if type(grad_tensor) is list and len(grad_tensor) == 1:
                                gradients[name] = grad_tensor[0]
                            else:
                                gradients[name] = grad_tensor
                        layer_gradient_tensors[node.layer_id] = gradients
                        self._layer_gradients[node.layer_id] = {name: [] for name in node.layer.trainable_variables.keys()} # Initialize

                if INCLUDE_KERAS_METRICS:
                    update_auc = auc_train.update_state(target_tensor, output_tensor)
                    update_recall = recall_train.update_state(target_tensor, output_tensor)
                    update_precision = precision_train.update_state(target_tensor, output_tensor)
                    
                    update_ops = [update_auc, update_recall, update_precision]
                else:
                    update_ops = []

                with tf.control_dependencies(update_ops):
                    def add_identity(x):
                        if isinstance(x, dict):
                            return {k: add_identity(v) for k, v in x.items()}
                        else:
                            return tf.identity(x)
                    
                    return add_identity(loss_tensor), add_identity(accuracy_tensor), add_identity(layer_output_tensors), add_identity(layer_weight_tensors), add_identity(layer_bias_tensors), add_identity(layer_gradient_tensors)


            if n_devices > 1:
                def reduce_per_replica(nested_dict):
                    for variable, node in nested_dict.items():
                        if type(node) is dict:
                            nested_dict[variable] = reduce_per_replica(node)
                        else:
                            tensors = [node.get(device) for device in node.devices \
                                    if node.get(device) is not None]
                            nested_dict[variable] = tensors[0]
                    return nested_dict

                ##### Training statistics #####
                dist_loss_train, accuracy_train, \
                    layer_outputs_train, layer_weights_train, layer_biases_train, \
                    layer_gradients_train = strategy.experimental_run(train_step, train_iterator)

                dist_loss_train = [dist_loss_train.get(device) for device in dist_loss_train.devices]
                loss_train = tf.reduce_sum(dist_loss_train)

                accuracy_train = tf.reduce_mean(accuracy_train.values) # TODO: how to aggregate?

                layer_outputs_train = reduce_per_replica(layer_outputs_train)
                layer_gradients_train = reduce_per_replica(layer_gradients_train)
                layer_weights_train = reduce_per_replica(layer_weights_train)
                layer_biases_train = reduce_per_replica(layer_biases_train)
                
                ##### Validation statistics #####
                dist_loss_val, accuracy_val, \
                layer_outputs_val, layer_weights_val, layer_biases_val, \
                layer_gradients_val = strategy.experimental_run(validation_step, validation_iterator)

                dist_loss_val = dist_loss_val.values
                loss_val = tf.reduce_sum(dist_loss_val)

                accuracy_val = tf.reduce_mean(accuracy_val.values)
                layer_gradients_val = {k: v for k, v in layer_gradients_val.items() if v is not None}
                
                layer_outputs_val = reduce_per_replica(layer_outputs_val)
                layer_gradients_val = reduce_per_replica(layer_gradients_val)
                layer_weights_val = reduce_per_replica(layer_weights_val)
                layer_biases_val = reduce_per_replica(layer_biases_val)

                # Create an exportable version of the TensorFlow graph
                self._input_tensor_export = tf.placeholder(shape=[None] + dataset_trn.output_shapes[0].as_list(), dtype=dataset_trn.output_types[0])
                
                self._output_tensor_export = model(
                    self._input_tensor_export,
                    tf.placeholder(shape=[None] + dataset_trn.output_shapes[1].as_list(), dtype=dataset_trn.output_types[1])
                )[output_layer_id]
            else:
                #dist_loss, dist_grads_train, dist_locals = strategy.experimental_run(train_step, train_iterator)
                #dist_test = strategy.experimental_run(test_step, test_iterator) # TODO: implement this.

                raise NotImplementedError

            sess.run(tf.global_variables_initializer())
            
            if INCLUDE_KERAS_METRICS:
                sess.run([v.initializer for v in auc_train.variables])  # these need spec. treatment when initializing
                sess.run([v.initializer for v in recall_train.variables])
                sess.run([v.initializer for v in precision_train.variables])
                sess.run([v.initializer for v in auc_val.variables]) 
                sess.run([v.initializer for v in recall_val.variables])
                sess.run([v.initializer for v in precision_val.variables])
            else:
                auc_train_tensor = tf.constant(-1)
                auc_val_tensor = tf.constant(-2)
                f1_train = tf.constant(-3)
                f1_val = tf.constant(-4)   

            self._variables = {k: v for k, v in locals().items() if can_serialize(v)}        
            
            savables = tf.global_variables()
            self._savables=savables
            self._saver = tf.compat.v1.train.Saver(savables)

            # Restore from checkpoint if specified
            {% filter remove_lspaces(8) %}
                {% if export_directory is not none %}
                    path = tf.train.latest_checkpoint('{{export_directory}}')
                    self._saver.restore(sess, path)
                {% endif %}
            {% endfilter %}

            log.info("Entering training loop")

            self._epoch = 0
            while self._epoch < self._n_epochs and not self._stopped: 
                t0 = time.perf_counter()               
                self._training_iteration = 0
                self._validation_iteration = 0
                self._status = 'training'

                sess.run(train_iterator_init)                
                try:
                    while not self._stopped:
                        self._loss_training, self._accuracy_training, \
                            self._layer_outputs, self._layer_weights, self._layer_biases, \
                            self._layer_gradients = sess.run([loss_train, accuracy_train, layer_outputs_train, layer_weights_train, layer_biases_train, layer_gradients_train])         
                        
                        if INCLUDE_KERAS_METRICS:
                            auc_train.reset_states()
                            recall_train.reset_states()
                            precision_train.reset_states()     
                        yield YieldLevel.SNAPSHOT
                        self._training_iteration += 1 * n_devices
                except tf.errors.OutOfRangeError:
                    pass

                sess.run(validation_iterator_init)
                self._status = 'validation'
                try:
                    while not self._stopped:
                        self._loss_validation, self._accuracy_validation, \
                            self._layer_outputs, self._layer_weights, self._layer_biases, \
                            self._layer_gradients = sess.run([loss_val, accuracy_val, layer_outputs_val, layer_weights_val, layer_biases_val, layer_gradients_val])

                        if INCLUDE_KERAS_METRICS:
                            auc_val.reset_states()
                            recall_val.reset_states()
                            precision_val.reset_states()                                
                        yield YieldLevel.SNAPSHOT
                        self._validation_iteration += 1 * n_devices     
                except tf.errors.OutOfRangeError:
                    pass
                log.info(
                    f"Finished epoch {self._epoch+1}/{self._n_epochs} - "
                    f"loss training, validation: {self.loss_training:.6f}, {self.loss_validation:.6f} - "
                    f"acc. training, validation: {self.accuracy_training:.6f}, {self.accuracy_validation:.6f}"
                )
                log.info(f"Epoch duration: {round(time.perf_counter() - t0, 3)} s")            
                self._epoch += 1
            
            self._testing_iteration = 0
            self._status = 'testing'
            sess.run(test_iterator_init)
            x, y = test_iterator.get_next()
            layer_output_tensors = model(x, y)
            try:
                while not self._stopped:
                    self._layer_outputs = sess.run(layer_output_tensors)
                    yield YieldLevel.SNAPSHOT                                    
                    self._testing_iteration += 1
            except tf.errors.OutOfRangeError:
                pass

            self._status = 'finished'
            self._variables = {k: v for k, v in locals().items() if can_serialize(v)}
            yield YieldLevel.DEFAULT
{% endmacro %}


################################################### Main #####################################################
{% macro layer_tf1x_classification(layer_name, output_layer, target_layer, n_epochs, loss_function, class_weights, optimizer, learning_rate, decay_steps, decay_rate, momentum, beta1, beta2, distributed, export_directory) %}
class {{layer_name}}(ClassificationLayer):

    def __init__(self):
        self._n_epochs = {{n_epochs}}
        self._batch_size = 10 

        self._stopped = False
        self._paused = False
        self._headless = False
        self._status = 'created'
        
        self._loss_training = 0.0
        self._loss_validation = 0.0
        self._loss_testing = 0.0      

        self._accuracy_training = 0.0
        self._accuracy_validation = 0.0
        self._accuracy_testing = 0.0      
        
        self._variables = {}
        self._layer_outputs = {}
        self._layer_weights = {}
        self._layer_biases = {}        
        self._layer_gradients = {}

        self._training_iteration = 0
        self._validation_iteration = 0
        self._testing_iteration = 0

        self._trn_sz_tot = 0
        self._val_sz_tot = 0
        self._tst_sz_tot = 0

        self._checkpoint = None
        
    def run(self, graph: Graph):
        """Called as the main entry point for training. Responsible for training the model.

        Args:
            graph: A PerceptiLabs Graph object containing references to all layers objects included in the model produced by this training layer.
        """   
        {% if distributed -%}
            {{ run_distributed(graph, layer_name, output_layer, target_layer, n_epochs, loss_function, class_weights, optimizer, learning_rate, decay_steps, decay_rate, momentum, beta1, beta2, distributed, export_directory) }}
        {% else -%}
            {{ run_normal(graph, layer_name, output_layer, target_layer, n_epochs, loss_function, class_weights, optimizer, learning_rate, decay_steps, decay_rate, momentum, beta1, beta2, distributed, export_directory) }}
        {% endif %}                

    def on_export(self, path: str, mode: str) -> None:
        """Called when the export or save button is clicked in the frontend.
        It is up to the implementing layer to save the model to disk.
        
        Args:
            path: the directory where the exported model will be stored.
            mode: how to export the model. Made available to frontend via 'export_modes' property."""

        log.debug(f"Export called. Project path = {path}, mode = {mode}")
        pb_path = os.path.join(path, '1')
        
        # Export non-compressed model
        if mode in ['TFModel', 'TFModel+checkpoint']:
            tf.compat.v1.saved_model.simple_save(self._sess, pb_path, inputs={'input': self._input_tensor_export}, outputs={'output': self._output_tensor_export})

        # Export compressed model
        if mode in ['TFLite', 'TFLite+checkpoint']:
            converter = tf.lite.TFLiteConverter.from_session(self._sess, [self._input_tensor_export], [self._output_tensor_export])
            converter.post_training_quantize = True
            tflite_model = converter.convert()
            open(pb_path, "wb").write(tflite_model)

        # Export checkpoint
        if mode in ['TFModel+checkpoint', 'TFLite+checkpoint']:
            {% filter remove_lspaces(8) %}
                {% if distributed %}
                    self._saver.save(self._sess, os.path.join(path, 'model.ckpt'), global_step=0)
                {% else %}
                    self._checkpoint.save(file_prefix=os.path.join(path, 'model.ckpt'), session=self._sess)
                {% endif %}
            {% endfilter %}
                
    def on_stop(self) -> None:
        """Called when the save model button is clicked in the frontend. 
        It is up to the implementing layer to save the model to disk."""
        self._stopped = True

    def on_headless_activate(self) -> None:
        """"Called when the statistics shown in statistics window are not needed.
        Purose is to speed up the iteration speed significantly."""
        self._headless = True

        self._layer_outputs = {} 
        self._layer_weights = {}
        self._layer_biases = {}
        self._layer_gradients = {}

    def on_headless_deactivate(self) -> None:
        """"Called when the statistics shown in statistics window are needed.
        May slow down the iteration speed of the training."""
        import time
        log.info(f"Set to headless_off at time {time.time()}")
        self._headless = False

    @property
    def export_modes(self) -> List[str]:
        """Returns the possible modes of exporting a model."""        
        return [
            'TFModel',
            'TFLite'
            'TFModel+checkpoint',
            'TFLite+checkpoint',            
        ]
        
    @property
    def is_paused(self) -> None:
        """Returns true when the training is paused."""        
        return self._paused

    @property
    def batch_size(self):
        """ Size of the current training batch """        
        return self._batch_size

    @property
    def status(self):
        """Called when the pause button is clicked in the frontend. It is up to the implementing layer to pause its execution."""        
        return self._status
    
    @property
    def epoch(self):
        """The current epoch"""        
        return self._epoch

    @property
    def variables(self):
        """Any variables belonging to this layer that should be rendered in the frontend.
        
        Returns:
            A dictionary with tensor names for keys and picklable for values.
        """
        return self._variables.copy()        

    @property
    def sample(self) -> np.ndarray:
        """Returns a single data sample"""        
        return np.empty(())

    @property
    def size_training(self) -> int:
        """Returns the size of the training dataset"""                                    
        return self._trn_sz_tot

    @property
    def size_validation(self) -> int:
        """Returns the size of the validation dataset"""                                            
        return self._val_sz_tot

    @property
    def size_testing(self) -> int:
        """Returns the size of the testing dataset"""
        return self._tst_sz_tot

    def make_generator_training(self) -> Generator[np.ndarray, None, None]:
        """Returns a generator yielding single samples of training data. In the case of a training layer, this typically yields the model output."""        
        # Simply call sess.run on the output & target tensors :)  #TODO: how to make generators generic? We have two datasets here, but not all datasets will be labeled. Distinguish between supervised/unsupervised data layers and instead REQUIRE pairs of data layers for supervised?
        yield from []
        
    def make_generator_validation(self) -> Generator[np.ndarray, None, None]:
        """Returns a generator yielding single samples of validation data. In the case of a training layer, this typically yields the model output."""                
        yield from []
        
    def make_generator_testing(self) -> Generator[np.ndarray, None, None]:
        """Returns a generator yielding single samples of testing data. In the case of a training layer, this typically yields the model output."""                        
        yield from []

    @property
    def accuracy_training(self) -> float:
        """Returns the current accuracy of the training phase"""        
        return self._accuracy_training
    
    @property
    def accuracy_validation(self) -> float:
        """Returns the current accuracy of the validation phase"""                
        return self._accuracy_validation

    @property
    def accuracy_testing(self) -> float:
        """Returns the current accuracy of the testing phase"""                        
        return self._accuracy_testing

    @property
    def loss_training(self) -> float:
        """Returns the current loss of the training phase"""                
        return self._loss_training        

    @property
    def loss_validation(self) -> float:
        """Returns the current loss of the validation phase"""                        
        return self._loss_validation        

    @property
    def loss_testing(self) -> float:
        """Returns the current loss of the testing phase"""                
        return self._loss_testing

    @property
    def layer_weights(self) -> Dict[str, Dict[str, Picklable]]:
        """The weight values of each layer in the input Graph during the training.

        Returns:
            A dictionary of nested dictionaries, where each key is a layer id. The nested dictionaries contain weight name and value pairs. The values must be picklable.
        """        
        return self._layer_weights

    @property
    def layer_biases(self) -> Dict[str, Dict[str, Picklable]]:
        """The bias values of each layer in the input Graph during the training.

        Returns:
            A dictionary of nested dictionaries, where each key is a layer id. The nested dictionaries contain weight name and value pairs. The values must be picklable.
        """        
        return self._layer_biases
    
    @property
    def layer_gradients(self) -> Dict[str, Dict[str, Picklable]]:
        """The gradients with respect to the loss of all trainable variables of each layer in the input Graph.

        Returns:
            A dictionary of nested dictionaries, where each key is a layer id. The nested dictionaries contain gradient name and value pairs. The values must be picklable.
        """        
        return self._layer_gradients
    
    @property
    def layer_outputs(self) -> Dict[str, Dict[str, Picklable]]:
        """The output values of each layer in the input Graph during the training (e.g., tf.Tensors evaluated for each iteration)

        Returns:
            A dictionary of nested dictionaries, where each key is a layer id. The nested dictionaries contain variable name and value pairs. The values must be picklable.
        """
        return self._layer_outputs

    @property
    def training_iteration(self) -> int:
        """The current training iteration"""
        return self._training_iteration

    @property
    def validation_iteration(self) -> int:
        """The current validation iteration"""        
        return self._validation_iteration

    @property
    def testing_iteration(self) -> int:
        """The current testing iteration"""                
        return self._testing_iteration
    
    @property
    def progress(self) -> float:
        """A number indicating the overall progress of the training
        
        Returns:
            A floating point number between 0 and 1
        """        
        n_iterations_per_epoch = np.ceil(self.size_training / self.batch_size) + \
                                 np.ceil(self.size_validation / self.batch_size)
        n_iterations_total = self._n_epochs * n_iterations_per_epoch

        iteration = self.epoch * n_iterations_per_epoch + \
                    self.training_iteration + self.validation_iteration
        
        progress = min(iteration/(n_iterations_total - 1), 1.0) 
        return progress
{% endmacro %}
