class DeepLearningFC_Dense_1Keras(tf.keras.layers.Layer, PerceptiLabsVisualizer):
    def __init__(self):
        super().__init__()
        self._n_neurons = 3
        self._variables = {}

    def call(self, inputs, training=True):
        """ Takes a tensor as input and feeds it forward through a layer of neurons, returning a newtensor. Invoked by the Keras framework. """
        
                            
                
        input_ = inputs['input']
        
        flat_input = self.flatten(input_)
        linear_output = self.dense(flat_input)
        
        output = linear_output    

        preview = output
	

        self.kernel = self.dense.kernel
        self.bias = self.dense.bias

        self._variables = {k: v for k, v in locals().items() if can_serialize(v)}

            
        self._outputs = {            
            'output': output,
            'W': tf.expand_dims(self.kernel, axis=0),            
            'b': tf.expand_dims(self.bias, axis=0),            
            'preview': preview,
        }
                            

        return self._outputs

    def build(self, input_shape: Dict[str, tf.TensorShape]) -> None:
        """ Called by the Keras framework upon the first invocation of the call method
        
        Args:
            input_shape: A dictionary with layer id and its tensor shape        
        """
        self.flatten = tf.keras.layers.Flatten()
        self.dense = tf.keras.layers.Dense(
            units=3,
            use_bias=True,
            kernel_initializer='glorot_uniform',
            bias_initializer='zeros', 
            kernel_regularizer=None,
            bias_regularizer=None,
        )
        
    def get_config(self) -> Dict[str, Picklable]:
        """Any variables belonging to this layer that should be rendered in the frontend.
        
        Returns:
            A dictionary with tensor names for keys and picklable for values.
        """
        return self._variables

    @property
    def visualized_trainables(self):
        """ Returns two tf.Variables (weights, biases) to be visualized in the frontend """    
        return self.kernel, self.bias


class DeepLearningFC_Dense_1(Tf2xLayer):
    # TODO: deprecate this part! (see work item 1534)
    def __init__(self):
        super().__init__(
            keras_class=DeepLearningFC_Dense_1Keras
        )