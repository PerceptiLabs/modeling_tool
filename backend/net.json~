{
    "Hyperparameters": {
        "Epochs": "1",
        "Batch_size": "32",
        "MaxSteps": "1000",
        "Data_partition": {
            "Training": "70",
            "Validation": "20",
            "Test": "10"
        },
        "Dropout_rate": "0.5",
        "Shuffle_data": true,
        "Save_model_every": "0"
    },
    "Layers": {
        "1564399775664": {
            "Name": "Data_1",
            "Type": "DataData",
            "Properties": {
                "Type": "Data",
                "accessProperties": {
                    "Columns": [],
                    "Dataset_size": 1,
                    "Category": "Local",
                    "Type": "Data",
                    "Path": [
                        "/home/anton/Data/mnist_split/mnist_input.npy"
                    ],
                    "Content": "",
                    "Warning": "Could not find path"
                }
            },
            "checkpoint": [],
            "endPoints": [],
            "backward_connections": [],
            "forward_connections": [
                "1564399777283"
            ]
        },
        "1564399777283": {
            "Name": "Reshape_1",
            "Type": "ProcessReshape",
            "checkpoint": [],
            "endPoints": [],
            "Properties": {
                "Shape": [
                    28,
                    28,
                    1
                ],
                "Permutation": [
                    0,
                    1,
                    2
                ]
            },
            "Code": {
                "Output": "Y=tf.reshape(X['Y'], [-1]+[layer_output for layer_output in [28,28,1]]);\nY=tf.transpose(Y,perm=[0]+[i+1 for i in [0,1,2]]);"
            },
            "backward_connections": [
                "1564399775664"
            ],
            "forward_connections": [
                "1564399781738"
            ]
        },
        "1564399781738": {
            "Name": "Convolution_1",
            "Type": "DeepLearningConv",
            "checkpoint": [],
            "endPoints": [],
            "Properties": {
                "Conv_dim": "2D",
                "Patch_size": "3",
                "Stride": "2",
                "Padding": "'SAME'",
                "Feature_maps": "8",
                "Activation_function": "Sigmoid",
                "Dropout": false,
                "PoolBool": false,
                "Pooling": "Max",
                "Pool_area": "2",
                "Pool_padding": "'SAME'",
                "Pool_stride": "2"
            },
            "Code": {
                "Output": "shape=[3,3,[28, 28, 1][-1],8];\ninitial = tf.truncated_normal(shape, stddev=np.sqrt(2/(3**2 * 8)));\nW = tf.Variable(initial);\ninitial = tf.constant(0.1, shape=[8]);\nb=tf.Variable(initial);\nnode = tf.nn.conv2d(X['Y'], W, strides=[1, 2,2, 1], padding='SAME');\nnode=node+b;\nY=tf.sigmoid(node);\n"
            },
            "backward_connections": [
                "1564399777283"
            ],
            "forward_connections": [
                "1564399782856"
            ]
        },
        "1564399782856": {
            "Name": "Fully Connected_1",
            "Type": "DeepLearningFC",
            "checkpoint": [],
            "endPoints": [],
            "Properties": {
                "Neurons": "10",
                "Activation_function": "Sigmoid",
                "Dropout": false
            },
            "Code": {
                "Output": "input_size=1\nfor element in [14, 14, 8]:\n  input_size*=element\nshape=[input_size,10];\ninitial = tf.truncated_normal(shape, stddev=0.1);\nW=tf.Variable(initial);\ninitial = tf.constant(0.1, shape=[10]);\nb=tf.Variable(initial);\nflat_node=tf.cast(tf.reshape(X['Y'],[-1,input_size]),dtype=tf.float32);\nnode=tf.matmul(flat_node,W);\nnode=node+b;\nY=tf.sigmoid(node);"
            },
            "backward_connections": [
                "1564399781738"
            ],
            "forward_connections": [
                "1564399790363"
            ]
        },
        "1564399786876": {
            "Name": "Data_2",
            "Type": "DataData",
            "Properties": {
                "Type": "Data",
                "accessProperties": {
                    "Columns": [],
                    "Dataset_size": 1,
                    "Category": "Local",
                    "Type": "Data",
                    "Path": [
                        "/home/anton/Data/mnist_split/mnist_labels.npy"
                    ],
                    "Content": "",
                    "Warning": "Could not find path"
                }
            },
            "checkpoint": [],
            "endPoints": [],
            "backward_connections": [],
            "forward_connections": [
                "1564399788744"
            ]
        },
        "1564399788744": {
            "Name": "OneHot_1",
            "Type": "ProcessOneHot",
            "checkpoint": [],
            "endPoints": [],
            "Properties": {
                "N_class": "10"
            },
            "Code": {
                "Output": "Y=tf.one_hot(tf.cast(X['Y'],dtype=tf.int32),10);"
            },
            "backward_connections": [
                "1564399786876"
            ],
            "forward_connections": [
                "1564399790363"
            ]
        },
        "1564399790363": {
            "Name": "Normal_1",
            "Type": "TrainNormal",
            "checkpoint": [],
            "endPoints": [],
            "Properties": {
                "Labels": "1564399788744",
                "N_class": "1",
                "Loss": "Cross_entropy",
                "Class_weights": 1,
                "Learning_rate": "0.01",
                "Optimizer": "SGD",
                "Beta_1": "0.1",
                "Beta_2": "0.1",
                "Momentum": "0.1",
                "Decay": "0.1",
                "Training_iters": "20000"
            },
            "Code": {
                "Loss": "N_class=[[10], [10]][-1][-1];\nflat_logits = tf.reshape(X['1564399782856']['Y'], [-1, N_class]);\nflat_labels = tf.reshape(X['1564399788744']['Y'], [-1, N_class]);\nloss = tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits(labels=flat_labels, logits=flat_logits));",
                "Optimizer": "optimizer = tf.train.GradientDescentOptimizer(0.01).minimize(loss);\nY=optimizer;",
                "Accuracy": "arg_output=tf.argmax(X['1564399782856']['Y'],-1);\narg_label=tf.argmax(X['1564399788744']['Y'],-1);\ncorrect_prediction = tf.equal(arg_output, arg_label);\naccuracy = tf.reduce_mean(tf.cast(correct_prediction, tf.float32));\nf1=tf.contrib.metrics.f1_score(X['1564399788744']['Y'],X['1564399782856']['Y'])[0];\nauc=tf.metrics.auc(labels=X['1564399788744']['Y'],predictions=X['1564399782856']['Y'],curve='ROC')[0];"
            },
            "backward_connections": [
                "1564399782856",
                "1564399788744"
            ],
            "forward_connections": []
        }
    }
}