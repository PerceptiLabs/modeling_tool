{% macro layer_datadata(layer_name, sources, partitions, batch_size, shuffle, columns, seed, lazy, shuffle_buffer_size) %}
class {{layer_name}}(DataLayer):
    def __init__(self):
        path = "{{sources[0]['path']}}"
        self._data = np.load(path)
        
    @property
    def variables(self):
        return {}

    @property
    def sample(self):
        return self._data[0]

    @property
    def size_training(self):
        return round(len(self._data)*0.7)

    @property
    def size_validation(self):
        return round(len(self._data)*0.2)

    @property
    def size_testing(self):
        return round(len(self._data)*0.1)

    def make_generator_training(self):
        yield from self._data[0:self.size_training]
        
    def make_generator_validation(self):
        yield from self._data[self.size_training:self.size_training+self.size_validation]
        
    def make_generator_testing(self):
        yield from self._data[self.size_training+self.size_validation:]    

{% endmacro %}

