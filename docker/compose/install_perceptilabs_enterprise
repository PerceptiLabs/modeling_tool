#!/usr/bin/env bash
set -Eeo pipefail

###################################################################################################
# Constants
VERSION=INVALID
DOCKER_USERNAME=enterpriseuser
CONTAINER_REGISTRY=perceptilabsenterprise.azurecr.io
AZURE_BLOB_URL=https://perceptilabs.blob.core.windows.net/enterprise
CONFIG_DIR="${HOME}/.perceptilabs"
CONFIG_FILE="${CONFIG_DIR}/config"
REQUIRED_NVIDIA_VERSION=450
REQUIRED_DOCKER_VERSION=20
DOCKER_COMPOSE_INSTALLER="https://github.com/docker/compose/releases/download/1.28.5/docker-compose-$(uname -s)-$(uname -m)"
DOCKER_COMPOSE_URL=${AZURE_BLOB_URL}/${VERSION}/docker-compose.yml
NGINX_CONF_URL=${AZURE_BLOB_URL}/${VERSION}/nginx.conf

###################################################################################################
# State

needs_reboot=0
should_install_drivers=0

###################################################################################################
# Parse args

USAGE="USAGE: $0 [--headless|-s] [--drivers|-d force|skip|allow] [--docker|-k force|skip|allow] [--help|-h] [--pwd|-p password] [--airgapped|-a <images-tarball>] [--noreboot|-n]"

# defaults
opt_headless=0
opt_noreboot=0
opt_drivers=
opt_docker=
opt_images_tarball=

###################################################################################################
#  Transform long options to short ones
for arg in "$@"; do
  shift
  case "$arg" in
    "--help")      set -- "$@" "-h" ;;
    "--headless")  set -- "$@" "-s" ;;
    "--drivers")   set -- "$@" "-d" ;;
    "--docker")    set -- "$@" "-k" ;;
    "--pwd")       set -- "$@" "-p" ;;
    "--noreboot")  set -- "$@" "-n" ;;
    "--airgapped") set -- "$@" "-a" ;;
    *)             set -- "$@" "$arg"
  esac
done

###################################################################################################
# parse short options
while getopts ":hsd:k:p:na:" arg; do
  case ${arg} in
    a )
      opt_images_tarball="${OPTARG}"
      ;;
    h )
      echo "${USAGE}"
      exit 0
      ;;
    d )
      opt_drivers=${OPTARG}
      ;;
    k )
      opt_docker=${OPTARG}
      ;;
    s )
      opt_headless=1
      ;;
    p )
      PL_PASSWORD="${OPTARG}"
      ;;
    n )
      opt_noreboot=1
      ;;
    : )
      echo "Missing argument to ${OPTARG}" 1>&2
      echo "${USAGE}" 1>&2
      exit 1
      ;;
    \? )
      echo "Invalid option: ${OPTARG}"
      exit 1
      ;;
  esac
done

case ${opt_drivers} in
  force|allow|skip )
    ;;
  '' )
    ;;
  *)
    echo "Invalid parameter to -d: ${opt_drivers}"
    echo "${USAGE}"
    exit 1
esac

# If we're airgapped, then we're not going to do anything that tries to touch the internet
if [ -n "${opt_images_tarball}" ]; then
  opt_drivers=skip
  opt_docker=skip
  opt_noreboot=1

  if [ ! -f $opt_images_tarball ]; then
    echo "Images tarball '${opt_images_tarball}' doesn't exist"
    exit 1
  fi
fi

# if we don't have an interactive shell, then it has to be headless
tty -s || opt_headless=1

if [ $opt_headless -eq 1 ]; then
  logdate=$(date "+%Y%m%d%H%M%S")
  exec &> installer_output.txt.$logdate
fi

###################################################################################################
# Get User Input

[ ! -d "${CONFIG_DIR}" ] && mkdir -p "${CONFIG_DIR}"

call_stat(){
  # figure out stat(1) flags based on OS
  if [[ $(uname -s) == Linux ]]; then
    flags='-c %a'
  else
    flags='-f %Lp'
  fi
  stat $flags "$1"
}

set_config_file_permissions(){
  chmod 600 "$CONFIG_FILE"
}

source_config(){
  if [ -n "${PL_PASSWORD}" ]; then
    return 0
  fi

  if [ ! -f "${CONFIG_FILE}" ]; then
    if [ $opt_headless -eq 1 ]; then
      echo "Config file is required in headless mode"
      exit 1
    fi
    return 1
  fi

  if [ ! -O "${CONFIG_FILE}" ]; then
    echo "This user doesn't own the config file ${CONFIG_FILE}. Skipping reading it"
    return 1
  fi

  set_config_file_permissions
  source "${CONFIG_FILE}"
  return 0
}

maybe_get_password(){
  # if we have a tarball, then we don't need a password
  if [ -n "${opt_images_tarball}" ]; then
    return 0
  fi

  # if we can get the password from config then we're done
  source_config && return 0

  if [ -z "${PL_PASSWORD}" ]; then
    if [ -n "${opt_images_tarball}" ]; then
      return 0
    fi

    if [ $opt_headless -eq 1 ]; then
      echo "Docker password isn't configured."
      exit 1
    fi

    read -s -r -p "Enter the perceptilabs docker registry password: " PL_PASSWORD
    echo
    echo "PL_PASSWORD=${PL_PASSWORD}" >> "${CONFIG_FILE}"
    set_config_file_permissions
  fi
}


###################################################################################################
# Install Latest NVIDIA drivers
has_gpus(){
  lspci -d 10de: | grep . -q
  return $?
}

has_nvidia_driver(){
  which nvidia-smi &>/dev/null
  return $?
}

driver_version_current(){
  has_nvidia_driver &&
    version=$(nvidia-smi --query-gpu=driver_version --format=csv,noheader | cut --delimiter=. --fields=1) &&
    echo "NVIDIA drivers version: ${version}" &&
    test "${version}" -ge "$REQUIRED_NVIDIA_VERSION"
  return $?
}

ensure_drivers_tool_installed(){
  (which ubuntu-drivers &>/dev/null) || {
    sudo apt update
    sudo apt install -y ubuntu-drivers-common
  }
  return $?
}

find_latest_driver(){

  driver_version=$(ubuntu-drivers devices | \
    grep "nvidia-driver-.*-server" | \
    sed "s/driver.*nvidia-driver-\(.*\)-server.*/\1/g" | \
    sort --numeric | \
    tail -n 1 )

  if [ -n "${driver_version}" ]; then
    echo "nvidia-driver-${driver_version}-server"
  fi
}

install_latest_driver(){
  ensure_drivers_tool_installed

  package=$(find_latest_driver)
  if [ -z "${package}" ]; then
    echo "Couldn't find an NVIDIA driver"
    return 1
  fi

  if [ $opt_headless -eq 1 ] && [ -z "${opt_drivers}" ]; then
    echo "Detected a needed driver. Rerun this script with a value in the --drivers command line option."
    exit 1
  fi

  if [ $opt_headless -eq 0 ]; then
    # TODO: detect non-interactive shell and fail
    read -r -p "Detected latest driver: ${package}. Press enter to install it "
    should_install_drivers=1
  fi

  needs_reboot=1
  sudo apt install -y ${package}
}

install_nvidia_drivers(){
  case "${opt_drivers}" in
    force )
      install_latest_driver
      return $?
      ;;
    skip )
      echo "Skipping installation of NVIDIA drivers"
      return 0
      ;;
    allow | '' )
      ! has_gpus || \
        driver_version_current || \
        install_latest_driver
      ;;
  esac
  return $?
}

###################################################################################################
# Install docker
has_docker(){
  sudo which docker >/dev/null
  return $?
}

docker_version_current(){
  has_docker && {
    version=$(sudo docker version --format "{{.Client.Version}}" | cut --delimiter=. --fields=1)
    test $version -ge $REQUIRED_DOCKER_VERSION
  }
  return $?
}

install_latest_docker(){
  echo "Installing docker..."
  curl https://get.docker.com -s | sh
  sudo systemctl --now enable docker

  # grep to dev/null instead of -q because -q breaks the pipe
  sudo docker run --rm hello-world | grep "Hello from Docker" >/dev/null

  return $?
}

install_docker(){
  case "${opt_docker}" in
    force )
      install_latest_docker
      return $?
      ;;
    skip )
      echo "Skipping installation of docker"
      docker_version_current || {
        echo "Perceptilabs enterprise requires docker version $REQUIRED_DOCKER_VERSION or higher to function"
        return 1
      }
      ;;
    allow | '' )
      docker_version_current ||
        install_latest_docker
      ;;
  esac
  return $?
}


###################################################################################################
# Install nvidia-docker
# from https://docs.nvidia.com/datacenter/cloud-native/container-toolkit/install-guide.html
test_nvidia_docker(){
  sudo docker run --rm --gpus all registry.access.redhat.com/ubi8-minimal nvidia-smi | grep "NVIDIA-SMI" >/dev/null
  return $?
}

install_nvidia_docker(){
  distribution=$(. /etc/os-release;echo $ID$VERSION_ID) \
     && curl -s -L https://nvidia.github.io/nvidia-docker/gpgkey | sudo apt-key add - \
     && curl -s -L https://nvidia.github.io/nvidia-docker/$distribution/nvidia-docker.list | sudo tee /etc/apt/sources.list.d/nvidia-docker.list
  sudo apt update
  sudo apt install -y nvidia-docker2
  sudo systemctl restart docker
  return $?
}

install_nvidia_docker_support(){
  # skip if there's no nvidia driver to support
  has_nvidia_driver || \
    return 0

  case "${opt_docker}" in
    force )
      install_nvidia_docker
      ;;
    skip )
      echo "Skipping installation of NVIDIA support for docker"
      has_nvidia_driver && \
        test_nvidia_docker || \
        echo "WARNING: Docker won't be able to use gpus unless nvidia-docker is installed" >&2
      ;;
    allow | '' )
      test_nvidia_docker || {
        install_nvidia_docker

        # verify that it's working
        test_nvidia_docker
      }
      ;;
  esac
  return $?
}

###################################################################################################
# Install docker-compose
assert_docker_compose_installed(){
  which docker-compose &>/dev/null
  return $?
}

force_install_docker_compose(){
  sudo curl -s -L "${DOCKER_COMPOSE_INSTALLER}" -o /usr/bin/docker-compose
  sudo chmod +x /usr/bin/docker-compose
}

install_docker_compose(){

  case "${opt_docker}" in
    force )
      force_install_docker_compose
      ;;
    skip )
      echo "Skipping installation of docker-compose"
      assert_docker_compose_installed || \
        echo "WARNING: This installer depends on docker-compose being installed"
      ;;
    allow | '' )
      assert_docker_compose_installed || \
        force_install_docker_compose
      ;;
  esac
  return $?
}

###################################################################################################
# Install PerceptiLabs
remove_gpu_section(){
  sed --in-place "/^\s*deploy:/,/capabilities.*gpu/d" docker-compose.yml
}

edit_docker_compose_yml(){
  sed --in-place "s/\${CONTAINER_REGISTRY}/$CONTAINER_REGISTRY/g" docker-compose.yml
  sed --in-place "s/\${PL_VERSION}/$VERSION/g" docker-compose.yml

  has_nvidia_driver || \
    remove_gpu_section
}

install_perceptilabs_airgapped(){
  if [ ! -f "${opt_images_tarball}" ]; then
    echo "Images tar file "${opt_images_tarball}" doesn't exist" >&2
    exit 1
  fi

  edit_docker_compose_yml

  mkdir -p plabs/data
  chmod 777 plabs
  chmod 777 plabs/data

  echo "Loading docker images"
  sudo docker load --quiet --input "${opt_images_tarball}"

  sudo docker-compose up -d
}

install_perceptilabs_online(){
  curl -s -O $NGINX_CONF_URL
  curl -s $DOCKER_COMPOSE_URL > docker-compose.yml

  edit_docker_compose_yml

  mkdir -p plabs/data
  chmod 777 plabs
  chmod 777 plabs/data
  sudo docker login ${CONTAINER_REGISTRY} --username ${DOCKER_USERNAME} --password "${PL_PASSWORD}"

  echo pulling images
  sudo docker-compose pull

  sudo docker-compose up -d
}

install_perceptilabs(){
  if [ -n "${opt_images_tarball}" ]; then
    install_perceptilabs_airgapped
  else
    install_perceptilabs_online
  fi
}

reboot_if_needed(){
  if [ $needs_reboot -eq 1 ] && [ $opt_noreboot -eq 0 ]; then
    echo
    echo "Installation is complete."
    echo "This computer needs to reboot to complete the installation of drivers."

    if [ $opt_headless -eq 0 ]; then
      read -r -p "Press enter to reboot"
    fi
    sudo shutdown -r now
  fi
}

# Check that I can sudo
sudo echo

maybe_get_password

install_nvidia_drivers
install_docker
install_nvidia_docker_support
install_docker_compose
install_perceptilabs
reboot_if_needed

echo PerceptiLabs is ready!
exit 0
