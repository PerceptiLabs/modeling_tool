version: '3.4'

services:
  db:
    image: postgres:12
    restart: unless-stopped
    volumes:
      - ${PL_ROOT_DIR}/plabsdb:/var/lib/postgresql/data
    environment:
      PGDATA: /var/lib/postgresql/data/pgdata
      POSTGRES_DB: rygg
      POSTGRES_USER: rygg
      POSTGRES_PASSWORD: rygg
    healthcheck:
      test: pg_isready --username=rygg
      interval: 5s
      retries: 5
      timeout: 10s
      start_period: 1m
    networks:
      - perceptilabs

  redis:
    image: redis
    restart: unless-stopped
    healthcheck:
      test: redis-cli ping | grep -wq "PONG"
      interval: 30s
      timeout: 2s
      retries: 10
      start_period: 10s
    networks:
      - perceptilabs

  rygg:
    image: ${CONTAINER_REGISTRY}/rygg:${PL_VERSION}
    restart: unless-stopped
    environment:
      DJANGO_DATABASE: postgres
      DB_NAME: rygg
      DB_HOST: db
      DB_USER: rygg
      DB_PASS: rygg
      HOME: /perceptilabs
      PL_FILE_SERVING_TOKEN: thetoken
      PL_TUTORIALS_DATA: /tutorial_data
      PL_FILE_UPLOAD_DIR: /perceptilabs/Documents/Perceptilabs/data
      PL_REDIS_URL: redis://redis
    volumes:
      - ${PL_ROOT_DIR}/plabs:/perceptilabs/Documents/Perceptilabs
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - perceptilabs

  rygg_worker:
    image: ${CONTAINER_REGISTRY}/rygg:${PL_VERSION}
    command: python -m celery -A rygg worker --queues=rygg
    restart: unless-stopped
    environment:
      DJANGO_DATABASE: postgres
      DB_NAME: rygg
      DB_HOST: db
      DB_USER: rygg
      DB_PASS: rygg
      HOME: /perceptilabs
      PL_FILE_SERVING_TOKEN: thetoken
      PL_TUTORIALS_DATA: /tutorial_data
      PL_FILE_UPLOAD_DIR: /perceptilabs/Documents/Perceptilabs/data
      PL_REDIS_URL: redis://redis
    volumes:
      - ${PL_ROOT_DIR}/plabs:/perceptilabs/Documents/Perceptilabs
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: python -m celery -A rygg inspect ping -d celery@$$HOSTNAME | grep -qi pong
      interval: 5s
      retries: 5
      timeout: 10s
      start_period: 1m
    networks:
      - perceptilabs

  frontend:
    image: ${CONTAINER_REGISTRY}/frontend:${PL_VERSION}
    restart: unless-stopped
    depends_on:
      rygg:
        condition: service_healthy
      keycloak:
        condition: service_healthy
      training:
        # condition: service_healthy
        condition: service_started
      render:
        condition: service_started
        # condition: service_healthy
    healthcheck:
      test: curl --fail --silent localhost:8080/is_enterprise/ > /dev/null || exit 1
      interval: 5s
      retries: 5
      timeout: 10s
      start_period: 20s
    networks:
      - perceptilabs
    environment:
      PL_KEYCLOAK_URL: /auth/

  flower:
    image: ${CONTAINER_REGISTRY}/kernel:${PL_VERSION}
    command: python -m celery -A perceptilabs.tasks.celery_executor flower --url_prefix=queues
    restart: unless-stopped
    volumes:
      - ${PL_ROOT_DIR}/plabs:/perceptilabs/Documents/Perceptilabs
    environment:
      HOME: /perceptilabs
      PL_REDIS_URL: redis://redis
    networks:
      - perceptilabs

  training:
    image: ${CONTAINER_REGISTRY}/kernel:${PL_VERSION}
    command: python -m celery -A perceptilabs.tasks.celery_executor worker --hostname=training --queues=training --pool=threads
    restart: unless-stopped
    volumes:
      - ${PL_ROOT_DIR}/plabs:/perceptilabs/Documents/Perceptilabs
    environment:
      HOME: /perceptilabs
      PL_REDIS_URL: redis://redis
      PL_RYGG_BASE_URL: http://rygg:8000
    # with gpu
    deploy:
      resources:
        reservations:
          devices:
          - capabilities: [gpu]
    # end with gpu
    networks:
      - perceptilabs

  render:
    image: ${CONTAINER_REGISTRY}/kernel:${PL_VERSION}
    command: python main.py
    restart: unless-stopped
    volumes:
      - ${PL_ROOT_DIR}/plabs:/perceptilabs/Documents/Perceptilabs
    environment:
      HOME: /perceptilabs
      PL_REDIS_URL: redis://redis
      PL_KERNEL_CELERY: 1
      PL_KERNEL_MODE: rendering
      PL_RYGG_BASE_URL: http://rygg:8000
    healthcheck:
      test: curl --fail localhost:5001/healthy || exit 1
      interval: 5s
      timeout: 10s
      retries: 10
      start_period: 1m
    networks:
      - perceptilabs

  keycloak:
    image: quay.io/keycloak/keycloak:13.0.0
    restart: unless-stopped
    volumes:
       - ${PL_ROOT_DIR}/login_theme:/opt/jboss/keycloak/themes/perceptilabs
    environment:
      DB_VENDOR: postgres
      DB_ADDR: db
      DB_DATABASE: keycloak
      DB_USER: rygg
      DB_PASSWORD: rygg
      KEYCLOAK_LOGLEVEL: INFO
      ROOT_LOGLEVEL: INFO
    depends_on:
      db:
        condition: service_healthy
    healthcheck:
      test: curl http://localhost:8080/auth/realms/master
      interval: 30s
      timeout: 10s
      retries: 10
      start_period: 1m
    networks:
      - perceptilabs

  nginx:
    image: nginx
    restart: unless-stopped
    ports:
      - "80:80"
    volumes:
      - ${PL_ROOT_DIR}/nginx.conf:/etc/nginx/nginx.conf
    depends_on:
      rygg:
        condition: service_healthy
      training:
        condition: service_started
      render:
        condition: service_healthy
      frontend:
        condition: service_healthy
      flower:
        condition: service_started
      keycloak:
        condition: service_healthy
    networks:
      - perceptilabs

networks:
  perceptilabs:
    name: perceptilabs
