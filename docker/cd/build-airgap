#!/usr/bin/env bash
set -Eeo pipefail
set -x
if [ $# -lt 1 ]; then
  echo "USAGE $0 <version>"
  exit 1
fi

PL_VERSION=$1

# Perceptilabs AB
AZURE_TENANT=069b44e7-dd8e-4a34-ae4b-983f50242bff
RELEASE_SRC_BASE=https://perceptilabs.blob.core.windows.net/enterprise

RELEASE_FILES=(
  install_perceptilabs_enterprise
  system_migrations.tar.gz
)

DEST_ACCOUNT=perceptilabs
DEST_CONTAINER=pl-airgapped
CONTAINER_REGISTRY=perceptilabsenterprise.azurecr.io
REGISTRY_READER=enterpriseuser
ZIP_NAME=perceptilabs-${PL_VERSION}-airgapped.zip


####################################################################################################
# Preflight installed apps
REQUIRED_APPS=(
  zip
  az
  docker
  docker-compose
)
for app in "${REQUIRED_APPS[@]}"; do
  which ${app} > /dev/null || {
    echo "${app} isn't installed" >&2;
    exit 1
  }
done

# NOTES

# docker is installed with
# curl https://get.docker.com -s | sh
# sudo systemctl --now enable docker

# az cli is installed with:
# curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash

# docker-compose is installed with:
# DOCKER_COMPOSE_INSTALLER="https://github.com/docker/compose/releases/download/1.28.5/docker-compose-$(uname -s)-$(uname -m)"
# sudo curl -s -L "${DOCKER_COMPOSE_INSTALLER}" -o /usr/bin/docker-compose
# sudo chmod +x /usr/bin/docker-compose

# zip is from apt

####################################################################################################

# Ensure that we're logged into docker
cat ~/.docker/config.json | jq ".auths.\"$CONTAINER_REGISTRY\"" | grep -q -v null || {
  echo "Not logged into ${CONTAINER_REGISTRY}. Log in and restart." >&2
  exit 1
}

# Ensure that we're logged in to Azure
az account show | grep -q "${AZURE_TENANT}"

echo "Checking sudo capability"
sudo echo -n

BUILD_OUTPUT=$(mktemp -d)
DEST_ZIP=${BUILD_OUTPUT}/${ZIP_NAME}
SYSTEM_MIGRATIONS=${BUILD_OUTPUT}/system_migrations.tar.gz

echo -n "Getting release files for version ${PL_VERSION} ... "
for SRC in ${RELEASE_FILES[@]}; do
  curl -s $RELEASE_SRC_BASE/$PL_VERSION/${SRC} > ${BUILD_OUTPUT}/${SRC}
done
echo "done"

SED=$([[ ${OSTYPE} =~ darwin ]] && echo gsed || echo sed)
docker_images=$(\
  tar -x -f "${SYSTEM_MIGRATIONS}" -O --include="*docker-compose*.yml" | \
  grep image: | \
  grep -v fileserver | \
  $SED "s/.*image:[[:blank:]]*\(.*\)$/\1/g" | \
  $SED "s|\${CONTAINER_REGISTRY}|$CONTAINER_REGISTRY|g" | \
  $SED "s|\${PL_VERSION}|$PL_VERSION|g" | \
  sort --unique)

# pull the images
echo "${docker_images}"
echo "${docker_images}" | xargs -L 1 sudo docker pull

# save the images
echo -n "Saving the images locally ..."
sudo docker save ${docker_images} --output ${BUILD_OUTPUT}/images.tar
echo "done"

# add the images to the zip
echo -n "Adding the images to the release zip ..."
pushd ${BUILD_OUTPUT}
sudo chown ${USER} images.tar
sudo chgrp $(id -g -n ${USER}) images.tar
zip -u ${DEST_ZIP} ${RELEASE_FILES[@]} images.tar
popd
echo "done"

echo -n "uploading ..."
az storage blob upload \
  --file ${DEST_ZIP} \
  --container-name ${DEST_CONTAINER} \
  --name ${ZIP_NAME} \
  --account-name ${DEST_ACCOUNT}
echo "done"

echo -n "Removing build artifacts..."
rm -rf ${BUILD_OUTPUT}
echo "done"
