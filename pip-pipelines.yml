trigger:
- none

variables:
  BUILD_REASON: $(Build.Reason)
  BuildVariables.CommitId : $(Build.SourceVersion)
  BUILD_NUM: $(Build.BuildNumber)
  PYPI_REPO: pypi

jobs:
  - job: buildwheel

    strategy:
      matrix:
        linux_py3.6:
          artifact: linux_3.6_wheel
          image: 'ubuntu-16.04'
          pyver: '3.6'
        linux_py3.7:
          artifact: linux_3.7_wheel
          image: 'ubuntu-16.04'
          pyver: '3.7'
        osx_py3.6:
          artifact: osx_3.6_wheel
          image: 'macOS-10.14'
          pyver: '3.6'
        osx_py3.7:
          artifact: osx_3.7_wheel
          image: 'macOS-10.14'
          pyver: '3.7'
        win_py3.6:
          artifact: windows_3.6_wheel
          image: "vs2017-win2016"
          pyver: '3.6'
        win_py3.7:
          artifact: windows_3.7_wheel
          image: "vs2017-win2016"
          pyver: '3.7'

    pool:
        vmImage: $(image)

    steps:
    - script: |
        echo Setting PACKAGE_NAME_OVERRIDE to pl-nightly
        echo "##vso[task.setvariable variable=PACKAGE_NAME_OVERRIDE;]pl-nightly"

        echo Setting VERSION_EXTENSION
        echo "##vso[task.setvariable variable=VERSION_EXTENSION;]pl-nightly"
      condition: eq(variables['Build.Reason'], 'Schedule')
    - script: |
        echo Package name is now $(PACKAGE_NAME_OVERRIDE)

    - checkout: self
      clean: true
      submodules: recursive
      persistCredentials: true

    - task: FileTransform@2
      inputs:
        folderPath: '$(System.DefaultWorkingDirectory)/'
        xmlTransformationRules:
        jsonTargetFiles: '**/app_variables.json'

    - task: UsePythonVersion@0
      inputs:
        versionSpec: $(pyver)
        architecture: 'x64'
        addToPath: true

    - bash: |
        cd scripts/
        python build.py wheel
      displayName: 'Build'

    - publish: $(Build.Repository.LocalPath)/build/out/
      artifact: $(artifact)

  - job: pushwheel
    dependsOn:
      - buildwheel
    condition: and(
                succeeded(),
                or(
                  eq(variables['FORCE_PUBLISH'], 'true'),
                  eq(variables['Build.Reason'], 'Schedule')))
    pool:
      vmImage: 'ubuntu-16.04'
    steps:
      - task: UsePythonVersion@0
        inputs:
          versionSpec: '3.x'
          addToPath: true
          architecture: 'x64'

      - task: DownloadPipelineArtifact@2
        inputs:
          buildType: 'current'
          itemPattern: '**/*.whl'
          targetPath: '$(Pipeline.Workspace)'

      - script: |
          ls -al
          mkdir topush
          mv **/*.whl topush
          cd topush
          rename 's/linux_x86_64/manylinux1_x86_64/' *.whl
          pip install --upgrade pip
          pip install twine
          python -m twine upload --non-interactive -u __token__ --repository ${PYPI_REPO} *
        env:
          TWINE_PASSWORD: $(TWINE_PASSWORD_SECRET)
        workingDirectory: '$(Pipeline.Workspace)'
        displayName: Gather And Push Artifacts to PyPI
        failOnStderr: true

